Name,Displayed As,Symbol,Description,Stacks?,Remove at End Turn?,Remove at Start Turn?,Invisible?,Blocked by Reduce?,Script: When inflicted,Script: On any status infliction,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: After Combat,Script: On damage inflicted,Script: On damage taken,Script: On status remove
mqbonk,Bonked,star,Take double damage from [yellow]Bonk[].,NO,NO,YES,NO,NO,,,,,,,,,,,
mqshadow1,Shadow,blind,Roll an extra 1 and take [sword]1 damage each turn.,NO,NO,NO,NO,NO,,,,givedice(1); pierceattackself(1);,,,,,,,
mqshadow2,Shadow,blind,Roll an extra 2 and take [sword]1 damage each turn.,NO,NO,NO,NO,NO,,,,givedice(2); pierceattackself(1);,,,,,,,
mqshadow3,Shadow,blind,Roll an extra 3 and take [sword]1 damage each turn.,NO,NO,NO,NO,NO,,,,givedice(3); pierceattackself(1);,,,,,,,
mqshadow4,Shadow,blind,Roll an extra 4 and take [sword]1 damage each turn.,NO,NO,NO,NO,NO,,,,givedice(4); pierceattackself(1);,,,,,,,
mqshadow5,Shadow,blind,Roll an extra 5 and take [sword]1 damage each turn.,NO,NO,NO,NO,NO,,,,givedice(5); pierceattackself(1);,,,,,,,
mqshadow6,Shadow,blind,Roll an extra 6 and take [sword]1 damage each turn.,NO,NO,NO,NO,NO,,,,givedice(6); pierceattackself(1);,,,,,,,
reversenexttarget,Swap_Next_Target,recycle,The next equipment you use will swap target.,YES,NO,NO,NO,NO,,,,,,,,,,,
haunted,Haunted,haunted,Using any piece of equipment will|reroll a random dice.,YES,YES,NO,NO,YES,,,,,,,,,,,
blockall,Block_All,reduce,Take no damage until the end of this turn.,NO,NO,YES,NO,NO,,,,,,,,,,,
spookyfury,Spooky_Fury,fury,50% chance to use the next equipment twice[;]|lasts until something triggers it.,YES,NO,NO,NO,NO,,,,,,,,,,,
doublespookyfury,Spooky_Fury,fury,50% chance to use the next equipment twice[;]|lasts until something triggers it.,NO,YES,YES,YES,NO,,,,,,,,,,,
errorall,Error_All,recycle,(text should not appear - workaround for Polarity Flip + Pandemonium combination),NO,YES,NO,YES,NO,,,,,,,,,,,
mqverse,Verse,jinx,Increase by [jinx]1 on equipment use.|On [jinx]10[;] heal everyone by [heal]4.|Passed to the enemy after your turn.,YES,YES,NO,NO,NO,,,,,,,inflict(~mqverse~ | (getstatusself(~mqverse~) % 10));,,,,
mqdirewolfcurse,Dire_Curse,curse,Gain [curse]<value> curses every turn.|Defeat enemies to reduce.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqreduce,Always_reduce_by,reduce,Take less damage from every enemy attack this battle.,YES,YES,NO,NO,NO,,,,,,,,,,,
alternate_mqreduce,Always_reduce_by?,reduce,Block <value> status effects from enemy every turn.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqsharpening,Sharpening,sword,Deal additional [sword]<value> damage with your attacks.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqweaknessfire,Fire_Weakness,fire,You are weak to fire damage.,NO,NO,NO,NO,NO,,,,,,,,,,,
mqweaknessice,Ice_Weakness,ice,You are weak to ice damage.,NO,NO,NO,NO,NO,,,,,,,,,,,
mqweaknesspoison,Poison_Weakness,poison,You are weak to poison damage.,NO,NO,NO,NO,NO,,,,,,,,,,,
mqweaknessshock,Shock_Weakness,shock,You are weak to shock damage.,NO,NO,NO,NO,NO,,,,,,,,,,,
mqstrengthfire,Fire_Resistance,fire,You are strong to fire damage.,NO,NO,NO,NO,NO,,,,,,,,,,,
mqstrengthice,Ice_Resistance,ice,You are strong to ice damage.,NO,NO,NO,NO,NO,,,,,,,,,,,
mqstrengthpoison,Poison_Resistance,poison,You are strong to poison damage.,NO,NO,NO,NO,NO,,,,,,,,,,,
mqstrengthshock,Shock_Resistance,shock,You are strong to shock damage.,NO,NO,NO,NO,NO,,,,,,,,,,,
mqcursedbite,Cursed_Bite,curse,Your equipment is temporarily replaced with the enemy equipment.,NO,NO,NO,NO,NO,,,,,,,,,,,
mqinsanity,Insanity,jinx,Your equipment has random effects this turn.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqencase,Encase,mana,Lock <value> equipment behind a countdown for this fight.,YES,YES,YES,NO,NO,,,,,,,,,,,
mqencase_all,Encase_all,mana,Lock all equipment behind a countdown for this fight.,NO,NO,YES,NO,NO,,,,,,,,,,,
mqfatigue,Fatigue,weaken,Weakened equipment has no effect.,NO,NO,YES,NO,NO,,,,,,,,,,,
mqpotionmixer_fire,Fire_Element,fire,Mixed potions inflict [fire]<value> burn and do [fire]2x<value> damage.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqpotionmixer_ice,Ice_Element,ice,Mixed potions inflict [ice]<value> freeze and do [ice]2x<value> damage.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqpotionmixer_shock,Shock_Element,shock,Mixed potions inflict [shock]<value> shock and do [shock]2x<value> damage.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqpotionmixer_poison,Poison_Element,poison,Mixed potions inflict [poison]<value> poison and do [poison]2x<value> damage.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqpotionmixer_weaken,Weakness_Element,weaken,Mixed potions inflict [weaken]<value> weaken and do [weaken]2x<value> damage.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqpotionmixer_bear,Ferocity_Element,potion,Mixed potions heal you for [heal]6x<value> and transform you into a bear.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqsubzero,Subzero,ice,[ice]Freeze also inflicts [lock]Lock.,NO,NO,NO,NO,NO,,,if(self.hasstatus(ICE)) inflictself(LOCK | getstatusself(ICE));,,,,,,,,
mqfakeice,Frozen,ice,Turns the highest dice rolled into a 1.,YES,YES,YES,NO,NO,,,,,,,,,,,
mqfakeice_all,Frozen_all,ice,Turns the highest dice rolled into a 1.,NO,NO,YES,NO,NO,,,,,,,,,,,
alternate_mqfakeice,Frozen?,ice,Reduce all dice values by <value>.,YES,YES,YES,NO,NO,,,,,,,,,,,
alternate_mqfakeice_all,Frozen_all?,ice,Reduce all dice values by 1.,NO,NO,YES,NO,NO,,,,,,,,,,,
mqhelium,Helium,jinx,Things fly away!,NO,NO,YES,NO,YES,,,,,,,,,,,
mqheliumreduction,Helium_Reduction,jinx,Helium-filled things fly away [jinx]<value>% slower.,YES,YES,NO,NO,NO,,,,,,,,,,,
mqmadisonfury,Lasting_Fury,fury,Gain [fury]1 Fury at the start of each turn (<value> turns left).,YES,YES,NO,YES,NO,,,,,,,,,,,
mqruleverse,Verse,jinx,(should not appear),NO,NO,NO,YES,NO,,,,,inflictself(~mqverse~); if(getstatusself(~mqverse~) == 10){ attackself(-4); attack(-4); inflictself(~verseremove~); },,,,,,
mqvacuumrule,Vacuum_Drain,heart,Drain [heart]2 health when attacking.,NO,NO,NO,NO,NO,,,,,,,,,attackself(-2);,,
mqsneezyrule,Sneeze_Boost,dice,When a countdown is lowered[;]|all countdowns decrease by 1.,NO,NO,NO,NO,NO,,,,,,boostcountdowns(1);,,,,,
gainweirdhaunt,Gain_Haunt,haunted,(should not appear),NO,NO,NO,YES,NO,,,inflict(~weirdhaunt~);,,,,,,,,
possess,Possession,haunted,[haunted]Haunted dice reroll into|the same value or lower.,NO,NO,NO,YES,NO,var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdhaunt\~ | getstatusself(\~haunted\~)); removestatusself(\~haunted\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdhaunt\~ | getstatusself(\~haunted\~)); removestatusself(\~haunted\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdhaunt\~ | getstatusself(\~haunted\~)); removestatusself(\~haunted\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdhaunt\~ | getstatusself(\~haunted\~)); removestatusself(\~haunted\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~weirdhaunt~[;] 1]).move(),,,,,,
weirdhaunt,Haunted,haunted,Using any piece of equipment|will reroll a random dice into|a lower value if possible.,YES,YES,NO,NO,YES,,,,,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); var dlist = []; var dval = dicelist[0].basevalue; if(dval == 1){dlist = [1];} if(dval == 2){dlist = [1];} if(dval == 3){dlist = [1|2];} if(dval == 4){dlist = [1|2|3];} if(dval == 5){dlist = [1|2|3|4];} if(dval == 6){dlist = [1|2|3|4|5];} dicelist[0].animatereroll(rand(dlist)| self.screenposition()); } new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~weirdhaunt~[;] 1]).move(),,,,,,
verseremove,ReVerse,jinx,(should not appear),NO,NO,NO,YES,NO,removestatusself(~mqverse~ | 10);,,,,,,,,,,
alternate_haunted,Haunted?,haunted,Using any piece of equipment will|flip a random dice.,YES,YES,NO,NO,YES,,,,,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist);  dicelist[0].animatereroll(7 - dicelist[0].basevalue| self.screenposition()); } new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~alternate_haunted~[;] 1]).move(),,,,,,
voodoo,Voodoo,voodoo,Reflect the next status effect.,YES,NO,NO,NO,NO,if(getstatusself(~voodoo~) > 12){self.textparticle(~[voodoo]Maxed [voodoocolor]out!~); while(getstatusself(~voodoo~) > 12){removestatusself(~voodoo~);}},for(y in 0...inflicted_value){ for(x in [~fire~|~ice~|~shock~|~weaken~|~poison~|~curse~|~silence~|~lock~|~ncr_vanish~|~haunted~|~weirdhaunt~|~confuse~]){ if(inflicted_type == x){ inflict(inflicted_type); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~voodoo~[;] 1]).move(); } } },,,,,,,,,
alternate_voodoo,Voodoo?,voodoo,Benefit from the next status effect.,YES,NO,NO,NO,NO,if(getstatusself(~alternate_voodoo~) > 12){self.textparticle(~[voodoo]Maxed [voodoocolor]out!~); while(getstatusself(~alternate_voodoo~) > 12){removestatusself(~alternate_voodoo~);}},for(y in 0...inflicted_value){ for(x in [~fire~|~ice~|~shock~|~weaken~|~poison~|~curse~|~silence~|~lock~|~ncr_vanish~|~haunted~|~weirdhaunt~|~confuse~]){ if(inflicted_type == x){ inflictself(rand([REDUCE|THORNS|REEQUIPNEXT|FURY|DODGE])); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~voodoo~[;] 1]).move(); } } },,,,,,,,,
ncr_injection,Script_Injection,cog,Next card you use will do damage equal to|the dice inserted before its normal effect.,YES,NO,NO,NO,NO,,,,,,,,,,,
lateflip,Late_Flip,recycle,Flip <value> dice next turn.,YES,NO,NO,NO,NO,,,,,,,,,,,
ncr_paralysis,Paralyze,shock,Temporarily disable a random equipment whenever you use a card|directed at the enemy. Equipment can be re-enabled for 1 dice.,YES,YES,NO,NO,YES,,,,,if(e.castdirection == 1) { inflictself(SHOCK); self.applyequipmentcurses(); var tw = new motion.actuators.SimpleActuator(null|0.01|null); var s = new elements.Skill(~Against all odds_old~); s.script = ~  removestatusself(\~~ + status.type + ~\~);~; tw.onComplete(s.execute|[self|target]); tw.move(); },,,,,,
alternate_ncr_paralysis,Paralyze?,shock,Temporarily disable a random equipment whenever you use a card|directed at the enemy. Equipment can be re-enabled for 3 health.,YES,YES,NO,NO,YES,,,,,if(e.castdirection == 1) { inflictself(SHOCK); self.applyequipmentcurses(); var tw = new motion.actuators.SimpleActuator(null|0.01|null); var s = new elements.Skill(~Against all odds_old~); s.script = ~  removestatusself(\~~ + status.type + ~\~);~; tw.onComplete(s.execute|[self|target]); tw.move(); },,,,,,
ncr_paralysis_all,Paralyze_all,shock,Temporarily disable a random equipment whenever you use a card|directed at the enemy. Equipment can be re-enabled for 1 dice.,NO,YES,NO,NO,YES,,,,,if(e.castdirection == 1) { inflictself(SHOCK); self.applyequipmentcurses(); },,,,,,
alternate_ncr_paralysis_all,Paralyze_all?,shock,Temporarily disable a random equipment whenever you use a card|directed at the enemy. Equipment can be re-enabled for 3 health.,NO,YES,NO,NO,YES,,,,,if(e.castdirection == 1) { inflictself(SHOCK); self.applyequipmentcurses(); },,,,,,
ncr_jumble,Jumble,weaken,Your cards' slots are mixed up.,NO,YES,NO,NO,YES,,,,sfx(~apply_weaken_to_equipment~); var indices = []; var shuffledindices = []; for(eq in self.equipment) { if(eq.isready() && eq.skillcard == ~~) { indices.push(self.equipment.indexOf(eq)); } }   shuffledindices = shuffle(indices.copy());  self.setvar(~jumbleindices~|indices); self.setvar(~jumbleshuffledindices~|shuffledindices);  self.setvar(~jumbleequipmentnames~|[for(eq in self.equipment) eq.name]); var indicessame = true; for(indice in shuffledindices) { if(shuffledindices[indices.indexOf(indice)] != indice) { indicessame = false; break; } } if(indicessame) { shuffledindices.unshift(shuffledindices.pop()); } /*there are people who are going to read this and cry*/ trace(indices); trace(shuffledindices);   var slotlist = []; var cdlist = []; var i = 0;  for(indice in indices) { slotlist.push(self.equipment[indice].getslots()); cdlist.push(self.equipment[indice].remainingcountdown); }  trace(indices); trace(shuffledindices); trace(slotlist); trace(cdlist);  for(indice in shuffledindices) { var eq = self.equipment[indice]; eq.changeslots(slotlist[i]); eq.remainingcountdown = cdlist[i]; eq.animate(~flashandshake~); eq.animation[eq.animation.length - 1].addcommand(~textparticle~[;] ~[weaken] Jumbled!~[;] 14519873); i++; },,,var names = self.getvar(~jumbleequipmentnames~); var indices = self.getvar(~jumbleindices~); var shuffledindices = self.getvar(~jumbleshuffledindices~); var slotlist = []; var cdlist = []; var i = 0;  for(indice in shuffledindices) { slotlist.push(self.equipment[indice].getslots()); cdlist.push(self.equipment[indice].remainingcountdown); }  for(indice in indices) { var eq = self.equipment[indice]; eq.changeslots(slotlist[i]); eq.remainingcountdown = cdlist[i]; if(eq.name != names[self.equipment.indexOf(eq)]) { eq.resetslots(); eq.remainingcountdown = eq.countdown; } i++; },,,,
edenmana,Mana,edenmana,Used to play some cards[;]|powering them up and making|them benefit from [spellpower]Spell [spellcolor]Power.,YES,NO,NO,NO,NO,if(getstatusself(~edenmana~) > getstatusself(~maxmana~)){while(getstatusself(~edenmana~) > getstatusself(~maxmana~)){removestatusself(~edenmana~);} self.textparticle(~[edenmana]Maxed [edenmanacolor]out!~);} for(x in [~~|~2~|~3~|~4~]){self.setvar(~pastmana~ + x | status.value);},,,,,,,,,,
maxmana,Max [maxmanacolor]Mana,maxmana,Your mana caps at <value>.|Increases as you level up.,YES,NO,NO,NO,NO,var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~edenmana\~ | getstatusself(\~maxmana\~));~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),,,,for(x in [~~|~2~|~3~|~4~]){self.setvar(~pastmana~ + x| getstatusself(~edenmana~));},,,,,,
managain,Mana Gain,manaregen,You shouldn't see this.,NO,NO,NO,YES,NO,inflictself(~manaregen~ | self.getvar(~manaregen~) + 1); while(getstatusself(~maxmana~) < [3|4|4|5|5|6][self.level - 1] + self.getvar(~maxmanabuff~)){inflictself(~maxmana~);},,,,,,,,,,
flow,Flow,flow,Used to power up certain cards.|Lose 1 Flow per card played.,YES,NO,NO,NO,NO,,,,,new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~flow~[;] 1]).move(),,,,,,
trinity,Trinity,trinity,Stacks up to 3.|Powers up certain cards when full.,YES,NO,NO,NO,NO,if(getstatusself(~trinity~) > 2){inflictself(~trinitycast~); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~trinity~[;] ALL]).move();},,,,,,,,,,
trinitycast,Tri [tricolor]Cast,trinitycast,Used to power up certain cards.|On use[;] reset to 0 Trinity.,NO,NO,NO,NO,NO,new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~trinity~[;] ALL]).move();,new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~trinity~[;] ALL]).move();,,,,,,,,,
fragile,Fragile,fragile,Take 1.5x [sword]damage for the next <value> hits.,YES,NO,NO,NO,YES,,,,,,,,,,self.hp -= dmg / 2; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~fragile~[;] 1]).move();,
frost,Frost,frost,Stacks up to 3.|When full[;] take [ice]8 damage and reset.,YES,NO,NO,NO,YES,if(status.value > 2){attackself(8 | ICE); removestatusself(~frost~ | 3);},,,,,,,,,,
link,Link,link,Take [sword]damage from the next <value> attacks you perform.,YES,NO,NO,NO,YES,,,,,,,,,target.textparticle(~[200%][link]\t~); self.textparticle(~[200%][link]\t~); attackself(dmg); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~link~[;] 1]).move();,,
flame,Flame,flame,You take [fire]<value> damage when|inflicted with a non-Flame status.,YES,YES,NO,NO,YES,,if(inflicted_type != ~anima~){attackself(getstatusself(~flame~)| FIRE);},,,,,,,,,
slow,Slow,slow,Using any piece of equipment|will decrease all dice values by 1.,YES,YES,NO,NO,YES,self.setvar(~slowchange~ | 1);,,,self.setvar(~slowchange~ | 0);,if(self.getvar(~slowchange~) == 0){for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue > 1){ mydice.animatereroll(mydice.basevalue - 1| self.screenposition()); } } new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~slow~[;] 1]).move();} self.setvar(~slowchange~ | 0);,,,,,,
root,Root,root,Your dice range is <value> smaller[;]|down to a minimum of all ones.,YES,YES,NO,NO,YES,if(getstatusself(~root~) > 5){while(getstatusself(~root~) > 5){removestatusself(~root~);} self.textparticle(~[dice]Dice range already at minimum!~);},,if(self.isplayer){self.setvar(~oldrange~ | Rules.actualplayerdicerange);} else{self.setvar(~oldrange~ | Rules.actualenemydicerange);} var dicerange = []; var val = status.value; if(val > 5){val = 5;} for(x in 1...7 - val){dicerange.push(x);} if(self.isplayer){Rules.playerdicerange(dicerange);} else{Rules.enemydicerange(dicerange);},,,,if(self.getvar(~oldrange~) != [] && self.getvar(~oldrange~) != 0){if(self.isplayer){Rules.playerdicerange(self.getvar(~oldrange~));} else{Rules.enemydicerange(self.getvar(~oldrange~));}} else{if(self.isplayer){Rules.playerdicerange([1[;] 2[;] 3[;] 4[;] 5[;] 6]);} else{Rules.enemydicerange([1[;] 2[;] 3[;] 4[;] 5[;] 6]);}},,,,
crack,Crack,crack,Using any equipment has a 50%|chance to disable it next turn.,YES,NO,NO,NO,YES,self.setvar(~crackchange~ | 1);,,,,if(rand([0|1]) == 0 && self.getvar(~crackchange~) == 0){e.availablenextturn = false; e.unavailabletext = ~Broken!~; self.textparticle(~[crack]Cracked!~); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~crack~[;] 1]).move();} self.setvar(~crackchange~ | 0);,,,,,,
break,Break,break,Up to <value> random equipment will be|unavailable next turn if used.,YES,NO,NO,NO,YES,,,,var numset = []; for(x in 0...self.equipment.length){numset.push(x);} while(numset.length > status.value){numset.remove(rand(numset));} self.setvar(~breakset~ | numset);,var numset = self.getvar(~breakset~); for(x in 0...numset.length){if(self.equipment[numset[x]] == e){e.availablenextturn = false; e.unavailabletext = ~Broken!~; self.textparticle(~[break]Broken!~); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~break~[;] 1]).move(); numset.remove(numset[x]); self.setvar(~breakset~ | numset);}},,,,,,
push,Push,push,Up to <value> random equipment|have their slots modified upward.,YES,NO,NO,NO,NO,,,,var startslots = [~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~|~SPARE1~|~SPARE2~|~SPARE3~|~SPARE4~|~SPARE5~|~SPARE6~|~EVEN~|~ODD~|~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~NORMAL~|~MIN2~|~MIN3~|~MIN4~|~MIN5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~]; var endslots = [~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~|~SPARE1~|~SPARE2~|~SPARE3~|~SPARE4~|~SPARE5~|~SPARE6~|~ODD~|~EVEN~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~REQUIRE1~|~RANGE23~|~RANGE24~|~RANGE25~|~MIN2~|~MIN2~|~MIN3~|~MIN4~|~MIN5~|~REQUIRE6~|~RANGE34~|~RANGE35~|~MIN3~|~RANGE45~|~MIN4~|~MIN5~]; var extrastart = [~NORMAL~|~MIN2~|~MIN3~|~MIN4~|~MIN5~]; var goodeq = []; var eqleft = status.value; for(eq in self.equipment) { if (eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles && !eq.hastag(~pullreset~)) { goodeq.push(eq); } } while(goodeq.length > eqleft){ goodeq.remove(rand(goodeq)); } self.setvar(~pushremove~ | goodeq.length); if(goodeq.length > 0){for (eq in goodeq) { var flag = false; var slots = eq.getslots(); var output = []; for (s in slots) { if(startslots.indexOf(s) > -1){ output.push(endslots[startslots.indexOf(s)]); flag = true; } if(extrastart.indexOf(s) > -1 && output.length < 5){ output.push(~FREE1~); flag = true; } }; if (flag) { eq.animate(~flashandshake~); eq.changeslots(output); eq.addtag(~pushreset~); }; };} new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~push~[;] self.getvar(~pushremove~)]).move();,,,,,,,
pull,Pull,pull,Up to <value> random equipment|have their slots modified downward.,YES,NO,NO,NO,NO,,,,var startslots = [~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~|~SPARE1~|~SPARE2~|~SPARE3~|~SPARE4~|~SPARE5~|~SPARE6~|~EVEN~|~ODD~|~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~NORMAL~|~MIN2~|~MIN3~|~MIN4~|~MIN5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~]; var endslots = [~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~|~SPARE1~|~SPARE2~|~SPARE3~|~SPARE4~|~SPARE5~|~SPARE6~|~ODD~|~EVEN~|~REQUIRE6~|~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE1~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~MAX2~|~RANGE25~|~RANGE35~|~RANGE45~|~MAX2~|~MAX3~|~MAX4~|~RANGE23~|~RANGE24~|~RANGE34~]; var extrastart = [~NORMAL~|~MAX2~|~MAX3~|~MAX4~|~MAX5~]; var goodeq = []; var eqleft = status.value; for(eq in self.equipment) { if (eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles && !eq.hastag(~pushreset~)) { goodeq.push(eq); } } while(goodeq.length > eqleft){ goodeq.remove(rand(goodeq)); } self.setvar(~pullremove~ | goodeq.length); if(goodeq.length > 0){for (eq in goodeq) { var flag = false; var slots = eq.getslots(); var output = []; for (s in slots) { if(startslots.indexOf(s) > -1){ output.push(endslots[startslots.indexOf(s)]); flag = true; } if(extrastart.indexOf(s) > -1 && output.length < 5){ output.push(~FREE1~); flag = true; } }; if (flag) { eq.animate(~flashandshake~); eq.changeslots(output); eq.addtag(~pullreset~); }; };} new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~pull~[;] self.getvar(~pullremove~)]).move();,,,,,,,
swap,Teleport,move,Two equipment have their slots swapped.,NO,NO,NO,NO,NO,,,,var goodeq = []; for(eq in self.equipment) { if (eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles) { goodeq.push(eq); } } while(goodeq.length > 2){ goodeq.remove(rand(goodeq)); } if(goodeq.length == 2){ var eq1 = goodeq[0]; var eq2 = goodeq[1]; eq1.animate(~flashandshake~); eq2.animate(~flashandshake~); var temp = eq1.getslots(); eq1.changeslots(eq2.getslots()); eq2.changeslots(temp); eq1.addtag(~swapreset~); eq2.addtag(~swapreset~); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~swap~ | 1]).move();},,,,,,,
resetter,Resetter,move,You shouldn't see this.,NO,NO,NO,YES,NO,,,,,,,for(eq in self.equipment){if(eq.hastag(~swapreset~)){eq.removetag(~swapreset~); eq.resetslots();}} for(eq in self.equipment){if(eq.hastag(~pullreset~)){eq.removetag(~pullreset~); eq.resetslots();}} for(eq in self.equipment){if(eq.hastag(~pushreset~)){eq.removetag(~pushreset~); eq.resetslots();}},,,,
toxin,Toxin,toxin,Lose <value> [heart]health and halve this.|Doesn't decay on turns it increased.,YES,NO,NO,NO,YES,self.setvar(~toxinchange~ | 1);,,if(self.getvar(~toxinchange~) == 0){self.hp -= status.value / 2; sfx(~_poison~); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~toxin~[;] status.value / 2]).move();},,,,self.setvar(~toxinchange~ | 0);,,,,self.setvar(~toxinchange~ | 0);
guard,Guard,guard,Block up to <value> damage.|Decays by 40% at the end of the turn.|Blocks most forms of piercing.,YES,NO,NO,NO,NO,,,,,,,new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~guard~[;] 2 * status.value / 5]).move();,,,if(status.value >= dmg){self.hp += dmg; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~guard~[;] dmg]).move();} else{self.hp += status.value; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~guard~[;] ALL]).move();},
haste,Haste,haste,Using any piece of equipment|will increase all dice values by 1.,YES,YES,NO,NO,YES,self.setvar(~hastechange~ | 1);,,,self.setvar(~hastechange~ | 0);,if(self.getvar(~hastechange~) == 0){for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue < 6){ mydice.animatereroll(mydice.basevalue + 1| self.screenposition()); } } new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~haste~[;] 1]).move();} self.setvar(~hastechange~ | 0);,,,,,,
anchor,Anchor,anchor,Using any piece of equipment|will halve the value of a random dice.,YES,YES,NO,NO,YES,if(self.getvar(~hexawan~) == 1){removestatusself(~anchor~ | inflicted_value);},,,,if(self.getvar(~hexawan~) == 0){var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 1){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist);  dicelist[0].animatereroll([1|1|1|2|2|3|3][dicelist[0].basevalue] | self.screenposition()); } new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~anchor~[;] 1]).move()},,,,,,
spellpower,Spell [spellcolor]Power,spellpower,Strengthens cards that mana is spent on.,YES,NO,NO,NO,NO,,,,,,,,,,,
jolt,Jolt,jolt,You take [shock]<value> damage|when you use an equipment.,YES,YES,NO,NO,YES,,,,,pierceattackself(getstatusself(~jolt~)| SHOCK);,,,,,,
glow,Glow,lantern,Get a random dice next turn,YES,NO,YES,NO,NO,,,,givedice(); sfx(~diceroll~);,,,,,,,
ncr_lingeringcounter1,Permacounter_1,lock,Receive [lock]Counter_1 every turn.,NO,NO,NO,NO,YES,,,inflictself(~counter_1~);,,,,,,,,
ncr_lingeringcounter2,Permacounter_2,lock,Receive [lock]Counter_2 every turn.,NO,NO,NO,NO,YES,,,inflictself(~counter_2~);,,,,,,,,
ncr_lingeringcounter3,Permacounter_3,lock,Receive [lock]Counter_3 every turn.,NO,NO,NO,NO,YES,,,inflictself(~counter_3~);,,,,,,,,
ncr_lingeringcounter4,Permacounter_4,lock,Receive [lock]Counter_4 every turn.,NO,NO,NO,NO,YES,,,inflictself(~counter_4~);,,,,,,,,
ncr_lingeringcounter5,Permacounter_5,lock,Receive [lock]Counter_5 every turn.,NO,NO,NO,NO,YES,,,inflictself(~counter_5~);,,,,,,,,
ncr_lingeringcounter6,Permacounter_6,lock,Receive [lock]Counter_6 every turn.,NO,NO,NO,NO,YES,,,inflictself(~counter_6~);,,,,,,,,
anima,[red2]A[orange2]n[yellow2]i[green2]m[blue2]a[],anima,Stacks up to 3. When full[;] take [ice]8 damage and reset.|You take [fire]<value> damage when inflicted with a non-Anima status.,YES,YES,NO,NO,YES,if(status.value > 2){attackself(8 | ICE); removestatusself(~anima~ | 3);},if(inflicted_type != ~flame~ && inflicted_type != ~frost~ && inflicted_type != ~anima~){attackself(status.value| FIRE);},,,,,,,,,
animagain,Anima Gain,anima,You shouldn't see this.,NO,NO,NO,YES,NO,for(x in [~frost~|~flame~|~jolt~]){var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~anima\~ | getstatusself(\~~ + x + ~\~)); removestatusself(\~~ + x + ~\~| ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move();},for(x in [~frost~|~flame~|~jolt~]){var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~anima\~ | getstatusself(\~~ + x + ~\~)); removestatusself(\~~ + x + ~\~| ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move();},for(x in [~frost~|~flame~|~jolt~]){var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~anima\~ | getstatusself(\~~ + x + ~\~)); removestatusself(\~~ + x + ~\~| ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move();},for(x in [~frost~|~flame~|~jolt~]){var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~anima\~ | getstatusself(\~~ + x + ~\~)); removestatusself(\~~ + x + ~\~| ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move();},for(x in [~frost~|~flame~|~jolt~]){var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~anima\~ | getstatusself(\~~ + x + ~\~)); removestatusself(\~~ + x + ~\~| ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move();},,,,,,
manaregen,Mana [edenmanacolor]Regen,manaregen,Gain <value> [edenmana]Mana each turn[;]|up to your [maxmana]Max [maxmanacolor]Mana.,YES,NO,NO,NO,NO,,,,if(getstatusself(~edenmana~) < getstatusself(~maxmana~)){inflictself(~edenmana~ | status.value);},,,,,,,
doublelift,Doublelift,jam,You shouldn't see this.,NO,NO,NO,YES,NO,,,,self.setvar(~cards~ | Deck.getcards(~all~));,if(Deck.getcard(0) == null){inflictself(~extraturn~); self.endturnnow();},,addjestercard(~Jam~);,,,,
hearth,Hearth,flow,You shouldn't see this.,NO,NO,NO,YES,NO,,,,,inflictself(~flow~);,,,,,,
weirdjolt,Jolt,jolt,You take [shock]<value>/2 damage and gain|1 [jolt]Jolt when you use an equipment.,YES,YES,NO,NO,YES,,,,,pierceattackself(status.value / 2 | SHOCK); inflictself(~weirdjolt~);,,,,,,
glimmer,Glimmer,jolt,You shouldn't see this.,NO,NO,NO,YES,NO,var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdjolt\~ | getstatusself(\~jolt\~)); removestatusself(\~jolt\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdjolt\~ | getstatusself(\~jolt\~)); removestatusself(\~jolt\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdjolt\~ | getstatusself(\~jolt\~)); removestatusself(\~jolt\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdjolt\~ | getstatusself(\~jolt\~)); removestatusself(\~jolt\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),,,,,,,
weirdguard,Guard,guard,Block up to <value> damage.|Disappears at the start of the turn.|Blocks most forms of piercing.,YES,NO,NO,NO,NO,,,new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~weirdguard~[;] ALL]).move();,,,,,,,if(status.value >= dmg){self.hp += dmg; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~guard~[;] dmg]).move();} else{self.hp += status.value; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~guard~[;] ALL]).move();},
phalanx,Phalanx,guard,You shouldn't see this.,NO,NO,NO,YES,NO,var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdguard\~ | getstatusself(\~guard\~)); removestatusself(\~guard\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdguard\~ | getstatusself(\~guard\~)); removestatusself(\~guard\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdguard\~ | getstatusself(\~guard\~)); removestatusself(\~guard\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~weirdguard\~ | getstatusself(\~guard\~)); removestatusself(\~guard\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),inflictself(~weirdguard~);,,,,,,
miseri,Miseri,toxin,You shouldn't see this.,NO,NO,NO,YES,NO,,if(inflicted_type == ~toxin~){inflictself(~fragile~);},,,,,,,,,
doublepush,Push,push,Twice[;] up to <value> random equipment|have their slots modified upward.,YES,NO,NO,NO,NO,,,,var startslots = [~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~|~SPARE1~|~SPARE2~|~SPARE3~|~SPARE4~|~SPARE5~|~SPARE6~|~EVEN~|~ODD~|~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~NORMAL~|~MIN2~|~MIN3~|~MIN4~|~MIN5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~]; var endslots = [~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~|~SPARE1~|~SPARE2~|~SPARE3~|~SPARE4~|~SPARE5~|~SPARE6~|~ODD~|~EVEN~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~REQUIRE1~|~RANGE23~|~RANGE24~|~RANGE25~|~MIN2~|~MIN2~|~MIN3~|~MIN4~|~MIN5~|~REQUIRE6~|~RANGE34~|~RANGE35~|~MIN3~|~RANGE45~|~MIN4~|~MIN5~]; var extrastart = [~NORMAL~|~MIN2~|~MIN3~|~MIN4~|~MIN5~]; var goodeq = []; var eqleft = status.value; for(eq in self.equipment) { if (eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles && !eq.hastag(~pullreset~)) { goodeq.push(eq); } } while(goodeq.length > eqleft){ goodeq.remove(rand(goodeq)); } self.setvar(~pushremove~ | goodeq.length); if(goodeq.length > 0){for (eq in goodeq) { var flag = false; var slots = eq.getslots(); var output = []; for (s in slots) { if(startslots.indexOf(s) > -1){ output.push(endslots[startslots.indexOf(s)]); flag = true; } if(extrastart.indexOf(s) > -1 && output.length < 5){ output.push(~FREE1~); flag = true; } }; if (flag) { eq.animate(~flashandshake~); eq.changeslots(output); eq.addtag(~pushreset~); }; };} new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~push~[;] self.getvar(~pushremove~)]).move(); goodeq = []; eqleft = status.value; for(eq in self.equipment) { if (eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles && !eq.hastag(~pullreset~)) { goodeq.push(eq); } } while(goodeq.length > eqleft){ goodeq.remove(rand(goodeq)); } self.setvar(~pushremove~ | goodeq.length); if(goodeq.length > 0){for (eq in goodeq) { var flag = false; var slots = eq.getslots(); var output = []; for (s in slots) { if(startslots.indexOf(s) > -1){ output.push(endslots[startslots.indexOf(s)]); flag = true; } if(extrastart.indexOf(s) > -1 && output.length < 5){ output.push(~FREE1~); flag = true; } }; if (flag) { eq.animate(~flashandshake~); eq.changeslots(output); eq.addtag(~pushreset~); }; };} new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~push~[;] self.getvar(~pushremove~)]).move(); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~doublepush~[;] ALL]).move();,,,,,,,
doublepull,Pull,pull,Twice[;] up to <value> random equipment|have their slots modified downward.,YES,NO,NO,NO,NO,,,,var startslots = [~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~|~SPARE1~|~SPARE2~|~SPARE3~|~SPARE4~|~SPARE5~|~SPARE6~|~EVEN~|~ODD~|~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE6~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~NORMAL~|~MIN2~|~MIN3~|~MIN4~|~MIN5~|~RANGE23~|~RANGE24~|~RANGE25~|~RANGE34~|~RANGE35~|~RANGE45~]; var endslots = [~FREE1~|~FREE2~|~FREE3~|~FREE4~|~FREE5~|~FREE6~|~SPARE1~|~SPARE2~|~SPARE3~|~SPARE4~|~SPARE5~|~SPARE6~|~ODD~|~EVEN~|~REQUIRE6~|~REQUIRE1~|~REQUIRE2~|~REQUIRE3~|~REQUIRE4~|~REQUIRE5~|~REQUIRE1~|~MAX2~|~MAX3~|~MAX4~|~MAX5~|~MAX2~|~RANGE25~|~RANGE35~|~RANGE45~|~MAX2~|~MAX3~|~MAX4~|~RANGE23~|~RANGE24~|~RANGE34~]; var extrastart = [~NORMAL~|~MAX2~|~MAX3~|~MAX4~|~MAX5~]; var goodeq = []; var eqleft = status.value; for(eq in self.equipment) { if (eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles && !eq.hastag(~pushreset~)) { goodeq.push(eq); } } while(goodeq.length > eqleft){ goodeq.remove(rand(goodeq)); } self.setvar(~pullremove~ | goodeq.length); if(goodeq.length > 0){for (eq in goodeq) { var flag = false; var slots = eq.getslots(); var output = []; for (s in slots) { if(startslots.indexOf(s) > -1){ output.push(endslots[startslots.indexOf(s)]); flag = true; } if(extrastart.indexOf(s) > -1 && output.length < 5){ output.push(~FREE1~); flag = true; } }; if (flag) { eq.animate(~flashandshake~); eq.changeslots(output); eq.addtag(~pullreset~); }; };} new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~pull~[;] self.getvar(~pullremove~)]).move(); goodeq = []; eqleft = status.value; for(eq in self.equipment) { if (eq.skillcard == ~~ && eq.countdown == 0 && eq.getslots().length > 0 && !eq.needsdoubles && !eq.hastag(~pushreset~)) { goodeq.push(eq); } } while(goodeq.length > eqleft){ goodeq.remove(rand(goodeq)); } self.setvar(~pullremove~ | goodeq.length); if(goodeq.length > 0){for (eq in goodeq) { var flag = false; var slots = eq.getslots(); var output = []; for (s in slots) { if(startslots.indexOf(s) > -1){ output.push(endslots[startslots.indexOf(s)]); flag = true; } if(extrastart.indexOf(s) > -1 && output.length < 5){ output.push(~FREE1~); flag = true; } }; if (flag) { eq.animate(~flashandshake~); eq.changeslots(output); eq.addtag(~pullreset~); }; };} new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~pull~[;] self.getvar(~pullremove~)]).move(); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~doublepull~[;] ALL]).move();,,,,,,,
pusher,Pusher,push,You shouldn't see this.,NO,NO,NO,YES,NO,var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~doublepush\~ | getstatusself(\~push\~)); removestatusself(\~push\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~doublepush\~ | getstatusself(\~push\~)); removestatusself(\~push\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~doublepush\~ | getstatusself(\~push\~)); removestatusself(\~push\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~doublepush\~ | getstatusself(\~push\~)); removestatusself(\~push\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),,,,,,,
puller,Puller,pull,You shouldn't see this.,NO,NO,NO,YES,NO,var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~doublepull\~ | getstatusself(\~pull\~)); removestatusself(\~pull\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~doublepull\~ | getstatusself(\~pull\~)); removestatusself(\~pull\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~doublepull\~ | getstatusself(\~pull\~)); removestatusself(\~pull\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),var skill = new elements.Skill(~Hellfire~); skill.script = ~inflictself(\~doublepull\~ | getstatusself(\~pull\~)); removestatusself(\~pull\~ | ALL);~; new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(skill.execute[;] [self[;] target]).move(),,,,,,,
combo,Combo,combo,[nonspell]Non-spells deal an extra <value> damage[;] consuming this.,YES,NO,NO,NO,NO,,,,,if(e.hastag(~nonspell~)){attack(status.value); new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~combo~[;] ALL]).move();},,,,,,
slashfik,Slashfik,sword,You shouldn't see this.,NO,NO,NO,YES,NO,,,,,if(!e.hastag(~nonspell~)){inflictself(~combo~);},,,,,,
ncr_vanish,Vanish,vanish,Up to <value> duplicate dice are immediately destroyed.,YES,YES,NO,NO,YES,var skipsetup = false; var noeffect = false;  if(self.status.length > 0) for(stat in self.status) { if(stat.type == ~ncr_vanish~) skipsetup = true; if(stat.type == ~vanish~) noeffect = true; } if((self.getvar(~vanishactuator~) + 1 == ~SimpleActuator1~) # (target.getvar(~vanishactuator~) + 1 == ~SimpleActuator1~)) skipsetup = true; trace(skipsetup); trace(noeffect); if(skipsetup) trace(~skipping setup~); if(noeffect) { self.textparticle(~No effect!~); removestatusself(~ncr_vanish~|ALL); } else if(!skipsetup) {  trace(~starting vanish actuator~);  var tw = new motion.actuators.SimpleActuator(null|1/60|null);  tw._repeat = -1;  var s = new elements.Skill(~Against all odds_old~);  s.script = ~   if(self.hp <= 0 # self.graphic == null # target == null # target.graphic == null # target.hp <= 0) {    trace(\~vanish actuator stopped\~);    self.getvar(\~vanishactuator\~).stop();    self.resetvar(\~vanishactuator\~);   }   else {    if(self.dicepool.length > 0 && self.hasstatus(\~ncr_vanish\~)) {     var hasvalue = [false|false|false|false|false|false|false];     var dicevanished = false;     for (i in 0 ... self.dicepool.length){      if (self.dicepool[i].available()){       if (!self.dicepool[i].intween()){        if (!hasvalue[self.dicepool[i].basevalue]){         hasvalue[self.dicepool[i].basevalue] = true;        }else{         self.dicepool[i].animate(\~disappear\~);         dicevanished = true;         trace(\~decrementing self vanish\~);         removestatusself(\~ncr_vanish\~|1);         if(!self.hasstatus(\~ncr_vanish\~)) { trace(\~breaking vanish for self\~); break; }        }       }      }     }     if (dicevanished){      sfx(\~_diceburn\~);     }    }    if(target != null && target.dicepool.length > 0 && target.hasstatus(\~ncr_vanish\~)) {     var hasvalue = [false|false|false|false|false|false|false];     var dicevanished = false;     for (i in 0 ... target.dicepool.length){      if (target.dicepool[i].available()){       if (!target.dicepool[i].intween()){        if (!hasvalue[target.dicepool[i].basevalue]){         hasvalue[target.dicepool[i].basevalue] = true;        }else{         target.dicepool[i].animate(\~disappear\~);         target.dicepool[i].canbedragged = false;         dicevanished = true;         trace(\~decrementing target vanish\~);         removestatus(\~ncr_vanish\~|1);         if(!target.hasstatus(\~ncr_vanish\~)){ trace(\~breaking vanish for target\~); break; }        }       }      }     }     if (dicevanished){      sfx(\~_diceburn\~);     }    }   }  ~;  if(self.isplayer) s.execute(self|target); else s.execute(target|self);  if(self.isplayer) tw.onRepeat(s.execute|[self|target]); else tw.onRepeat(s.execute|[target|self]);  if(self.isplayer) self.setvar(~vanishactuator~|tw); else target.setvar(~vanishactuator~|tw);  tw.move(); },,,,,,,,,,
alternate_vanish,Vanish?,vanish,Every equipment use has a 50%|chance to destroy a random dice.,NO,YES,NO,NO,YES,,,,,if(chance(50)){var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(~disappear~); } },,,,,,
alternate_ncr_vanish,Vanish?,vanish,Every equipment use has a 50%|chance to destroy a random dice[;]|up to <value> dice potentially destroyed.,YES,YES,NO,NO,YES,,,,,if(chance(50)){var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(~disappear~); } new motion.actuators.SimpleActuator(null[;] 0.01[;] null).onComplete(removestatusself[;] [~alternate_ncr_vanish~]).move();},,,,,,
