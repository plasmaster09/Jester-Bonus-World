Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Classic Deck,4 Boops[;] 3 Bops|and 2 Sweets|Finale Card: Punchline,2,,,,,ORANGE,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Punchline~);} addjestercard(~boop~); addjestercard(~boop~); addjestercard(~boop~); addjestercard(~boop~); addjestercard(~bop~); addjestercard(~bop~); addjestercard(~bop~); addjestercard(~sweets~); addjestercard(~sweets~);,,,,,,,,
Parallel Deck,4 Kapows[;] 3 Blammos|and 2 Sour Candies|Finale Card: Laugh Track,2,,,,,BLUE,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Laugh Track~);} addjestercard(~kapow~); addjestercard(~kapow~); addjestercard(~kapow~); addjestercard(~kapow~); addjestercard(~blammo~); addjestercard(~blammo~); addjestercard(~blammo~); addjestercard(~sour candy~); addjestercard(~sour candy~);,,,,,,,,
Elemental Deck,Flame Blast + 2 Sparks[;]|Ice Shatter + 2 Snowflakes[;]|High Voltage + 2 Buzzers|Finale Card: Tri Attack,2,,,,,RED,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Tri Attack~);} addjestercard(~flame blast~); addjestercard(~spark~); addjestercard(~spark~); addjestercard(~ice shatter~); addjestercard(~snowflake~); addjestercard(~snowflake~); addjestercard(~high voltage~); addjestercard(~buzzer~); addjestercard(~buzzer~);,,,,,,,,
MegaQuest Deck,4 Pews[;] 2 Bonks|and 3 Cheese Slicers|Finale Card: Rewind,2,,,,,YELLOW,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Rewind~);} addjestercard(~pew~); addjestercard(~pew~); addjestercard(~pew~); addjestercard(~pew~); addjestercard(~bonk~); addjestercard(~bonk~); addjestercard(~cheese slicer~); addjestercard(~cheese slicer~); addjestercard(~cheese slicer~);,,,,,,,,
Pew,Do [sword]2 damage[;] 33%|chance to get a dice,2,attack(2); var odds = 33; if (getstatusself(~luck~) > 0) odds *= 2; if (getstatusself(~luck+~) > 0) odds = 100; if (chance(odds)) {givedice(); self.textparticle(~Success!~);},,MAX3,,RED,change_power,decreaserange,,_damage,,,,,,,,,,,,,,,,
Pew_upgraded,Do [sword]2 damage[;] 66%|chance to get a dice,2,attack(2); var odds = 66; if (getstatusself(~luck~) > 0) odds *= 2; if (getstatusself(~luck+~) > 0) odds = 100; if (chance(odds)) {givedice(); self.textparticle(~Success!~);},,MAX3,,RED,,,,_damage,,,,,,,,,,,,,,,,
Bonk,Do [sword]3 damage[;] if already|used[;] do [sword]2x,2,var dmg = 3; if (getstatus(~mqbonk~) > 0) dmg *= 2; else {sfx(~_mana~); inflict(~mqbonk~);} attack(dmg);,,MIN4,,YELLOW,change_power,change_power,,_damage,,,,,,,,,,,,,,,,
Bonk_upgraded,Do [sword]3 damage[;] if already|used[;] do [sword]2x,2,var dmg = 3; if (getstatus(~mqbonk~) > 0) dmg *= 2; else {sfx(~_mana~); inflict(~mqbonk~);} attack(dmg); inflict(~mqbonk~);,,NORMAL,,YELLOW,,,,_damage,,,,,,,,,,,,,,,,
Bonk_downgraded,Do [sword]3 damage,2,attack(3); if (getstatus(~mqbonk~) <= 0) {sfx(~_mana~); inflict(~mqbonk~);},,MIN4,,YELLOW,,,,_damage,,,,,,,,,,,,,,,,
Alt Timeline Deck,4 Bangs[;] 3 Bloops|and 2 Candies|Finale Card: Astonish,2,,,,,PINK,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Astonish~);} addjestercard(~bang~); addjestercard(~bang~); addjestercard(~bang~); addjestercard(~bang~); addjestercard(~bloop~); addjestercard(~bloop~); addjestercard(~bloop~); addjestercard(~candy~); addjestercard(~candy~);,,,,,,,,
Bang,Do [fire]2 damage|+ [fire]1 damage per [fire]Burn.,2,attack(getstatus(FIRE) + 2| FIRE); sfx(~_fire~);,,MAX4,,RED,change_power,change_power,,_fire,,,,,,,,,,,,,,,,
Bang_upgraded,Do [fire]2 damage|+ [fire]1 damage per [fire]Burn.|Return the dice.,2,attack(getstatus(FIRE) + 2| FIRE); givedice(d); sfx(~_fire~);,,MAX4,,RED,,,,_fire,,,,,,,,,,,,,,,,
Bang_downgraded,Do [fire]2 damage|+ [fire]1 damage per [fire]Burn.,2,attack(getstatus(FIRE) + 2| FIRE); sfx(~_fire~);,,MAX2,,RED,,,,_fire,,,,,,,,,,,,,,,,
Bloop,Do [dodge]2 damage[;]|and [dodge]1 damage next turn.,2,attack(2[;] DODGE); e.setvar(~bloop~[;] e.getvar(~bloop~) + 1); sfxdamage(target[;] 2);,,MIN2,,YELLOW,change_power,decreaserange,,_damage,,,,,,,e.setvar(~bloop~[;] 0);,,if(e.getvar(~bloop~) > 0){ attack(e.getvar(~bloop~)[;] DODGE); sfxdamage(target[;] 1); } e.setvar(~bloop~[;] 0);,,,,,,,
Bloop_upgraded,Do [dodge]2 damage[;]|and [dodge]2 damage next turn.,2,attack(2[;] DODGE); e.setvar(~bloop~[;] e.getvar(~bloop~) + 1); sfxdamage(target[;] 2);,,MIN2,,YELLOW,,,,_damage,,,,,,,e.setvar(~bloop~[;] 0);,,if(e.getvar(~bloop~) > 0){ attack(e.getvar(~bloop~) * 2[;] DODGE); sfxdamage(target[;] 2); } e.setvar(~bloop~[;] 0);,,,,,,,
Candy,Heal [heal]2. If above max hp[;]|convert excess to limit.,2,if(self.maxhp - self.hp == 0) { sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 2; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } } } else if(self.maxhp - self.hp == 1) { sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 1; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } } attackself(-1);} else {  attackself(-2); sfx(~_heal~); },,NORMAL,,GREEN,change_power,change_power,,_heal,,YES,,,,,,,,,,,,,,
Candy_upgraded,Heal [heal]3. If above max hp[;]|convert excess to limit.,2,if(self.maxhp - self.hp == 0) { sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 3; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } } } else if(self.maxhp - self.hp == 1) { sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 2; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } } attackself(-1);} else if(self.maxhp - self.hp == 2) { sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 1; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } } attackself(-2);} else {  attackself(-3); sfx(~_heal~); },,NORMAL,,GREEN,,,,_heal,,YES,,,,,,,,,,,,,,
Candy_downgraded,Heal [heal]1. If above max hp[;]|convert excess to limit.,2,if(self.maxhp - self.hp == 0) { sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 1; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } } } else {  attackself(-1); sfx(~_heal~); },,NORMAL,,GREEN,,,,_heal,,YES,,,,,,,,,,,,,,
Ouch,Do [sword]3 damage[;]|take [sword]1 damage,2,attack(3); attackself(1);,,NORMAL,,RED,change_power,change_power,,_damage,,,,,,,,,,,,,,,,
Ouch_upgraded,Do [sword]4 damage[;]|take [sword]1 damage,2,attack(4); attackself(1);,,NORMAL,,RED,,,,_damage,,,,,,,,,,,,,,,,
Ouch_downgraded,Do [sword]3 damage[;]|take [sword]2 damage,2,attack(3); attackself(2);,,NORMAL,,RED,,,,_damage,,,,,,,,,,,,,,,,
Plink,Do [sword]4 piercing damage[;]|inflict [shield]1 shield,2,pierceattack(4); inflict(SHIELD); sfx(~_shield~);,,MIN3,,YELLOW,change_power,change_power,,_damage,,,,,,,,,,,,,,,,
Plink_upgraded,Do [sword]5 piercing damage[;]|inflict [shield]1 shield,2,pierceattack(5); inflict(SHIELD); sfx(~_shield~);,,MIN3,,YELLOW,,,,_damage,,,,,,,,,,,,,,,,
Plink_downgraded,Do [sword]4 piercing damage[;]|inflict [shield]2 shield,2,pierceattack(4); inflict(SHIELD|2); sfx(~_shield~);,,MIN3,,YELLOW,,,,_damage,,,,,,,,,,,,,,,,
Expired Sweets,Gain [heal]3 health|but also [poison]1 poison,2,pierceattackself(-3); inflictself(POISON); sfx(~_poison~);,,NORMAL,,GREEN,change_power,change_power,,_heal,,YES,,,,,,,,,,,,,,
Expired Sweets_upgraded,Gain [heal]4 health|but also [poison]1 poison,2,pierceattackself(-4); inflictself(POISON); sfx(~_poison~);,,NORMAL,,GREEN,,,,_heal,,YES,,,,,,,,,,,,,,
Expired Sweets_downgraded,Gain [heal]3 health|but also [poison]2 poison,2,pierceattackself(-3); inflictself(POISON|2); sfx(~_poison~);,,NORMAL,,GREEN,,,,_heal,,YES,,,,,,,,,,,,,,
Terrible Deck,4 Ouches[;] 3 Plinks|and 2 Expired Sweets|Finale Card: Final Guard,2,,,,,GRAY,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Final Guard~);} addjestercard(~ouch~); addjestercard(~ouch~); addjestercard(~ouch~); addjestercard(~ouch~); addjestercard(~plink~); addjestercard(~plink~); addjestercard(~plink~); addjestercard(~expired sweets~); addjestercard(~expired sweets~);,,,,,,,,
Ping,In [jinx]1 turn[;] do [sword]3 dmg,2, jinx(~Ping~|~Deal [sword]3 damage~|~Deal [sword]3 damage~|~sfx(\~_blind\~|\~\~|0.2); attack(3); sfxdamage(null|3);~|target|self|1|3); sfx(~_thinghappens~);,,NORMAL,,PURPLE,change_power,change_power,,,,,,,,,,,,,,,,,,
Ping_upgraded,In [jinx]1 turn[;] do [sword]3 dmg|return this dice,2, jinx(~Ping~|~Deal [sword]3 damage~|~Deal [sword]3 damage~|~sfx(\~_blind\~|\~\~|0.2); attack(3); sfxdamage(null|3);~|target|self|1|3); sfx(~_thinghappens~); givedice(d);,,NORMAL,,PURPLE,,,,,,,,,,,,,,,,,,,,
Ping_downgraded,In [jinx]1 turn[;] do [sword]3 dmg,2, jinx(~Ping~|~Deal [sword]3 damage~|~Deal [sword]3 damage~|~sfx(\~_blind\~|\~\~|0.2); attack(3); sfxdamage(null|3);~|target|self|1|3); sfx(~_thinghappens~);,,MIN4,,PURPLE,,,,,,,,,,,,,,,,,,,,
Boom,In [jinx]2 turns[;] do [sword]5 dmg[;]|lower jinx counts by 2|on snap,2, jinx(~Boom~|~Deal [sword]5 damage~|~Deal [sword]5 damage~|~sfx(\~_fire\~|\~\~|0.1); sfx(\~_magic\~|\~\~|0.1); sfx(\~_dodge\~|\~\~|0.1); attack(5); sfxdamage(null|5);~|target|self|2|5); sfx(~_thinghappens~);,,MIN3,,PURPLE,change_power,change_power,,,,,,,,,,,,,,,,if (snap >=2) boostjinxcountdowns(self| 2); boostjinxcountdowns(target| 2);,,
Boom_upgraded,In [jinx]2 turns[;] do [sword]7 dmg[;]|lower jinx counts by 2|on snap,2, jinx(~Boom~|~Deal [sword]7 damage~|~Deal [sword]7 damage~|~sfx(\~_fire\~|\~\~|0.1); sfx(\~_magic\~|\~\~|0.1); sfx(\~_dodge\~|\~\~|0.1); sfx(\~_fire\~|\~\~|0.2); sfx(\~_magic\~|\~\~|0.2); sfx(\~_dodge\~|\~\~|0.2); attack(7); sfxdamage(null|7);~|target|self|2|7); sfx(~_thinghappens~);,,MIN3,,PURPLE,,,,,,,,,,,,,,,,,,if (snap >=2) attack(4); if (snap >=2) boostjinxcountdowns(self| 2); boostjinxcountdowns(target| 2);,,
Boom_downgraded,In [jinx]2 turns[;] do [sword]3 dmg[;]|lower jinx counts by 2|on snap,2, jinx(~Boom~|~Deal [sword]3 damage~|~Deal [sword]3 damage~|~sfx(\~_fire\~|\~\~|0.1); attack(3); sfxdamage(null|3);~|target|self|2|3); sfx(~_thinghappens~);,,MIN3,,PURPLE,,,,,,,,,,,,,,,,,,if (snap >=2) attack(1); if (snap >=2) boostjinxcountdowns(self| 2); boostjinxcountdowns(target| 2);,,
ClairVoyant Deck,3 Pings[;] 2 Concentrations[;]|2 Booms and 2 Hijinxes|Finale Card: Jinxploit,2,,,,,PURPLE,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Jinxploit~);} addjestercard(~ping~); addjestercard(~ping~); addjestercard(~ping~); addjestercard(~boom~); addjestercard(~boom~); addjestercard(~concentration~); addjestercard(~concentration~); addjestercard(~hijinx~); addjestercard(~hijinx~);,,,,,,,,
Thief Deck,2 Pocket Knives[;]|2 Poison Needles[;]|2 Doppeldice and 3 Dicers|Finale Card: Thievery,2,,,,,GREEN,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Thievery~);} addjestercard(~pocket knife[]~); addjestercard(~pocket knife[]~); addjestercard(~poison needle~); addjestercard(~poison needle~); addjestercard(~doppeldice~); addjestercard(~doppeldice~); addjestercard (~dicer~); addjestercard(~dicer~); addjestercard(~dicer~);,,,,,,,,
Dаgger,Do [sword]<d6> damage|On Snap[;] get cursed|[gray](Reuseable),2,attack(d);,,MAX3,,RED,add1,complicate,,_damage,-1,,,,,,,,,,,,,inflictself(~curse~ | 99);,,
Grater,Shred dice[;] 33% chance|to take [sword]<d6> damage,2,givedice(split(d[;] rand([2[;] 3[;] 4]))[;] ~splitdice~); if (chance(33)) {attackself(d); sfxdamage(self[;] d);},,EVEN,,GREEN,change_power,change_power,,_metals,,YES,,,,,,,,,,,,,,
Grater_upgraded,Shred dice[;] 33% chance|to take [sword]<d6> damage,2,givedice(split(d[;] rand([2[;] 3[;] 4]))[;] ~splitdice~); if (chance(33)) {attackself(d); sfxdamage(self[;] d);},,MIN2,,GREEN,,,,_metals,,YES,,,,,,,,,,,,,,
Grater_downgraded,Shred dice[;] 66% chance|to take [sword]<d6> damage,2,givedice(split(d[;] rand([2[;] 3[;] 4]))[;] ~splitdice~); if (chance(66)) {attackself(d); sfxdamage(self[;] d);},,EVEN,,GREEN,,,,_metals,,YES,,,,,,,,,,,,,,
Random Deck,4 Robots[;] 2 Inventors|and 3 Inventor?s|Finale Card: Randomizer,2,,,,,WHITE,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Randomizer~);} addjestercard(~call for backup robot~); addjestercard(~call for backup robot~); addjestercard(~call for backup robot~); addjestercard(~call for backup robot~); addjestercard(~call for backup inventor~); addjestercard(~call for backup inventor~); addjestercard(~call for backup inventor?~); addjestercard(~call for backup inventor?~); addjestercard(~call for backup inventor?~);,,,,,,,,
Randomizer,Triple Seven|Get a random|upgraded item,2,/*$var eq = rand(getequipmentlist(null|[]|[~skillcard~|~excludefromrandomlists~|~robotonly~|~witchonly~|~onceperbattle~|~alternateversion~])); var modifier = ~~; replacemewith(eq + ~+~| -1);$*/,,,,WHITE,,,,,,YES,,excludefromrandomlists|powercard|finale,,,,,,,,,,,,
Tri Attack,Inflict [shock] shock[;]|[fire] burn[;] and [ice] freeze[;]|and do 1 damage of each,2,inflict(SHOCK); inflict(ICE); inflict(FIRE); attack(1 | FIRE); attack(1 | ICE); attack(1 | SHOCK);,,COUNTDOWN,12,YELLOW,change_power,change_power,,,,,,finale,,,,,,,,,,,,
Tri Attack_upgraded,Inflict [shock]2 shock[;]|[fire]2 burn[;] [ice]2 freeze[;]|and do 2 damage of each,2,inflict(SHOCK| 2); inflict(ICE| 2); inflict(FIRE| 2); attack(2 | FIRE); attack(2 | ICE); attack(2 | SHOCK);,,COUNTDOWN,12,YELLOW,,,,,,,,finale,,,,,,,,,,,,
Tri Attack_downgraded,Inflict [shock] shock[;]|[fire] burn[;] or [ice] freeze[;]|do 1 damage of that element,2,var randstatus = rand([SHOCK|FIRE|ICE]); inflict(randstatus|1); sfx(~_~ + randstatus.toLowerCase()|~~|0.2); attack(1 | randstatus);,,COUNTDOWN,12,YELLOW,,,,,,,,finale,,,,,,,,,,,,
Astonish,Inflict [vanish]vanish|and [weaken]2 weaken,2,inflict(~vanish~); inflict(WEAKEN | 2); sfx(~_vanish~);,,COUNTDOWN,12,PURPLE,threequartercountdown,noeffect,,_curse,,,,finale,,,,,,,,,,,,
Jinxploit,Do [sword]2 and heal|[heal]1 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 2); pierceattackself(-jinxcount); givedice(d); sfxdamage(target|jinxcount * 2); },,RANGE25,,PINK,change_power,change_power,,,,,,finale,,,,,,,,,,,,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ givedice(d); sfxdamage(target|jinxcount * 2); }
Jinxploit_upgraded,Do [sword]3 and heal|[heal]1 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 3); pierceattackself(-jinxcount); givedice(d); sfxdamage(target|jinxcount * 2); },,RANGE25,,PINK,,,,,,,,finale,,,,,,,,,,,,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ givedice(d); sfxdamage(target|jinxcount * 2); }
Jinxploit_downgraded,Do [sword]1 and heal|[heal]1 for each [jinx]jinx[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount); pierceattackself(-jinxcount); givedice(d); sfxdamage(target|jinxcount * 2); },,RANGE25,,PINK,,,,,,,,finale,,,,,,,,,,,,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ givedice(d); sfxdamage(target|jinxcount * 2); }
Thievery,Phantom Theft|Borrow an upgraded item,2,//$var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~)){ enemyequipment.push(eq);}} if(enemyequipment.length > 0){var randomequipment = rand(enemyequipment); replacemewith(randomequipment.name + ~+~); }$,,,,GREEN,,,,,,,,excludefromrandomlists|cannotsteal|powercard|finale,,,,,,,,,,,,
Final Guard,Block all damage for a turn[;]|become exhausted,2,inflictself(~blockall~); self.extradice--;,,COUNTDOWN,8,ORANGE,threequartercountdown,noeffect,,,,YES,,finale,,,,,,,,,,,,
Repeater,Do [sword]<d6> damage[;] repeat|for each countdown reduce|([fury]<evar:repeaterfury> total),2,attack(d); sfx(~_metals~); if (!simulation) {if (e.getvar(~repeaterfury~) > 0) {e.show = true; e.y = 720; e.doequipmentaction(self[;] target[;] (self.isplayer ? e.castdirection : (e.castdirection == 1 ? 0 : 1))[;] e.assigneddice); e.setvar(~repeaterfury~[;] e.getvar(~repeaterfury~) - 1);}},,MAX2,,RED,increaserange,decreaserange,,_damage,,,,,,e.setvar(~repeaterfury~[;] 0);,e.setvar(~repeaterfury~[;] 0);,e.setvar(~repeaterfury~[;] 0);,,,e.setvar(~repeaterfury~[;] e.getvar(~repeaterfury~) + 1);,,,,e.preventdefault = true; e.maintainfury = true;,
Void Cannon,Do [sword]8 damage for each|dice you are missing|Regain missing dice,2,var dmg = 0; if (self.extradice < 0) {dmg = 8 * -self.extradice; self.extradice = 0;} attack(dmg);,,EVEN,,PURPLE,change_power,complicate,,_damage,,,,,,,,,,,,,,,,
Void Cannon_upgraded,Do [sword]10 damage for each|dice you are missing|Regain missing dice,2,var dmg = 0; if (self.extradice < 0) {dmg = 10 * -self.extradice; self.extradice = 0;} attack(dmg);,,EVEN,,PURPLE,,,,_damage,,,,,,,,,,,,,,,,
Antimatter,-1 dice to self|this battle,2,if (simulation) {bonus(-1000);} else {self.extradice--; if ((self.dice + self.extradice) < 0) self.extradice = 1 - self.dice;},,ODD,,PURPLE,simplify,complicate,,_curse,,YES,,,,,,,,,,,,,,
Thruster,Reduce countdowns by 5,2,boostcountdowns(5);,,COUNTDOWN,3,RED,change_power,change_power,,useitem,,YES,,,,,,,,,,,,,,
Thruster_upgraded,Reduce countdowns by 6,2,boostcountdowns(6);,,COUNTDOWN,3,RED,,,,useitem,,YES,,,,,,,,,,,,,,
Thruster_downgraded,Reduce countdowns by 3,2,boostcountdowns(3);,,COUNTDOWN,3,RED,,,,useitem,,YES,,,,,,,,,,,,,,
Energy Drink,Boost Limit Break|by 75%,2,self.limitvalue += self.limitmax * 0.75; if (self.limitvalue > self.limitmax) self.limitvalue = self.limitmax;,,COUNTDOWN,12,YELLOW,threequartercountdown,change_power,,_cure,,YES,,,,,,,,,,,,,,
Energy Drink_downgraded,Boost Limit Break|by 50%,2,self.limitvalue += self.limitmax * 0.5; if (self.limitvalue > self.limitmax) self.limitvalue = self.limitmax;,,COUNTDOWN,12,YELLOW,,,,_cure,,YES,,,,,,,,,,,,,,
Accumulator,Do [sword]<d6> damage[;] triple|if limit is ready,2,var dmg = d; if (self.limitready()) dmg *= 3; attack(dmg);,,MAX3,,YELLOW,increaserange,decreaserange,,_damage,,,,,,,,,,,,,,,,
Armor Shard,Gain [thorns]<d6> thorns,2,inflictself(THORNS[;] d);,,MAX4,,GREEN,increaserange,complicate,,_thorns,,YES,,,,,,,,,,,,,,
Magnet,Do [sword]<d6> damage[;] return the|dice if 1 left this fight,2,attack(d); if ((self.dice + self.extradice) == 1) givedice(d);,,MAX5,,PURPLE,simplify,complicate,,_damage,,,,,,,,,,,,,,,,
Duplicake,Duplicate a dice|Recover [heal]2 health,2,givedice([d[;] d]); attackself(-2);,,MIN5,,GREEN,increaserange,decreaserange,,_heal,,YES,,,,,,,,,,,,,,
Lights Out,-1 dice to both|(1 minimum),2,if (!simulation) {if ((self.dice + self.extradice) > 1) self.extradice--; if ((target.dice + target.extradice) > 1) target.extradice--;} else bonus(500);,,DOUBLES|DOUBLES,,PURPLE,change_requirements,change_power,,_blind,,YES,,,,,,,,,,,,,,
Lights Out_upgraded,-1 dice to both|(1 minimum),2,if (!simulation) {if ((self.dice + self.extradice) > 1) self.extradice--; if ((target.dice + target.extradice) > 1) target.extradice--;} else bonus(500);,,COUNTDOWN,10,PURPLE,,,,_blind,,YES,,,,,,,,,,,,,,
Lights Out_downgraded,-1 dice to both|(1 minimum),2,if (!simulation) {if ((self.dice + self.extradice) > 1) self.extradice--; if ((target.dice + target.extradice) > 1) target.extradice--;} else bonus(500);,,REQUIRE6|REQUIRE6,,PURPLE,,,,_blind,,YES,,,,,,,,,,,,,,
Reload,Reduce countdowns by 3|[gray](Reuseable),2,boostcountdowns(3);,,NORMAL,,GREEN,change_power,complicate,,useitem,2,YES,,,,,,,,,,,,,,
Reload_upgraded,Reduce countdowns by 3|[gray](Reuseable),2,boostcountdowns(3);,,NORMAL,,GREEN,,,,useitem,3,YES,,,,,,,,,,,,,,
Special Attack,Do [sword]12 damage|if limit is ready,2,if (self.limitready()) {attack(12); sfxdamage(target[;] 12);} else {target.textparticle(~No effect!~); sfx(~_dodge~);},,COUNTDOWN,7,YELLOW,halfcountdown,change_power,,,,,,,,,,,,,,,,,,
Special Attack_downgraded,Do [sword]6 damage|if limit is ready,2,if (self.limitready()) {attack(6); sfxdamage(target[;] 6);} else {target.textparticle(~No effect!~); sfx(~_dodge~);},,COUNTDOWN,7,YELLOW,,,,,,,,,,,,,,,,,,,,
Spiky Armor,Block [shield]<d6> damage|Gain [thorns]1 thorns,2,inflictself(SHIELD[;] d); inflictself(THORNS[;] 1);,,MAX3,,ORANGE,change_power,change_power,,_shield,,YES,,,,,,,,,,,,,,
Spiky Armor_upgraded,Block [shield]<d6> damage|Gain [thorns]2 thorns,2,inflictself(SHIELD[;] d); inflictself(THORNS[;] 2);,,MAX3,,ORANGE,,,,_shield,,YES,,,,,,,,,,,,,,
Spiky Armor_downgraded,Block [shield]<d6> damage,2,inflictself(SHIELD[;] d);,,MAX3,,ORANGE,,,,_shield,,YES,,,,,,,,,,,,,,
Judgenudge,Dice value -1|[curse]Curse on 1,2,if (d > 1) givedice(d - 1); if (d == 1) {inflict(CURSE); bonus(500); sfx(~_curse~[;] ~~[;] 0.2);},,NORMAL,,PURPLE,change_power,change_power,,,,,,,,,,,,,,,,,,
Judgenudge_upgraded,Dice value -1|[curse]Curse on 6,2,if (d > 1) givedice(d - 1); if (d == 6) {inflict(CURSE); bonus(500); sfx(~_curse~[;] ~~[;] 0.2);},,NORMAL,,PURPLE,,,,,,,,,,,,,,,,,,,,
Judgenudge_downgraded,Dice value -1,2,if (d > 1) givedice(d - 1);,,NORMAL,,PURPLE,,,,,,,,,,,,,,,,,,,,
Stunula,Flip a dice upside down|[shock]Shocks the enemy on 6,2,givedice(7 - d); if (d == 6) {inflict(SHOCK); sfx(~_shock~);},,NORMAL,,YELLOW,change_power,change_power,,,,YES,,,,,,,,,,,,,,
Stunula_upgraded,Flip a dice upside down|[shock]Shocks the enemy on 1,2,givedice(7 - d); if (d == 1) {inflict(SHOCK); sfx(~_shock~);},,NORMAL,,YELLOW,,,,,,YES,,,,,,,,,,,,,,
Stunula_downgraded,Flip a dice upside down,2,givedice(7 - d);,,NORMAL,,YELLOW,,,,,,YES,,,,,,,,,,,,,,
Bumpspade,Dice value +1|[weaken]Weaken on 1,2,givedice(d + 1); if (d == 1) {inflict(WEAKEN); sfx(~_weaken~[;] ~~[;] 0.2);},,NORMAL,,ORANGE,change_power,change_power,,,,,,,,,,,,,,,,,,
Bumpspade_upgraded,Dice value +1|[weaken]Weaken on 6,2,givedice(d + 1); if (d == 6) {inflict(WEAKEN); sfx(~_weaken~[;] ~~[;] 0.2);},,NORMAL,,ORANGE,,,,,,,,,,,,,,,,,,,,
Bumpspade_downgraded,Dice value +1,2,givedice(d + 1);,,NORMAL,,ORANGE,,,,,,YES,,,,,,,,,,,,,,
Rigged Roll,Set all dice to|[quote]something other than <d6>[quote],2,if (simulation) bonus(10); else {var values = [1[;] 2[;] 3[;] 4[;] 5[;] 6]; values.remove(d); var value = rand(values); var c = 0; for (mydice in self.dicepool) if (mydice.available()) {mydice.animatereroll(value[;] self.screenposition()[;] c * 0.05); c++;}},,ODD,,GREEN,simplify,change_power,,diceroll,,YES,,,,,,,,,,,,,,
Rigged Roll_downgraded,Set all dice to|[quote]something other than <slotdoubles>[quote],2,if (simulation) bonus(10); else {var values = [1[;] 2[;] 3[;] 4[;] 5[;] 6]; values.remove(d); var value = rand(values); var c = 0; for (mydice in self.dicepool) if (mydice.available()) {mydice.animatereroll(value[;] self.screenposition()[;] c * 0.05); c++;}},,DOUBLES|DOUBLES,,GREEN,,,,diceroll,,YES,,,,,,,,,,,,,,
Hot Couple,Roll two <d6>s[;] one of|them catches on [fire]fire,2,inflictself(FIRE); givedice([d[;] d]);,,MIN4,,RED,simplify,complicate,,,,YES,,,,,,,,,,,,,,
Lightsaber,Do [sword]<d6> damage|Lock on 6,2,attack(d); if (d >= 6) inflict(LOCK); sfx(~_lock~[;] ~~[;] 0.2);,,NORMAL,,PURPLE,change_power,change_power,,_damage,,,,,,,,,,,,,,,,
Lightsaber_upgraded,Do [sword]<d6> damage|Lock on even,2,attack(d); if ((d % 2) == 0) inflict(LOCK); sfx(~_lock~[;] ~~[;] 0.2);,,NORMAL,,PURPLE,,,,_damage,,,,,,,,,,,,,,,,
Shield of Cthulhu,Block [shield]<d6> damage|Do [sword]<double> damage,2,inflictself(SHIELD[;] d); attack(d * 2); sfxdamage(target[;] d * 2);,,MAX3,,ORANGE,change_power,decreaserange,,_shield,,,,,,,,,,,,,,,,
Shield of Cthulhu_upgraded,Block [shield]<d6> damage|Do [sword]6 damage,2,inflictself(SHIELD[;] d); attack(6); sfxdamage(target[;] 6);,,MAX3,,ORANGE,,,,_shield,,,,,,,,,,,,,,,,
Rewind,Activate all equipment that|was used this turn,2,if (!simulation) {var width = []; for (i in 0...(3840 - 792)) width.push(i); var c = 0; for (eq in self.equipment) if (eq.skillcard == ~~ && eq.name != e.name && !eq.ready) {eq.x = rand(width); eq.y = (self.isplayer ? (e.castdirection == 1 ? -e.height : 2160) : (e.castdirection == 1 ? 2160 : -e.height)); eq.show = true; eq.doequipmentaction(self[;] target[;] (self.isplayer ? 1 : -1)[;] eq.assigneddice[;] 0.3 * c); c++;}} else {bonus(100);},,COUNTDOWN,15,ORANGE,halfcountdown,noeffect,,,,YES,,finale,,,,,,,,,,,,
Magician's Secret,On the next turn|roll an extra dice,2,inflictself(~stash~ + rand([1[;] 2[;] 3[;] 4[;] 5[;] 6])); inflictself(~illuminate~);,,ODD,,PINK,change_power,change_power,,_thinghappens,,YES,,,,,,,,,,,,,,
Magician's Secret_upgraded,Roll an extra dice[;]|return this dice,2,givedice(); givedice(d);,,ODD,,PINK,,,,,,YES,,,,,,,,,,,,,,
Magician's Secret_downgraded,Reroll a dice,2,givedice();,,ODD,,PINK,,,,,,YES,,,,,,,,,,,,,,
Shattered Mirror,Each turn[;] roll an extra|<d6> and take [sword]1 damage,2,var _d = d; if (_d < 1) _d = 1; if (_d > 6) _d = 6; inflictself(~mqshadow~ + _d);,,NORMAL,,PURPLE,change_power,change_power,,_blind,,YES,,,,,,,,,,,,,,
Shattered Mirror_upgraded,[]+1 dice this fight,2,self.extradice++;,,REQUIRE6,,PURPLE,,,,magic_gaindice,,YES,,,,,,,,,,,,,,
Shattered Mirror_downgraded,Each turn[;] roll an extra|<d6> and take [sword]1 damage,2,var _d = d; if (_d < 1) _d = 1; if (_d > 6) _d = 6; inflictself(~mqshadow~ + _d);,,MAX3,,PURPLE,,,,_blind,,YES,,,,,,,,,,,,,,
Ladder,Flip the dice[;] then +1 |value to the result,2,var ladder = 7-d; givedice((ladder + 1)); var sfx = rand([1[;]2[;]3[;]4]); sfx(~diceroll~ + sfx);,,MAX3,,ORANGE,change_power,change_power,,,,YES,,,,,,,,,,,,,,
Ladder_upgraded,Flip the dice[;] then +1 |value to the result|,2,var ladder = 7-d; givedice((ladder + 1)); var sfx = rand([1[;]2[;]3[;]4]); sfx(~diceroll~ + sfx);,,MAX3,,ORANGE,,,,,2,YES,,,,,,,,,,,,,,
Chute,Flip the dice[;] but give|two copies of the result,2,var chute = 7-d; givedice(chute); givedice(chute); var sfx = rand([1[;]2[;]3[;]4]); sfx(~diceroll~ + sfx);,,MIN4,,GREEN,change_power,change_power,,,,YES,,,,,,,,,,,,,,
Chute_upgraded,Flip the dice[;] but give|two copies of the result|,2,var chute = 7-d; givedice(chute); givedice(chute); var sfx = rand([1[;]2[;]3[;]4]); sfx(~diceroll~ + sfx);,,MIN4,,GREEN,,,,,2,YES,,,,,,,,,,,,,,
Chute_downgraded,Flip the dice[;] but give|two copies of the result,2,var chute = 7-d; givedice(chute); givedice(chute); var sfx = rand([1[;]2[;]3[;]4]); sfx(~diceroll~ + sfx);,,REQUIRE6,,GREEN,,,,,,YES,,,,,,,,,,,,,,
Ladder_downgraded,Flip the dice[;] then +1 |value to the result,2,var ladder = 7-d; givedice((ladder + 1)); var sfx = rand([1[;]2[;]3[;]4]); sfx(~diceroll~ + sfx);,,RANGE23,,ORANGE,,,,,,YES,,,,,,,,,,,,,,
Rusty Cauldron,Do [dice]1 damage[;] -1 |dice value[;] [dice] = 5[;] roll a 1,2,attack(1); givedice(d - 1); if(d == 5) { givedice(1); bonus(500); },,MIN2,,GRAY,change_power,decreaserange,,,,,,,,,,,,,,,,,,
Rusty Cauldron@breaking_upgraded,Do [shield]1 damage[;] Split dice|[gray](2 uses left),2,pierceattack(1); givedice(split(d)[;] ~splitdice~); giveequipment(~Rusty Cauldron@broken+~[;] true[;] false[;] e);,,NORMAL,,GRAY,,,,,,,,,,,,,,,,,,,,
Rusty Cauldron@broken_upgraded,Do [shield]1 damage[;] Split dice|[gray](1 use left),2,pierceattack(1); givedice(split(d)[;] ~splitdice~);,,NORMAL,,GRAY,,,,,,,,,,,,,,,,,,,,
Rusty Cauldron_upgraded,Do [dice]1 damage[;] split|dice[;] [dice] = 5[;] roll a 1,2,attack(1); givedice(split(d)[;] ~splitdice~); if(d == 5) { givedice(1); },,NORMAL,,GRAY,,,,,,,,,,,,,,,,,,,,
Rusty Cauldron_downgraded,Do [sword]1 damage|,2,attack(1);,,MIN2,,GRAY,,,,,-1,,,,,,,,,,,,,,,
Rusty Cauldron@breaking_downgraded,Do [shield]1 damage|,2,pierceattack(1);,,MIN2,,GRAY,,,,,-1,,,,,,,,,,,,,,,
Rusty Cauldron@broken_downgraded,Do [shield]1 damage|,2,pierceattack(1);,,MIN2,,GRAY,,,,,-1,,,,,,,,,,,,,,,
Shiny Cauldron,Do [confuse]1 damage.|Double dice value.,2,attack(1[;] CONFUSE); givedice(d * 2[;] ~combinedice~);,,MAX5,,YELLOW,simplify,decreaserange,,,,,,,,,,,,,,,,,,
H4mm3r,On 8[;] inflict [shock]Shock.|Deal [shock]<d6> damage.,2,if(d == 8) { inflict(SHOCK); attack(d[;] SHOCK); sfx(target[;] d); sfx(~_shock~); bonus(500); } else if(getstatus(SHOCK) >= 1) { attack(d[;] SHOCK); sfx(target[;] d); } else { attack((d / 2)[;] SHOCK); sfx(target[;] d/2); },,MAX5|MAX5,,YELLOW,simplify,change_power,,,,,,,,,,,,,,,,,,
H4mm3r_upgraded,On 8[;] inflict [shock]Shock.|Deal [shock]<d6> damage.,2,if(d == 8) { inflict(SHOCK); attack(d[;] SHOCK); sfx(target[;] d); sfx(~_shock~); bonus(500); } else if(getstatus(SHOCK) >= 1) { attack(d[;] SHOCK); sfx(target[;] d); } else { attack((d / 2)[;] SHOCK); sfx(target[;] d/2); },,NORMAL|NORMAL,,YELLOW,,,,,,,,,,,,,,,,,,,,
Stew,Do [sword]1 damage[;]|get a new dice,2,attack(1); givedice();,,COUNTDOWN,3,PURPLE,change_power,change_power,,_damage,,,,,,,,,,,,,,,,
Stew_upgraded,Do [sword]2 damage[;]|get a new dice,2,attack(2); givedice();,,COUNTDOWN,3,PURPLE,,,,_damage,,,,,,,,,,,,,,,,
Stew_downgraded,Do [sword]1 damage,2,attack(1);,,COUNTDOWN,3,PURPLE,,,,_damage,,,,,,,,,,,,,,,,
Laser,Do [sword]4 damage,2,attack(4); sfx(~_plasma~);,,COUNTDOWN,4,RED,change_power,change_power,,_damage,,,,,,,,,,,,,,,,
Laser_upgraded,Do [sword]5 damage,2,attack(5); sfx(~_plasma~);,,COUNTDOWN,4,RED,,,,_damage,,,,,,,,,,,,,,,,
Laser_downgraded,Do [sword]2 damage,2,attack(2); sfx(~_plasma~);,,COUNTDOWN,4,RED,,,,_damage,,,,,,,,,,,,,,,,
Feather Arrow,Inflict [weaken][;]then do 1 Dmg|<d6> amount of times,2,inflict(WEAKEN); for (i in 0...d) {attack(1);}; sfx(~_weaken~);,,REQUIRE1|FREE1,,ORANGE,change_power,change_power,,,,,,,,,,,,,,,,,,
Feather Arrow_upgraded,Inflict [weaken][;]then do 1 Dmg|<d6> amount of times,2, inflict(WEAKEN); for (i in 0...d) {attack(1);}; sfx(~_weaken~);,,MAX2|FREE1,,ORANGE,,,,,,,,,,,,,,,,,,,,
Feather Arrow_downgraded,Inflict [weaken][;]then do 1 Dmg|<d6> amount of times,2,inflict(WEAKEN); for (i in 0...d) {attack(1);}; sfx(~_weaken~);,,REQUIRE1,,ORANGE,,,,,,,,,,,,,,,,,,,,
Rainbow Crystal,[red]Cast [orange]a [yellow]lot [green]of [blue]statuses [purple]to|[gray]you [red]and [orange]the [yellow]foe[green][;] <d6> [blue]dmg.|[gray](You receive good statuses),2,sfx(~_vanish~); sfx(~_magic~); inflict(rand([FIRE|SHOCK|ICE|WEAKEN|POISON|BLIND|CONFUSE|LOCK|SILENCE|CURSE])); inflictself(rand([SHIELD|REDUCE|THORNS|REEQUIPNEXT|SURVIVE|FURY|DODGE|PIERCE])); attack(d);,,MAX4,,PINK,change_power,change_power,,,,,,,,,,,,,,,,,,
Rainbow Crystal_downgraded,[red]Cast [orange]a [yellow]lot [green]of [blue]statuses [purple]to|[gray]you [red]and [orange]the [yellow]foe[green][;] <d6> [blue]dmg,2,sfx(~_vanish~) ;sfx(~_magic~); inflict(rand([FIRE|SHOCK|ICE|WEAKEN|POISON|BLIND|CONFUSE|LOCK|SILENCE|CURSE])); inflictself(rand([FIRE|SHOCK|ICE|WEAKEN|POISON|BLIND|CONFUSE|LOCK|SILENCE|CURSE])); attack(d);,,MAX4,,PINK,,,,,,,,,,,,,,,,,,,,
Rainbow Crystal_upgraded,[red]Cast [orange]a [yellow]lot [green]of [blue]statuses [purple]to|[gray]you [red]and [orange]the [yellow]foe[green][;] <d6> [blue]dmg.|[gray](start of turn: [red]?[yellow]?[blue]? [gray]status),2,sfx(~_vanish~); sfx(~_magic~); inflict(rand([FIRE|SHOCK|ICE|WEAKEN|POISON|BLIND|CONFUSE|LOCK|SILENCE|CURSE])); inflictself(rand([SHIELD|REDUCE|THORNS|REEQUIPNEXT|SURVIVE|FURY|DODGE|PIERCE])); attack(d);,,MAX4,,PINK,,,,,,,,,,,,,,,,,,,,
Creep,In [jinx]2 turns[;] deal [sword]4 dmg|and add a status,2,jinx(~Creep~|~[sword]4 damage[;] gain a status~|~[sword]4 damage[;] gain a status~|~inflict(rand([CURSE| LOCK| FIRE| ICE| WEAKEN| SHOCK| POISON])); sfx(\~_curse\~|\~\~|0.2); attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|2|4); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,change_power,change_power,2,,,,,,,,,,,,,,,,,
Creep_downgraded,In [jinx]4 turns[;] deal [sword]4 dmg|and add a status,2,jinx(~Creep-~|~[sword]4 damage[;] gain a status~|~[sword]4 damage[;] gain a status~|~inflict(rand([CURSE| LOCK| FIRE| ICE| WEAKEN| SHOCK| POISON])); sfx(\~_curse\~|\~\~|0.2); attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|4|4); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,,,2,,,,,,,,,,,,,,,,,
Creep_upgraded,In [jinx]2 turns[;] deal [sword]6 dmg|and add a status,2,jinx(~Creep+~|~[sword]6 damage[;] gain a status~|~[sword]6 damage[;] gain a status~|~inflict(rand([CURSE| LOCK| FIRE| ICE| WEAKEN| SHOCK| POISON])); sfx(\~_curse\~|\~\~|0.2); attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|2|6); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,,,2,,,,,,,,,,,,,,,,,
Dense Fog,Do [sword]2[;] blind [blind]1 die|gain a dice|[gray](once per battle),2,attack(2); givedice(rand([1|2|3|4|5|6])); inflict(BLIND); sfx(~_blind~); sfxdamage(null|3);,,COUNTDOWN,5,GRAY,change_power,change_power,,,,,YES,,,,,,,,,,,,,
Dense Fog_upgraded,Do [sword]4[;] blind [blind]1 die|gain a dice|[gray](once per battle),2,attack(4); givedice(rand([1|2|3|4|5|6])); inflict(BLIND); sfx(~_blind~); sfxdamage(null|4);,,COUNTDOWN,5,GRAY,,,,,,,YES,,,,,,,,,,,,,
Dense Fog_downgraded,Do [sword]2[;] blind [blind]1 dice|[gray](once per battle),2,attack(2); inflict(BLIND); sfx(~_blind~); sfxdamage(null|3); removeequipment(e);,,COUNTDOWN,5,GRAY,,,,,,,YES,,,,,,,,,,,,,
Forecast,Gain a low [dice][;] In [jinx]2 turns|Inflict [curse]1 Curse and [sword]3|[gray](once per battle),2, givedice(rand([1|2|3])); jinx(~Forecast~|~[sword]3 damage[;] gain [curse]curse~|~[sword]3 damage[;] gain [curse]curse~|~inflict(CURSE); sfx(\~_curse\~|\~\~|0.2); attack(3); sfxdamage(null|3);~|target|self|2|3); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,change_power,change_power,,,,,YES,,,,,,,,,,,,,
Forecast_upgraded,Gain a low [dice][;] In [jinx]2 turns|Inflict [curse]1 Curse and [sword]5|[gray](once per battle),2, givedice(rand([1|2|3|4|5|6])); jinx(~Forecast~|~[sword]5 damage[;] gain [curse]curse~|~[sword]5 damage[;] gain [curse]curse~|~inflict(CURSE); sfx(\~_curse\~|\~\~|0.2); attack(5); sfxdamage(null|5);~|target|self|2|5); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,,,,,,,YES,,,,,,,,,,,,,
Forecast_downgraded,In [jinx]2 turns[;] do [sword] 3|[gray](once per battle),2, jinx(~Forecast~|~[sword]3 damage~|~[sword]3 damage~|~sfx(\~_curse\~|\~\~|0.2); attack(3); sfxdamage(null|3);~|target|self|2|3); sfx(~_thinghappens~); removeequipment(e);,,COUNTDOWN,5,PINK,,,,,,,YES,,,,,,,,,,,,,
Acid Rain,Do [poison]3 dmg[;] inflict [poison]1|gain a low dice|[gray](once per battle),2,attack(3|POISON); givedice(rand([1|2|3])); inflict(POISON); sfx(~_poison~); sfxdamage(null|3);,,COUNTDOWN,5,PURPLE,change_power,change_power,,,,,YES,,,,,,,,,,,,,
Acid Rain_upgraded,Do [poison]4 dmg[;] inflict [poison]1|gain a dice|[gray](once per battle),2,attack(5|POISON); givedice(rand([1|2|3|4|5|6])); inflict(POISON); sfx(~_poison~); sfxdamage(null|4);,,COUNTDOWN,5,PURPLE,,,,,,,YES,,,,,,,,,,,,,
Acid Rain_downgraded,Do [poison]3 dmg|[gray](once per battle),2,attack(3|POISON); sfx(~_poison~); sfxdamage(null|3); removeequipment(e);,,COUNTDOWN,5,PURPLE,,,,,,,YES,,,,,,,,,,,,,
Sandstorm,Do [weaken]3 dmg[;] inflict [weaken]1|gain a low dice|[gray](once per battle),2,attack(3|WEAKEN); givedice(rand([1|2|3])); inflict(WEAKEN); sfx(~_weaken~); sfxdamage(null|3);,,COUNTDOWN,5,ORANGE,change_power,change_power,,,,,YES,,,,,,,,,,,,,
Sandstorm_upgraded,Do [weaken]4 dmg[;] inflict [weaken]1|gain a dice|[gray](once per battle),2,attack(5|WEAKEN); givedice(rand([1|2|3|4|5|6])); inflict(WEAKEN); sfx(~_weaken~); sfxdamage(null|4);,,COUNTDOWN,5,ORANGE,,,,,,,YES,,,,,,,,,,,,,
Sandstorm_downgraded,Do [weaken]3 dmg|[gray](once per battle),2,attack(3|WEAKEN); sfx(~_weaken~); sfxdamage(null|3); removeequipment(e);,,COUNTDOWN,5,ORANGE,,,,,,,YES,,,,,,,,,,,,,
Pollution,Take [sword]2 dmg[;] but inflict [vanish][;]|[curse][;][blind] and [poison][;] gain a low dice|[gray](once per battle),2,attackself(2|POISON); givedice(rand([1|2|3])); if(getstatus(~ncr_vanishall~) < 1 && getstatus(VANISH) < 1 && getstatus(~ncr_vanishlegacy~) < 1) { inflict(~ncr_vanish~); inflict(~ncr_internalvanish~); var dovanish = new elements.Skill(~Vanishthing~); dovanish.execute(self|target); } else { self.textparticle(~No effect!~); }; inflict(CURSE); inflict(BLIND); inflict(POISON); sfx(~_vanish~); sfx(~_curse~); sfx(~_blind~); sfx(~_poison~);,,COUNTDOWN,5,BLACK,change_power,change_power,,,,,YES,,,,,,,,,,,,,
Pollution_upgraded,Heal for [sword]1[;] inflict [vanish][;]|[curse][;][blind] and [poison][;] gain a dice|[gray](once per battle),2,attackself(-3); givedice(rand([1|2|3|4|5|6])); if(getstatus(~ncr_vanishall~) < 1 && getstatus(VANISH) < 1 && getstatus(~ncr_vanishlegacy~) < 1) { inflict(~ncr_vanish~); inflict(~ncr_internalvanish~); var dovanish = new elements.Skill(~Vanishthing~); dovanish.execute(self|target); } else { self.textparticle(~No effect!~); }; inflict(CURSE); inflict(BLIND); inflict(POISON); sfx(~_vanish~); sfx(~_curse~); sfx(~_blind~); sfx(~_poison~); sfx(~_heal~);,,COUNTDOWN,5,BLACK,,,,,,,YES,,,,,,,,,,,,,
Pollution_downgraded,Take [sword]3 dmg[;]|and inflict [vanish][;][curse][;][blind] and [poison]|[gray](once per battle),2,attackself(4|POISON); if(getstatus(~ncr_vanishall~) < 1 && getstatus(VANISH) < 1 && getstatus(~ncr_vanishlegacy~) < 1) { inflict(~ncr_vanish~); inflict(~ncr_internalvanish~); var dovanish = new elements.Skill(~Vanishthing~); dovanish.execute(self|target); } else { self.textparticle(~No effect!~); }; inflict(CURSE); inflict(BLIND); inflict(POISON); sfx(~_vanish~); sfx(~_curse~); sfx(~_blind~); sfx(~_poison~); removeequipment(e);,,COUNTDOWN,5,BLACK,,,,,,,YES,,,,,,,,,,,,,
Gemini Geometry,If Odd[;] duplicate dice.|If Even[;] dice value x2.,2,if(d%2 == 0){ givedice(d*2); } else { givedice([d|d]);}; sfx(~useitem~);,,MAX5,,GREEN,change_power,change_power,,,,YES,,,,,,,,,,,,,,
Gemini Geometry_downgraded,If Odd[;] dice decreases by 1.|If Even[;] reroll dice.,2,if(d%2 == 0){ givedice(); } else { givedice(d-1);}; sfx(~useitem~);,,MIN5,,GREEN,,,,,,YES,,,,,,,,,,,,,,
Gemini Geometry_upgraded,2 or 3: Square the dice|4 or 5: Dice (<d6>x2) + 1,2,if(d == 2){ givedice(4); } if(d == 3){ givedice(6); givedice(3); } if(d == 4){givedice(9);} if(d == 5){givedice(11);} sfx(~useitem~);,,RANGE25,,GREEN,,,,,,YES,,,,,,,,,,,,,,
Rewind Tape,Gain an [confuse]Extra [yellow]Turn|[gray](Once per battle),2,inflictself(~extraturn~); sfx(~_dodge~); sfx(~_thinghappens~); ,,COUNTDOWN,30,ORANGE,change_power,change_power,,,,YES,YES,,,,,,,,,,,,,
Rewind Tape_upgraded,Gain an [confuse]Extra [yellow]Turn|[gray](Once per battle),2,inflictself(~extraturn~); sfx(~_dodge~); sfx(~thinghappens~);,,COUNTDOWN,20,ORANGE,,,,,,YES,YES,,,,,,,,,,,,,
Rewind Tape_downgraded,Do Nothing,2,sfx(~_dodge~); sfx(~thinghappens~);,,COUNTDOWN,1,ORANGE,,,,,,YES,YES,,,,,,,,,,,,,
Hammer@enemy,Do [shock]<d6> damage[;]|on 6[;] inflict [shock]1 shock,2,attack(d | SHOCK); if(d == 6) inflict(SHOCK); if(d < 6) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_shock~|~~|0.2); },,NORMAL,,YELLOW,reducesize,change_power,,,,,,excludefromrandomlists,,,,,,,,,,,,
Hammer@enemy_downgraded,Do [shock]<d6> damage,2,attack(d | SHOCK);,,NORMAL,,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Hammer@enemy_weakened,Do [shock]<d6> damage,2,attack(d | SHOCK);,,NORMAL,,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Hammer@enemy_deckupgrade,Do [shock]<d6> damage|[shock]Shocks the enemy,2,attack(d| SHOCK); inflict(SHOCK);,,NORMAL,,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Sh0vel,Do [weaken]<d6> damage[;]|on 6[;] inflict [weaken]1 weaken,2,attack(d | WEAKEN); if(d == 6) inflict(WEAKEN); if(d < 6) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_weaken~|~~|0.2); },,NORMAL,,ORANGE,change_power,change_power,weaken,,,,,excludefromrandomlists,,,,,,,,,,,,
Sh0vel_upgraded,Do [weaken]<d6> damage[;]|on even[;] inflict [weaken]1 weaken,2,attack(d | WEAKEN); if(d % 2 == 0) inflict(WEAKEN); if(d % 2 == 1) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_weaken~|~~|0.2); },,NORMAL,,ORANGE,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Sh0vel_downgraded,Do [weaken]<d6> damage,2,attack(d | WEAKEN);,,NORMAL,,ORANGE,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Cauldron@enemy,Do [sword]1 damage[;]|get a new dice,1,attack(1); givedice();,,NORMAL,,PURPLE,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,,,,,,givedice();
Cauldron@enemy_upgraded,Do [sword]1 damage[;] reroll dice|[gray](Reuseable),1,attack(1); givedice();,,NORMAL,,PURPLE,,,,,2,,,excludefromrandomlists,,,,,,,,,,,,givedice();
Cauldron@enemy_downgraded,Do [sword]1 damage,1,attack(1);,,NORMAL,,PURPLE,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Blood Suck@enemy,Drain [heart]<d6> health,2,drain(d);,,MAX4,,RED,simplify,decreaserange,,,,,,excludefromrandomlists,,,,,,,,,,,,
Lament@enemy,Do [sword]<d6> damage[;]|on 6[;] inflict [ice]1 freeze,2,attack(d); if(d == 6) { inflict(ICE| 1); sfx(~_ice~|~~|0.2); } sfxdamage(target|d);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,,,,,,
Lament@enemy_upgraded,Do [sword]<d6> damage[;]|on 6[;] inflict [ice]1 freeze,2,attack(d); if(d == 7) { inflict(ICE| 1); sfx(~_ice~|~~|0.2); } sfxdamage(target|d);,,NORMAL|FREE1,,BRIGHTCYAN,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Lament@enemy_downgraded,Do [sword]<d6> damage,2,attack(d);,,NORMAL,,BRIGHTCYAN,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Hall of Mirrors@enemy,[]+1 dice this fight,1,if(simulation) { bonus(1000); } else{ self.extradice++; },,REQUIRE6,,PURPLE,simplify,doublerequirements,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Crash,Do [ice]2 damage|+ [ice]1 damage per [ice]Freeze.,2,attack(getstatus(ICE) + 2| ICE); sfx(~_ice~);,,MAX4,,BRIGHTCYAN,change_power,change_power,,_ice,,,,,,,,,,,,,,,,
Crash_upgraded,Do [ice]2 damage|+ [ice]1 damage per [ice]Freeze.|Return the dice.,2,attack(getstatus(ICE) + 2| ICE); givedice(d); sfx(~_ice~);,,MAX4,,BRIGHTCYAN,,,,_ice,,,,,,,,,,,,,,,,
Crash_downgraded,Do [ice]2 damage|+ [ice]1 damage per [ice]Freeze.,2,attack(getstatus(ICE) + 2| ICE); sfx(~_ice~);,,MAX2,,BRIGHTCYAN,,,,_ice,,,,,,,,,,,,,,,,
Boo,Do [sword]2 damage[;]|inflict [haunted]Haunt,2,attack(2); inflict(~haunted~); sfx(~_damage~);,,NORMAL,,PINK,change_power,change_power,,,,,,,,,,,,,,,,,,
Boo_upgraded,Do [sword]3 damage[;]|inflict [haunted]Haunt,2,attack(3); inflict(~haunted~); sfx(~_damage~);,,NORMAL,,PINK,,,,,,,,,,,,,,,,,,,,
Boo_downgraded,Do [sword]1 damage[;]|inflict [haunted]Haunt,2,attack(1); inflict(~haunted~); sfx(~_damage~);,,NORMAL,,PINK,,,,,,,,,,,,,,,,,,,,
Trick,Do [sword]3 damage[;]|snap 3 at once to inflict|[recycle]Swap [green]Next [green]Target,2,attack(3); sfx(~_damage~);,,MAX4,,ORANGE,change_power,change_power,,,,,,,,,,,,,,,,if(snap >= 3) inflict(~reversenexttarget~);,,
Trick_upgraded,Do [sword]4 damage[;]|snap 3 at once to inflict|[recycle]Swap [green]Next [green]Target,2,attack(4); sfx(~_damage~);,,MAX4,,ORANGE,,,,,,,,,,,,,,,,,,if(snap >= 3) inflict(~reversenexttarget~);,,
Trick_downgraded,Do [sword]2 damage[;]|snap 3 at once to inflict|[recycle]Swap [green]Next [green]Target,2,attack(2); sfx(~_damage~);,,MAX4,,ORANGE,,,,,,,,,,,,,,,,,,if(snap >= 3) inflict(~reversenexttarget~);,,
Treat,Heal [heal]2. If above max hp[;]|gain [fury]Spooky [red]Fury[]|up to twice per turn.,2,if(self.maxhp - self.hp < 2 && e.getvar(~treat~) < 2) { e.setvar(~treat~ | e.getvar(~treat~) + 1); inflictself(~spookyfury~); } attackself(-2); sfx(~_heal~);,,NORMAL,,GREEN,change_power,change_power,,,,YES,,,,,,,e.setvar(~treat~ | 0);,,,,,if(getstatusself(~spookyfury~) > 2){ removestatusself(~spookyfury~ | getstatusself(~spookyfury~) - 2); },e.preventdefault = true; e.maintainfury = true;,
Treat_upgraded,Heal [heal]3. If above max hp[;]|gain [fury]Spooky [red]Fury[]|up to twice per turn.,2,if(self.maxhp - self.hp < 3 && e.getvar(~treat~) < 2) { e.setvar(~treat~ | e.getvar(~treat~) + 1); inflictself(~spookyfury~); } attackself(-3); sfx(~_heal~);,,NORMAL,,GREEN,,,,,,YES,,,,,,,e.setvar(~treat~ | 0);,,,,,if(getstatusself(~spookyfury~) > 2){ removestatusself(~spookyfury~ | getstatusself(~spookyfury~) - 2); },e.preventdefault = true; e.maintainfury = true;,
Treat_downgraded,Heal [heal]2. If above max hp[;]|gain [fury]Spooky [red]Fury[]|up to once per turn.,2,if(self.maxhp - self.hp < 2 && e.getvar(~treat~) < 1) { e.setvar(~treat~ | e.getvar(~treat~) + 2); inflictself(~spookyfury~); } attackself(-2); sfx(~_heal~);,,NORMAL,,GREEN,,,,,,YES,,,,,,,e.setvar(~treat~ | 0);,,,,,if(getstatusself(~spookyfury~) > 1){ removestatusself(~spookyfury~ | getstatusself(~spookyfury~) - 1); },e.preventdefault = true; e.maintainfury = true;,
2 Spooky 4 U,Worsen [haunted]Haunt on enemy|[gray](once per battle),2,inflict(~possess~);,,MAX2|MIN4|RANGE24,,PURPLE,change_power,change_power,,_curse,,,YES,finale,,,,,,,,,,,,
2 Spooky 4 U_upgraded,Worsen [haunted]Haunt on enemy|[gray](once per battle),2,inflict(~possess~);,,MAX2|MIN4,,PURPLE,,,,_curse,,,YES,finale,,,,,,,,,,,,
2 Spooky 4 U_downgraded,Worsen [haunted]Haunt on enemy|[gray](once per battle),2,inflict(~possess~);,,MAX2|RANGE24|RANGE24|MIN4,,PURPLE,,,,_curse,,,YES,finale,,,,,,,,,,,,
Spooky Deck,4 Boos[;] 3 Tricks|and 2 Treats|Finale Card: 2 Spooky 4 U,2,,,,,PURPLE,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~2 Spooky 4 U~);} addjestercard(~boo~); addjestercard(~boo~); addjestercard(~boo~); addjestercard(~boo~); addjestercard(~trick~); addjestercard(~trick~); addjestercard(~trick~); addjestercard(~treat~); addjestercard(~treat~);,,,,,,,,
Jack o' Lantern,Inflict [haunted]Haunt[;] [fire]Burn|and gain 2x<slotdoubles> next turn.|Hey[;] that rhymed!,2,inflict(~haunted~); inflict(FIRE); inflictself(~stash~ + d); inflictself(~stash~ + d); inflictself(~lantern~); sfx(~_curse~);,,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,_curse,,,,,,,,,,,,,,,,
Jack o' Lantern_upgraded,Inflict 2 [haunted]Haunt[;] 2 [fire]Burn|and gain 2x<slotdoubles> next turn.|Hey[;] that rhymed!,2,inflict(~haunted~ | 2); inflict(FIRE | 2); inflictself(~stash~ + d); inflictself(~stash~ + d); inflictself(~lantern~); sfx(~_curse~);,,DOUBLES|DOUBLES,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Jack o' Lantern_downgraded,Gain 2x<slotdoubles> next turn.|Nothing to rhyme with...,2,inflictself(~stash~ + d); inflictself(~stash~ + d); inflictself(~lantern~); sfx(~_curse~);,,DOUBLES|DOUBLES,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Boolin Key,Set two random dice|to <d6>[;] inflict [haunted]Haunt,2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); } if(dicelist.length > 1) { dicelist[1].animatereroll(d| self.screenposition()); } inflict(~haunted~); sfx(~_curse~);,,NORMAL,,PURPLE,change_power,change_power,,_curse,,YES,,,,,,,,,,,,,,
Boolin Key_upgraded,Set three random dice|to <d6>[;] inflict [haunted]Haunt 2,2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); } if(dicelist.length > 1) { dicelist[1].animatereroll(d| self.screenposition()); } if(dicelist.length > 2) { dicelist[2].animatereroll(d| self.screenposition()); } inflict(~haunted~ | 2); sfx(~_curse~);,,NORMAL,,PURPLE,,,,_curse,,YES,,,,,,,,,,,,,,
Boolin Key_downgraded,Set two random dice to <d6>,2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(d| self.screenposition()); } if(dicelist.length > 1) { dicelist[1].animatereroll(d| self.screenposition()); sfx(~_curse~);,,NORMAL,,PURPLE,,,,_curse,,YES,,,,,,,,,,,,,,
Sword...?,Deal [sword]<d6> damage...?,2,attack(d); sfx(~_damage~);,,NORMAL,,RED,add1,complicate,,,,,,,,,,,,,,,sfx(~_defect~);,,,
Six Shooter...?,Deal [sword]<d6> damage...?|,2,attack(d); sfx(~_damage~);,,REQUIRE6,,RED,add1,complicate,,,3,,,,,,,,,,,,sfx(~_defectgun~);,,,
Hitodama,Deal [sword]<d6> damage.|On 4[;] inflict [vanish]Vanish.,1,attack(d); if(d == 4) { inflict(~ncr_vanish~); } sfx(~_vanish~);,,MAX4,,PINK,change_power,change_power,,_vanish,,,,,,,,,,,,,,,,
Hitodama_downgraded,Deal [sword]<d6> damage.|On 2[;] inflict [vanish]Vanish.,1,attack(d); if(d == 2) { inflict(~ncr_vanish~); } sfx(~_vanish~);,,MAX2,,PINK,,,,_vanish,,,,,,,,,,,,,,,,
Hitodama_weakened,Deal [sword]<d6> damage.|On 2[;] inflict [vanish]Vanish.,1,attack(d); if(d == 4) { inflict(~ncr_vanish~); } sfx(~_vanish~);,,MAX2|FREE2,,PINK,,,,_vanish,,,,,,,,,,,,,,,,
Spectral Strike,Deal [sword]<d6> damage.|On 6[;] inflict [haunted]Haunted 2.,2,attack(d); if(d == 6) { inflict(~haunted~ | 2); } sfx(~_curse~);,,NORMAL,,PURPLE,change_power,complicate,,_curse,,,,,,,,,,,,,,,,
Spectral Strike_upgraded,Deal [sword]<d6> damage.|On 6[;] inflict [haunted]Haunted 2.,2,attack(d); if(d == 5) { inflict(~haunted~ | 2); } sfx(~_curse~);,,NORMAL|FREE1,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Banish,Deal [sword]<d6> damage.|On 6[;] inflict [vanish]Vanish.,2,attack(d); if(d == 6) { inflict(~ncr_vanish~); } sfx(~_vanish~);,,NORMAL,,PINK,change_power,complicate,,_vanish,,,,,,,,,,,,,,,,
Banish_upgraded,Deal [sword]<d6> damage.|On 6[;] inflict [vanish]Vanish.,2,attack(d); if(d == 5) { inflict(~ncr_vanish~); } sfx(~_vanish~);,,NORMAL|FREE1,,PINK,,,,_vanish,,,,,,,,,,,,,,,,
Soul Fade,Inflict [vanish]Vanish equal to|enemy [haunted]Haunt + [curse]Curse,2,inflict(~ncr_vanish~ | getstatus(~haunted~) + getstatus(~weirdhaunt~) + getstatus(CURSE)); sfx(~_vanish~);,,COUNTDOWN,8,PURPLE,change_power,noeffect,,_vanish,,,,,,,,,,,,,,,,
Soul Fade_upgraded,Inflict [curse]Curse equal to|enemy [haunted]Haunt + [vanish]Vanish,2,inflict(CURSE | getstatus(~haunted~) + getstatus(~weirdhaunt~) + getstatus(~ncr_vanish~)); sfx(~_curse~);,,COUNTDOWN,8,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Blurse,Inflict [curse]Curse but give|enemy extra <d6> this turn,2,inflict(CURSE); inflict(~stash~ + d); sfx(~_curse~);,,NORMAL,,WHITE,change_power,complicate,,_curse,,,,,,,,,,,,,,,,
Blurse_upgraded,Inflict [curse]Curse 2 but give|enemy extra <d6> this turn,2,inflict(CURSE | 2); inflict(~stash~ + d); sfx(~_curse~);,,NORMAL,,WHITE,,,,_curse,,,,,,,,,,,,,,,,
Exorcise,Enemy loses all [curse]Curse[;]|[vanish]Vanish and [haunted]Haunt[;] and|takes 2 damage for each,2,attack(2 * (getstatus(CURSE) + getstatus(~haunted~) + getstatus(~weirdhaunt~) + getstatus(~ncr_vanish~))); removestatus(CURSE | ALL); removestatus(~haunted~ | ALL); removestatus(~ncr_vanish~ | ALL); sfx(~_cure~);,,COUNTDOWN,12,WHITE,halfcountdown,change_power,,_cure,,,,,,,,,,,,,,,,
Exorcise_downgraded,Enemy loses all [curse]Curse[;]|[vanish]Vanish and [haunted]Haunt[;] and|takes 1 damage for each,2,attack(getstatus(CURSE) + getstatus(~haunted~) + getstatus(~weirdhaunt~) getstatus(~ncr_vanish~)); removestatus(CURSE | ALL); removestatus(~haunted~ | ALL); removestatus(~ncr_vanish~ | ALL); sfx(~_cure~);,,COUNTDOWN,12,WHITE,,,,_cure,,,,,,,,,,,,,,,,
Wispene Gas,Inflict [vanish]Vanish[;]|gain [fury]Spooky [red]Fury[]|and gain a <slotdoubles>,2,givedice(d); inflict(~ncr_vanish~); inflictself(~spookyfury~); sfx(~_vanish~);,,DOUBLES|DOUBLES,,RED,change_power,change_power,,_vanish,,,,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Wispene Gas_upgraded,Inflict [vanish]Vanish[;]|gain [fury]Spooky [red]Fury[]|and return both dice,2,givedice(d); givedice(d); inflict(~ncr_vanish~); inflictself(~spookyfury~); sfx(~_vanish~);,,DOUBLES|DOUBLES,,RED,,,,_vanish,,,,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Wispene Gas_downgraded,Inflict [vanish]Vanish|and gain [fury]Spooky [red]Fury,2,inflict(~ncr_vanish~); inflictself(~spookyfury~); sfx(~_vanish~);,,DOUBLES|DOUBLES,,RED,,,,_vanish,,,,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Pester,Deal [sword]3 damage|On [fury]Fury[;] inflict [haunted]Haunt|(maintains [fury]Fury[]),2,attack(3);,,COUNTDOWN,4,RED,change_power,change_power,,_damage,,,,,,,,,e.setvar(~fury~ | 0);,,,,,,if(getstatusself(~fury~) + getstatusself(~spookyfury~) > 0){ e.setvar(~fury~ | 1); } e.maintainfury = true; if(e.getvar(~fury~) == 1){ inflict(~haunted~); sfx(~_curse~); e.setvar(~fury~ | 0); },
Pester_upgraded,Deal [sword]4 damage|On [fury]Fury[;] inflict [haunted]Haunt|(maintains [fury]Fury[]),2,attack(4);,,COUNTDOWN,4,RED,,,,_damage,,,,,,,,,e.setvar(~fury~ | 0);,,,,,,if(getstatusself(~fury~) + getstatusself(~spookyfury~) > 0){ e.setvar(~fury~ | 1); } e.maintainfury = true; if(e.getvar(~fury~) == 1){ inflict(~haunted~); sfx(~_curse~); e.setvar(~fury~ | 0); },
Pester_downgraded,Deal [sword]2 damage|On [fury]Fury[;] inflict [haunted]Haunt|(maintains [fury]Fury[]),2,attack(2);,,COUNTDOWN,4,RED,,,,_damage,,,,,,,,,e.setvar(~fury~ | 0);,,,,,,if(getstatusself(~fury~) + getstatusself(~spookyfury~) > 0){ e.setvar(~fury~ | 1); } e.maintainfury = true; if(e.getvar(~fury~) == 1){ inflict(~haunted~); sfx(~_curse~); e.setvar(~fury~ | 0); },
Spook,Inflict [haunted]Haunt[;]|return both dice,2,inflict(~haunted~); givedice(d); givedice(d); sfx(~_curse~);,,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,_curse,,,,,,,,,,,,,,,,
Spook_upgraded,Inflict [haunted]Haunt[;]|return the die,2,inflict(~haunted~); givedice(d); sfx(~_curse~);,,EVEN,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Spook_downgraded,Inflict [haunted]Haunt[;]|gain a <slotdoubles>,2,inflict(~haunted~); givedice(d); sfx(~_curse~);,,DOUBLES|DOUBLES,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Poof,Inflict [vanish]Vanish,2,inflict(~ncr_vanish~); sfx(~_vanish~);,,EVEN,,PINK,change_power,complicate,,_vanish,,,,,,,,,,,,,,,,
Poof_upgraded,Inflict 2 [vanish]Vanish,2,inflict(~ncr_vanish~ | 2); sfx(~_vanish~);,,EVEN,,PINK,,,,_vanish,,,,,,,,,,,,,,,,
Attacktoplasm,Deal [sword]<d6> damage.|On 4[;] inflict [haunted]Haunt.,1,attack(d); if(d == 4) { inflict(~haunted~); } sfx(~_curse~);,,MAX4,,PURPLE,change_power,change_power,,_curse,,,,,,,,,,,,,,,,
Attacktoplasm_downgraded,Deal [sword]<d6> damage.|On 2[;] inflict [haunted]Haunt.,1,attack(d); if(d == 2) { inflict(~haunted~); } sfx(~_curse~);,,MAX2,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Attacktoplasm_weakened,Deal [sword]<d6> damage.|On 2[;] inflict [haunted]Haunt.,1,attack(d); if(d == 4) { inflict(~haunted~); } sfx(~_curse~);,,MAX2|FREE2,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Chocolate Spookie,Gain [fury]Spooky [red]Fury[],2,inflictself(~spookyfury~); sfx(~_heal~);,,COUNTDOWN,8,ORANGE,halfcountdown,noeffect,,_heal,,,,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Spooplicate,Duplicate a dice|Inflict a spooky status,2,inflict(rand([~haunted~|~haunted~|~haunted~|~haunted~|~haunted~|~haunted~|~ncr_vanish~|~ncr_vanish~|~ncr_vanish~|~curse~|~curse~|~reversenexttarget~])); givedice(d); givedice(d); sfx(~_curse~);,,MAX4,,GREEN,simplify,complicate,,_curse,,,,,,,,,,,,,,,,
Grudgenudge,3-6: Decrease value by 2|1-2: Inflict (3-<d6>) [haunted]Haunt,2,if(d > 2){givedice(d - 2);} inflict(~haunted~ | 3 - d); sfx(~_curse~);,,NORMAL,,PURPLE,change_power,change_power,,_curse,,,,,,,,,,,,,,,,
Grudgenudge_upgraded,4-6: Decrease value by 3|1-3: Inflict (4-<d6>) [haunted]Haunt,2,if(d > 2){givedice(d - 2);} inflict(~haunted~ | 4 - d); sfx(~_curse~);,,NORMAL,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Grudgenudge_downgraded,3: Gain a 1|1-2: Inflict (3-<d6>) [haunted]Haunt,2,if(d == 3){givedice(d - 2);} inflict(~haunted~ | 3 - d); sfx(~_curse~);,,MAX3,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Grudgenudge_weakened,Inflict (4-<d6>) [haunted]Haunt,2,inflict(~haunted~ | 4 - d); sfx(~_curse~);,,MAX3,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Bump in the Night,1-4: Increase value by 2|5-6: Inflict (<d6>-4)|[haunted]Haunt[;] gain a 6,2,if(d > 4){ givedice(6); } else{ givedice(d + 2); } inflict(~haunted~ | d - 4); sfx(~_curse~);,,NORMAL,,PURPLE,change_power,change_power,,_curse,,,,,,,,,,,,,,,,
Bump in the Night_upgraded,1-3: Increase value by 3|4-6: Inflict (<d6>-3)|[haunted]Haunt[;] gain a 6,2,if(d > 3){ givedice(6); } else{ givedice(d + 3); } inflict(~haunted~ | d - 3); sfx(~_curse~);,,NORMAL,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Bump in the Night_downgraded,Gain a 6[;]|on 5-6[;] inflict (<d6>-4)|[haunted]Haunt,2,if(d > 4){ givedice(6); } else{ givedice(d + 2); } inflict(~haunted~ | d - 4); sfx(~_curse~);,,MIN4,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Bump in the Night_weakened,Inflict (<d6>-3)|[haunted]Haunt[;] gain a 6,2,if(d > 3){ givedice(6); } else{ givedice(d + 3); } inflict(~haunted~ | d - 3); sfx(~_curse~);,,MIN4,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Shadow Ball,Deal [sword]<d6> damage.|On 4[;] inflict [curse]Curse.,1,attack(d); if(d == 4) { inflict(CURSE); } sfx(~_curse~);,,MAX4,,WHITE,change_power,change_power,,_curse,,,,,,,,,,,,,,,,
Shadow Ball_downgraded,Deal [sword]<d6> damage.|On 2[;] inflict [curse]Curse.,1,attack(d); if(d == 2) { inflict(CURSE); } sfx(~_curse~);,,MAX2,,WHITE,,,,_curse,,,,,,,,,,,,,,,,
Shadow Ball_weakened,Deal [sword]<d6> damage.|On 2[;] inflict [curse]Curse.,1,attack(d); if(d == 4) { inflict(CURSE); } sfx(~_curse~);,,MAX2|FREE2,,WHITE,,,,_curse,,,,,,,,,,,,,,,,
Apparition,Inflict [haunted]Haunt[;]|[curse]Curse and [vanish]Vanish,2,inflict(~haunted~); inflict(~ncr_vanish~); inflict(CURSE); sfx(~_curse~);,,COUNTDOWN,10,WHITE,change_power,change_power,,_curse,,,,,,,,,,,,,,,,
Apparition_upgraded,Inflict [haunted]Haunt[;]|[curse]Curse and [vanish]Vanish[;],2,inflict(~haunted~); inflict(~ncr_vanish~); inflict(CURSE); sfx(~_curse~);,,COUNTDOWN,6,WHITE,,,,_curse,,,,,,,,,,,,,,,,
Apparition_downgraded,Inflict [haunted]Haunt[;]|[curse]Curse or [vanish]Vanish,2,inflict(rand([~haunted~|~curse~|~ncr_vanish~])); sfx(~_curse~);,,COUNTDOWN,10,WHITE,,,,_curse,,,,,,,,,,,,,,,,
Bandage Whip,Do [sword]5 damage[;]|inflict [confuse]Confuse,2,attack(5); inflict(CONFUSE);,,COUNTDOWN,12,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Bandage Whip_upgraded,Do [sword]8 damage[;]|inflict [confuse]Confuse,2,attack(8); inflict(CONFUSE);,,COUNTDOWN,12,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Bandage Whip_downgraded,Inflict [confuse]Confuse,2,inflict(CONFUSE);,,COUNTDOWN,12,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Spooky Noises,Drain 1 health and|haunt [haunted]1 dice,2,drain(1); inflict(HAUNTED);,,ODD,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Spooky Noises_upgraded,Drain 1 health and|haunt [haunted]2 dice,2,drain(1); inflict(HAUNTED|2);,,ODD,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Spooky Noises_downgraded,Haunt [haunted]1 dice,2,inflict(HAUNTED);,,ODD,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Fade,Do [sword]<d6> damage[;]|Inflict [vanish]Vanish,2,attack(d); inflict(VANISH);,,REQUIRE1,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Fade_upgraded,Do [sword]<d6> damage[;]|Inflict [vanish]Vanish,2,attack(d); inflict(VANISH);,,REQUIRE1|FREE2,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Fade_downgraded,Inflict [vanish]Vanish,2,inflict(VANISH);,,REQUIRE1,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Jab,Do [sword]<d6> damage[;]|Gain [thorns]2 thorns,2,attack(d); inflictself(THORNS| 2);,,REQUIRE2,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Jab_upgraded,Do [sword]<d6> damage[;]|Gain [thorns]2 thorns,2,attack(d); inflictself(THORNS| 2);,,REQUIRE2|FREE2,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Jab_downgraded,Gain [thorns]2 thorns,2,inflictself(THORNS| 2);,,REQUIRE2,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,
Echo,Do [weaken]<d6> damage[;]|Inflict [weaken]3 weaken,2,attack(d|WEAKEN); inflict(WEAKEN| 3);,,REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Echo_upgraded,Do [weaken]<d6> damage[;]|Inflict [weaken]3 weaken,2,attack(d|WEAKEN); inflict(WEAKEN| 3);,,REQUIRE3|FREE2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Echo_downgraded,Inflict [weaken]3 weaken,2,inflict(WEAKEN| 3);,,REQUIRE3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Muddle,Do [sword]<d6> damage[;]|Inflict [confuse]Confuse,2,attack(d); inflict(CONFUSE);,,REQUIRE4,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Muddle_upgraded,Do [sword]<d6> damage[;]|Inflict [confuse]Confuse,2,attack(d); inflict(CONFUSE);,,REQUIRE4|FREE2,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Muddle_downgraded,Inflict [confuse]Confuse,2,inflict(CONFUSE);,,REQUIRE4,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Mute,Do [sword]<d6> damage[;]|Inflict [silence]Silence,2,attack(d); inflict(SILENCE);,,REQUIRE5,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Mute_upgraded,Do [sword]<d6> damage[;]|Inflict [silence]Silence,2,attack(d); inflict(SILENCE);,,REQUIRE5|FREE2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Mute_downgraded,Inflict [silence]Silence,2,inflict(SILENCE);,,REQUIRE5,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Haunt,Do [sword]<d6> damage[;]|Haunt [haunted]3 dice,2,attack(d); inflict(HAUNTED|3);,,REQUIRE6,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Haunt_upgraded,Do [sword]<d6> damage[;]|Haunt [haunted]3 dice,2,attack(d); inflict(HAUNTED|3);,,REQUIRE6|FREE2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Haunt_downgraded,Haunt [haunted]3 dice,2,inflict(HAUNTED|3);,,REQUIRE6,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Poison Jab,Deal [sword]<d6> damage.|On 4[;] inflict [poison]Poison.,1,attack(d); if(d == 4) { inflict(POISON); } sfx(~_poison~);,,MAX4,,PURPLE,change_power,change_power,,_poison,,,,,,,,,,,,,,,,
Poison Jab_downgraded,Deal [sword]<d6> damage.|On 2[;] inflict [poison]Poison.,1,attack(d); if(d == 2) { inflict(POISON); } sfx(~_poison~);,,MAX2,,PURPLE,,,,_poison,,,,,,,,,,,,,,,,
Poison Jab_weakened,Deal [sword]<d6> damage.|On 2[;] inflict [poison]Poison.,1,attack(d); if(d == 4) { inflict(POISON); } sfx(~_poison~);,,MAX2|FREE2,,PURPLE,,,,_poison,,,,,,,,,,,,,,,,
Heroic Robot,Triple Seven|Get a random|upgraded item,2,/*$var eq = rand(getequipmentlist(null|[]|[~skillcard~|~excludefromrandomlists~|~robotonly~|~witchonly~|~onceperbattle~|~alternateversion~])); var modifier = ~~; replacemewith(eq + ~+~| -1);$*/,,,,WHITE,,,,,,YES,,excludefromrandomlists|powercard,,,,,,,,,,,,
Heroic Inventor?,Random Haxess|Copy a random item|from your deck[;] upgraded,2,//$replacemewith(rand(Deck.getcardlist(~all~)) + ~+~| -1);$,,,,ORANGE,,,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard,,,,,,,,,,,,
Hitodama_upgraded,Deal [sword]<d6> damage.|On 4[;] inflict [vanish]Vanish.,1,attack(d); if(d == 6) { inflict(~ncr_vanish~); } sfx(~_vanish~);,,MAX4|FREE2,,PINK,,,,_vanish,,,,,,,,,,,,,,,,
Poison Jab_upgraded,Deal [sword]<d6> damage.|On 4[;] inflict [poison]Poison.,1,attack(d); if(d == 6) { inflict(POISON); } sfx(~_poison~);,,MAX4|FREE2,,PURPLE,,,,_poison,,,,,,,,,,,,,,,,
Shadow Ball_upgraded,Deal [sword]<d6> damage.|On 4[;] inflict [curse]Curse.,1,attack(d); if(d == 6) { inflict(CURSE); } sfx(~_curse~);,,MAX4|FREE2,,WHITE,,,,_curse,,,,,,,,,,,,,,,,
Attacktoplasm_upgraded,Deal [sword]<d6> damage.|On 4[;] inflict [haunted]Haunt.,1,attack(d); if(d == 6) { inflict(~haunted~); } sfx(~_curse~);,,MAX4|FREE2,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Derplicate,Duplicate dice...?,2,var d1 = d; var d2 = d; var chance1 = rand([~fire~ | ~fire~ | ~blind~ | ~blind~ | ~freeze~ | ~lock~ | ~none~ | ~none~ | ~none~ | ~none~ | ~none~ | ~none~]); var burn = getstatusself(FIRE); if(burn > 0){removestatusself(FIRE | burn);} if(chance1 != ~none~ && chance1 != ~freeze~){inflictself(chance1);} var chance3 = rand([-2 | -1 | -1 | 0 | 0 | 0 | 0 | 1]); if(chance1 == ~freeze~){d1 = 1; chance3 = 0; inflictself(ICE); removestatusself(ICE);} givedice(d1 + chance3); if(burn > 0){inflictself(FIRE | burn);} var chance2 = rand([~fire~ | ~fire~ | ~blind~ | ~blind~ | ~freeze~ | ~lock~ | ~none~ | ~none~ | ~none~ | ~none~ | ~none~ | ~none~]); burn = getstatusself(FIRE); if(burn > 0){removestatusself(FIRE | burn);} if(chance2 != ~none~ && chance2 != ~freeze~){inflictself(chance2);} var chance4 = rand([-2 | -1 | -1 | 0 | 0 | 0 | 0 | 1]); if(chance2 == ~freeze~){d2 = 1; chance4 = 0; inflictself(ICE); removestatusself(ICE);} givedice(d2 + chance4); if(burn > 0){inflictself(FIRE | burn);},,MIN3,,GREEN,change_power,complicate,,_cure,,YES,,,,,,,,,,,,,,
Derplicate_upgraded,Duplicate dice...?,2,var d1 = d; var d2 = d; var chance1 = rand([~fire~ | ~fire~ | ~blind~ | ~blind~ | ~freeze~ | ~lock~ | ~none~ | ~none~ | ~none~ | ~none~ | ~none~ | ~none~]); var burn = getstatusself(FIRE); if(burn > 0){removestatusself(FIRE | burn);} if(chance1 != ~none~ && chance1 != ~freeze~){inflictself(chance1);} var chance3 = rand([-2 | -1 | -1 | 0 | 0 | 0 | 0 | 1]); if(chance1 == ~freeze~){d1 = 1; chance3 = 0; inflictself(ICE); removestatusself(ICE);} givedice(d1 + chance3); if(burn > 0){inflictself(FIRE | burn);} var chance2 = rand([~fire~ | ~fire~ | ~blind~ | ~blind~ | ~freeze~ | ~lock~ | ~none~ | ~none~ | ~none~ | ~none~ | ~none~ | ~none~]); burn = getstatusself(FIRE); if(burn > 0){removestatusself(FIRE | burn);} if(chance2 != ~none~ && chance2 != ~freeze~){inflictself(chance2);} var chance4 = rand([-2 | -1 | -1 | 0 | 0 | 0 | 0 | 1]); if(chance2 == ~freeze~){d2 = 1; chance4 = 0; inflictself(ICE); removestatusself(ICE);} givedice(d2 + chance4); if(burn > 0){inflictself(FIRE | burn);},,NORMAL,,GREEN,,,,_cure,,YES,,,,,,,,,,,,,,
Smuggling Ball,Do [sword]<d6> damage[;]|get a new dice next turn,2,attack(d); inflictself(~stash~ + rand([1[;] 2[;] 3[;] 4[;] 5[;] 6])); inflictself(~illuminate~); sfxdamage(target | d);,,MAX4,,RED,change_power,change_power,,,,NO,,,,,,,,,,,,,,
Smuggling Ball_upgraded,Do [sword]<d6> damage[;]|get a new dice next turn,2,attack(d); inflictself(~stash~ + rand([1[;] 2[;] 3[;] 4[;] 5[;] 6])); inflictself(~illuminate~); sfxdamage(target | d);,,MAX5,,RED,,,,,,NO,,,,,,,,,,,,,,givedice();
Smuggling Ball_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target | d);,,MAX4,,RED,,,,,,NO,,,,,,,,,,,,,,
Stuck Gumball,Heal [heal]1 health[;]|gain a dice next turn,2,attackself(-1); inflictself(~stash~ + rand([1[;] 2[;] 3[;] 4[;] 5[;] 6])); inflictself(~illuminate~); sfx(~_heal~);,,MIN4,,GREEN,change_power,change_power,,,,YES,,,,,,,,,,,,,,
Stuck Gumball_upgraded,Heal [heal]<flipd6> health[;]|gain a dice next turn,2,attackself(7 - d); inflictself(~stash~ + rand([1[;] 2[;] 3[;] 4[;] 5[;] 6])); inflictself(~illuminate~); sfx(~_heal~);,,MIN4,,GREEN,,,,,,YES,,,,,,,,,,,,,,givedice();
Stuck Gumball_downgraded,Heal [heal]1 health,2,attackself(-1); sfx(~_heal~);,,MIN4,,GREEN,,,,,,YES,,,,,,,,,,,,,,
Lash,Do [fire]<d6> damage[;]|on 1 inflict [fire]2 burn,2,attack(d| FIRE); if(d == 1) inflict(FIRE | 2);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Lash_upgraded,Do [fire]<d6> damage[;]|on 1 inflict [fire]2 burn|and [fire]2 burn next turn,2,attack(d| FIRE); if(d == 1) { inflict(FIRE| 2);  jinx(~Lash~|~inflict [fire]2 burn~|~Inflict [fire]2 burn~|~sfx(\~_fire\~|\~\~|0.2); inflictself(FIRE | 2);~|self|target|1|3); },,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Lash_downgraded,Do [fire]<d6> damage[;]|on 1 inflict [fire]burn,2,attack(d| FIRE); if(d == 1) inflict(FIRE);,,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Lash_weakened,Do [fire]<d6> damage[;]|on 1 inflict [fire]burn|and [fire]burn next turn,2,attack(d| FIRE); if(d == 1) { inflict(FIRE);  jinx(~Lash-~|~inflict [fire]burn~|~Inflict [fire]burn~|~sfx(\~_fire\~|\~\~|0.2); inflictself(FIRE);~|self|target|1|3); },,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Mallet,Do [shock]<d6> damage[;]|on 1 inflict [shock]2 shock,2,attack(d | SHOCK); if(d == 1) inflict(SHOCK | 2); if(d > 1) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_shock~|~~|0.2); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Mallet_downgraded,Do [shock]<d6> damage[;]|on 1 inflict [shock]shock,2,attack(d | SHOCK); if(d == 1) inflict(SHOCK); if(d > 1) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_shock~|~~|0.2); },,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Mallet_weakened,Do [shock]<d6> damage[;] on 3|or lower inflict [shock]shock,2,attack(d | SHOCK); if(d < 4) inflict(SHOCK); if(d > 3) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_shock~|~~|0.2); },,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Mallet_upgraded,Do [shock]<d6> damage[;] on 3|or lower inflict [shock]2 shock,2,attack(d | SHOCK); if(d < 4) inflict(SHOCK | 2); if(d > 3) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_shock~|~~|0.2); },,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Grieve,Do [ice]<d6> damage[;]|on 1 inflict [ice]2 freeze,2,attack(d | ICE); if(d == 1) { inflict(ICE| 2); sfx(~_ice~|~~|0.2); } sfxdamage(target|d);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Grieve_upgraded,Do [ice]<d6> damage[;]|on 1 inflict [ice]2 freeze,2,attack(d | ICE); if(d == 2) { inflict(ICE| 2); sfx(~_ice~|~~|0.2); } sfxdamage(target|d);,,NORMAL|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Grieve_downgraded,Do [ice]<d6> damage[;]|on 1 inflict [ice]freeze,2,attack(d | ICE); if(d == 1) { inflict(ICE); sfx(~_ice~|~~|0.2); } sfxdamage(target|d);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Grieve_weakened,Do [ice]<d6> damage[;]|on 1 inflict [ice]freeze,2,attack(d | ICE); if(d == 2) { inflict(ICE); sfx(~_ice~|~~|0.2); } sfxdamage(target|d);,,NORMAL|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Trowel,Do [weaken]<d6> damage[;]|on 1 inflict [weaken]2 weaken,2,attack(d | WEAKEN); if(d == 1) inflict(WEAKEN | 2); if(d > 1) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_weaken~|~~|0.2); },,NORMAL,,ORANGE,change_power,change_power,weaken,,0,NO,NO,,,,,,,,,,,,,
Trowel_upgraded,Do [weaken]<d6> damage[;]|on odd inflict [weaken]2 weaken,2,attack(d | WEAKEN); if(d % 2 == 1) inflict(WEAKEN | 2); if(d % 2 == 0) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_weaken~|~~|0.2); },,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Trowel_downgraded,Do [weaken]<d6> damage[;]|on 1 inflict [weaken]weaken,2,attack(d | WEAKEN); if(d == 1) inflict(WEAKEN); if(d > 1) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_weaken~|~~|0.2); },,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Trowel_weakened,Do [weaken]<d6> damage[;]|on odd inflict [weaken]weaken,2,attack(d | WEAKEN); if(d % 2 == 1) inflict(WEAKEN); if(d % 2 == 0) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_weaken~|~~|0.2); },,NORMAL,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Table Scam,Reroll all unused dice[;]|and reroll this dice,2,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1|2|3|4|5|6])| self.screenposition()| c * 0.05); c++; } } givedice();,,ODD,,PURPLE,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Snubdivide,Split a dice 3venly...?,2,if(d == 2){givedice([1 | 1]);} else{givedice([(d / 3) | (d / 3) | (d / 3)]);} inflictself(~ncr_vanish~);,,EVEN,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Snubdivide_upgraded,Split a dice as|3venly as possible...?,2,if(d % 3 == 0) { givedice([(d / 3) | (d / 3) | (d / 3)]); } if(d % 3 == 1) { givedice([(d / 3) | (d / 3) | (d / 3) + 1]); } if(d % 3 == 2) { givedice([(d / 3) | (d / 3) + 1 | (d / 3) + 1]); } inflictself(~ncr_vanish~);,,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Snubdivide_downgraded,Split a six 3venly...?,2,givedice([2 | 2 | 2]); inflictself(~ncr_vanish~);,,REQUIRE6,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Lollitwop,Dice value -2. On 2[;]|instead return two 2s,2,if(d == 1){ givedice(2); } else if(d > 2) { givedice(d - 2); } else { givedice([2|2]); },,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Lollitwop_upgraded,Dice value -2. On 2[;]|instead return ''two dice'',2,var x = rand([1 | 1 | 1 | 1 | 1 | 1 | 2 | 2 | 2 | 2 | 2 | 3 | 3 | 3 | 3 | 4 | 4 | 4 | 5 | 5 | 6]); if(d == 1){ inflictself(LOCK); inflictself(BURN); inflictself(BLIND); givedice(2); } else if(d != 2) { givedice(d - 1); } else { while(x > 0) { givedice(2); x -= 1; } },,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Swordspatula,Flip <d6> dice upside down|Bash with dice flipped,2,var c = 0; var avail = []; for(mydice in self.dicepool) { if(mydice.available()) { avail.push(mydice); } } if(avail.length > 0) { var max = d; if(max > avail.length) { max = avail.length; } shuffle(avail); for(i in 0...max) { avail[i].animatereroll(rand([1|2|3|4|5|6]) | self.screenposition()| c * 0.05); c++; } attack(max); },,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(7 - d);
Swordspatula_upgraded,Flip <d6> dice upside down|Bash with dice[;] flipped,2,var c = 0; var avail = []; for(mydice in self.dicepool) { if(mydice.available()) { avail.push(mydice); } } var egg = avail.length; if(avail.length > 0) { var max = d; if(max > avail.length) { max = avail.length; } shuffle(avail); for(i in 0...max) { avail[i].animatereroll(rand([1|2|3|4|5|6]) | self.screenposition()| c * 0.05); c++; } } attack(7 - egg);,,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(7 - d);
Swordspatula_downgraded,Flip <d6> dice upside down,2,var c = 0; var avail = []; for(mydice in self.dicepool) { if(mydice.available()) { avail.push(mydice); } } if(avail.length > 0) { var max = d; if(max > avail.length) { max = avail.length; } shuffle(avail); for(i in 0...max) { avail[i].animatereroll(rand([1|2|3|4|5|6]) | self.screenposition()| c * 0.05); c++; } },,NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,givedice(7 - d);
Dump,A dice value +1[;]|return the dice,2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(dicelist[0].basevalue + 1| self.screenposition()); if(dicelist[0].basevalue == 6){ givedice(1); } } givedice(d);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Dump_upgraded,A dice value +1[;]|return the dice|[gray](Reuseable),2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(dicelist[0].basevalue + 1| self.screenposition()); if(dicelist[0].basevalue == 6){ givedice(1); } } givedice(d);,,NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Fudge,A dice value - 1[;]|return the dice,2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 1){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(dicelist[0].basevalue - 1| self.screenposition()); } givedice(d);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Fudge_upgraded,A dice value - 1[;]|return the dice|[gray](Reuseable),2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 1){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(dicelist[0].basevalue + 1| self.screenposition()); } givedice(d);,,NORMAL,,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Shady Dice,Duplicate [red]a[] dice|Lose [heart][red]some[] health,2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); givedice([dicelist[0].basevalue | dicelist[0].basevalue]); } pierceattackself(dicelist[0].basevalue);,,NORMAL,,PURPLE,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Shady Dice_upgraded,Duplicate [red]a[] dice|Lose [heart][red]<d6>[] health|,2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); givedice([dicelist[0].basevalue | dicelist[0].basevalue]); } pierceattackself(d);,,NORMAL,,PURPLE,,,,,0,YES,NO,,,,,,,,,,,,,
Blood Yeet,Lose [heart]6 hp[;] then deal [heart]2,2,pierceattackself(6); attack(2);,,ODD,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Blood Yeet_upgraded,Lose [heart]8 hp[;] then deal [heart]3,2,pierceattackself(8); attack(3);,,ODD,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Blood Yeet_downgraded,Lose [heart]4 hp[;] then deal [heart]1|[gray](Reuseable),2,pierceattackself(4); attack(1);,,ODD,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Mirror Shred,Gain [sword]1 damage[;]|-1 dice this fight,2,self.extradice--; inflictself(~extradamage~); var x = new elements.StatusEffect(~alternate_weaken~ | 1); x.invisible = true; x.remove_at_startturn = false; x.remove_at_endturn = false; target.status.push(x);,,REQUIRE6,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Mirror Shred_upgraded,Gain [sword]2 damage[;]|-1 dice this fight,2,self.extradice--; inflictself(~extradamage~ | 2); var x = new elements.StatusEffect(~alternate_weaken~ | 2); x.invisible = true; x.remove_at_startturn = false; x.remove_at_endturn = false; target.status.push(x);,,REQUIRE6,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Mirror Shred_downgraded,Gain [sword]1 damage[;]|-2 dice this fight,2,self.extradice--; self.extradice--; inflictself(~extradamage~); var x = new elements.StatusEffect(~alternate_weaken~ | 1); x.invisible = true; x.remove_at_startturn = false; x.remove_at_endturn = false; target.status.push(x);,,REQUIRE6,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Jagged Shard,Do [sword]12 damage and|take [sword]3[;] +1 dice this fight,2,if(simulation) { bonus(1000); } else{ attack(12); attackself(3); self.extradice++; },,MIN5|MIN5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Jagged Shard_upgraded,Do [sword]16 damage and|take [sword]4[;] +1 dice this fight,2,if(simulation) { bonus(1000); } else{ attack(16); attackself(4); self.extradice++; },,MIN5|MIN5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Jagged Shard_downgraded,Do [sword]12 damage and|take [sword]3 damage,2,attack(12); attackself(3);,,MIN5|MIN5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Illuminadd,Get 2+[dice]<d6> next turn,2,inflictself(~stash~+(d + 2)); inflictself(~illuminate~);,,NORMAL,,YELLOW,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Illuminadd_upgraded,Get 4+[dice]<d6> next turn,2,inflictself(~stash~+(d + 4)); inflictself(~illuminate~);,,NORMAL,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Stall of Mirrors,[]+1 dice next fight,2,self.setvar(~check~|self.getvar(~check~) + 1);,,REQUIRE6,,PURPLE,simplify,doublerequirements,,,0,YES,NO,,,self.extradice += self.getvar(~check~); self.setvar(~check~|0);,,,,,,,,,,
Spatulatesword,Next turn[;] [sword]attack with|a dice and flip it|Return the dice,2,self.setvar(~flops~ | self.getvar(~flops~) + 1); givedice(d); inflictself(~lateflip~);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,self.setvar(~flops~ | 0); removestatusself(~lateflip~ | ALL);,,,while(self.getvar(~flops~) > 0){var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); attack(dicelist[0].basevalue); dicelist[0].animatereroll(7 - dicelist[0].basevalue| self.screenposition()); } self.setvar(~flops~ | self.getvar(~flops~) - 1); },,,,,,,givedice(d);
Spatulatesword_upgraded,Flip a dice next turn[;]|and [sword]attack with it|Return the dice,2,self.setvar(~floops~ | self.getvar(~floops~) + 1); givedice(d); inflictself(~lateflip~);,,NORMAL,,RED,,,,,0,NO,NO,,,self.setvar(~floops~ | 0); removestatusself(~lateflip~ | ALL);,,,while(self.getvar(~floops~) > 0){var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(7 - dicelist[0].basevalue| self.screenposition()); attack(dicelist[0].basevalue); } self.setvar(~floops~ | self.getvar(~floops~) - 1); },,,,,,,givedice(d);
Spatulatesword_downgraded,Flip a dice next turn[;]|return the dice,2,self.setvar(~flips~ | self.getvar(~flips~) + 1); givedice(d); inflictself(~lateflip~);,,NORMAL,,RED,,,,,0,NO,NO,,,self.setvar(~flips~ | 0); removestatusself(~lateflip~ | ALL);,,,while(self.getvar(~flips~) > 0){var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(7 - dicelist[0].basevalue| self.screenposition()); } self.setvar(~flips~ | self.getvar(~flips~) - 1);},,,,,,,givedice(d);
Spatulate,Flip a dice next turn[;]|return the dice,2,self.setvar(~flips~ | self.getvar(~flips~) + 1); givedice(d); inflictself(~lateflip~);,,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,,,self.setvar(~flips~ | 0); removestatusself(~lateflip~ | ALL);,,,while(self.getvar(~flips~) > 0){var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(7 - dicelist[0].basevalue| self.screenposition()); } self.setvar(~flips~ | self.getvar(~flips~) - 1);},,,,,,,
Spatulate_downgraded,Flip a dice next turn[;]|return the dice,2,self.setvar(~flips~ | self.getvar(~flips~) + 1); givedice(d); inflictself(~lateflip~);,,MIN4,,GREEN,,,,,0,YES,NO,,,self.setvar(~flips~ | 0); removestatusself(~lateflip~ | ALL);,,,while(self.getvar(~flips~) > 0){var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(7 - dicelist[0].basevalue| self.screenposition()); } self.setvar(~flips~ | self.getvar(~flips~) - 1);},,,,,,,
Spatulate_upgraded,Flip a dice next turn[;]|return the dice|[gray](Reuseable),2,self.setvar(~flips~ | self.getvar(~flips~) + 1); givedice(d); inflictself(~lateflip~);,,NORMAL,,GREEN,,,,,3,YES,NO,,,self.setvar(~flips~ | 0); removestatusself(~lateflip~ | ALL);,,,while(self.getvar(~flips~) > 0){var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(7 - dicelist[0].basevalue| self.screenposition()); } self.setvar(~flips~ | self.getvar(~flips~) - 1);},,,,,,,
Cauldron't,Do [sword]1 damage[;]|get an old dice,2,attack(1); var dicelist = []; dicelist.push(d); for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } shuffle(dicelist); givedice(rand(dicelist));,,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Cauldron't_upgraded,Do [sword]1 damage[;]|reroll dice...?|[gray](Reuseable),2,attack(1); var dicelist = []; dicelist.push(d); for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice.basevalue); } } shuffle(dicelist); givedice(rand(dicelist));,,NORMAL,,PURPLE,,,,,2,NO,NO,,,,,,,,,,,,,givedice();
Cauldron't_downgraded,Do [sword]1 damage,2,attack(1);,,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Vide Grip,Return two of the|quotient of the dice,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } givedice([(bigdice / smalldice)|(bigdice / smalldice)]| ~combinedice~);,,NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Vide Grip_upgraded,Return three of the|quotient of the dice,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } givedice([(bigdice / smalldice)|(bigdice / smalldice)|(bigdice / smalldice)]| ~combinedice~);,,NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Vide Grip_downgraded,Return two of the|quotient of the dice,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } givedice([(bigdice / smalldice)|(bigdice / smalldice)]| ~combinedice~);,,RANGE25|RANGE25,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Boxed Gloves,Do [sword]<d6> damage[;]|on 1[;] gain [reduce]1 reduce|Unusable turn after use,2,attack(d); if(d == 3) inflictself(REDUCE| 1); e.availablenextturn = false;,,NORMAL | FREE2,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(d == 1) inflictself(REDUCE| 1);
Boxed Gloves_upgraded,Do [sword]<d6> damage[;]|on 1[;] gain [reduce]2 reduce|Unusable turn after use,2,attack(d); if(d == 3) inflictself(REDUCE| 2); e.availablenextturn = false;,,NORMAL | FREE2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,if(d == 1) inflictself(REDUCE| 2);
Boxed Gloves_downgraded,Do [sword]<d6> damage|Unusable turn after use,2,attack(d); e.availablenextturn = false;,,NORMAL | FREE2,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Coup de Grace,Do [sword]<d6> damage[;] double|if enemy health is critical,2,if((target.hp / target.maxhp < 0.25) # target.hp <= 6) { attack(d* 2); } else { attack(d); },,MAX5|FREE1,,RED,reducesize,complicate,,,0,NO,NO,,,,,,,,,,,,,
Coup de Grace_deckupgrade,Do [sword]<d6> damage[;] double|if enemy health is critical,2,if((target.hp / target.maxhp < 0.25) # target.hp <= 6) { attack(d* 2); } else { attack(d); },,NORMAL|FREE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Landline,In two turns[;] do [sword]<d6>|In three turns[;] do [sword]<d6>,2,jinx(~Land...~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|2|d); jinx(~...line~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|3|d);,,NORMAL|FREE1,,PINK,add2,complicate,,,0,NO,NO,,,,,,,,,,,,,
Missed Score,50% chance to return dice|and do [sword]<double> damage,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); attack(2 * d); sfxdamage(target | 2 * d); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); }
Missed Score_upgraded,75% chance to return dice|and do [sword]<double> damage,2,var odds = 75; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); attack(2 * d); sfxdamage(target | 2 * d); },,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); givedice(d); }
Missed Score_downgraded,50% chance to  do [sword]<double> damage,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 25; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(2 * d); sfxdamage(target | 2 * d); },,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Elastic Spleen,Do [sword]<d6> damage[;]|recover [heal]<d6> health,2,attack(d); attackself(-d); sfxdamage(target | d);,,RANGE23,,GREEN,add2,complicate,,,0,NO,NO,,,,,,,,,,,,,attackself(-1); sfx(~_heal~|~~|0.2);
Blood Stuck,Deal [sword]<d6> damage|Next turn[;] heal [heart]<d6> health,2,attack(d); jinx(~Blood Stuck~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfxdamage(null|%VAR%);~|self|target|1|d);,,MAX4,,RED,simplify,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Whyjinx,Decrease all Jinx|countdowns by [jinx]1...?,2,boostjinxcountdowns(self| rand([3|2|1|0])); boostjinxcountdowns(target| rand([3|2|1|0]));,,EVEN,,PINK,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Whyjinx_upgraded,Decrease all Jinx|countdowns by [jinx]2...?,2,boostjinxcountdowns(self| rand([4|3|2|1])); boostjinxcountdowns(target| rand([4|3|2|1]));,,EVEN,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Slapstick,In [jinx]<d6> turns[;]|do [sword]<double> damage,2,jinx(~Slapstick~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|d|(d * 2));  sfx(~_thinghappens~);,,MAX4|FREE1,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slapstick_upgraded,In [jinx]<d6> turns[;]|do [sword]<double> damage,2,jinx(~Slapstick+~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|d|(d * 2)); sfx(~_thinghappens~);,,MAX4|FREE3,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Slapstick_downgraded,In [jinx]<d6> turns[;]|do [sword]<slotdoubles> damage,2,jinx(~Slapstick-~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|d|d); sfx(~_thinghappens~);,,DOUBLES|DOUBLES|FREE1,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Falling Skull,Do [sword]<d6> damage[;]|on 1[;] inflict [curse]Curse [gray]2,2,attack(d); if(d == 1) inflict(CURSE | 2); if(d > 1) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_curse~|~~|0.2); },,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Falling Skull_upgraded,Do [sword]<d6> damage[;]|on odd[;] inflict [curse]Curse [gray]2,2,attack(d); if(d % 2 == 1) inflict(CURSE | 2); if(d % 2 == 0) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_curse~|~~|0.2); },,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Falling Skull_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Raspy Laugh,Do [sword]<d6> damage[;]|+2 if enemy is cursed,2,if(getstatus(CURSE) > 0) { attack((d + 2)); } else { attack((d)); } sfxdamage(target | d);,,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Raspy Laugh_upgraded,Do [sword]<d6> damage[;]|+4 if enemy is cursed,2,if(getstatus(CURSE) > 0) { attack((d + 4)); } else { attack((d)); } sfxdamage(target | d);,,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Raspy Laugh_downgraded,Do [sword]<d6> damage[;]|+2 if enemy is cursed,2,if(getstatus(CURSE) > 0) { attack((d + 2)); } else { attack((d)); } sfxdamage(target | d);,,MAX2,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Oof Oof Oof,Gain [fury]2 Fury|but inflict 1,2,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY | 2); inflict(FURY);,,COUNTDOWN,10,RED,change_power,noeffect,fury,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Oof Oof Oof_upgraded,Gain [fury]3 Fury|but inflict 1,2,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY | 3); inflict(FURY);,,COUNTDOWN,10,RED,,,fury,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Ruff Ruff Rage,Do [sword]4 damage[;]|waste [fury]Fury[] for +8,2,if(getstatusself(FURY) > 0){ removestatusself(FURY); attack(12); } else{ attack(4); },,COUNTDOWN,4,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Ruff Ruff Rage_upgraded,Do [sword]6 damage[;]|waste [fury]Fury[] for +10,2,if(getstatusself(FURY) > 0){ removestatusself(FURY); attack(16); } else{ attack(6); },,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Ruff Ruff Rage_downgraded,Do [sword]2 damage[;]|waste [fury]Fury[] for +6,2,if(getstatusself(FURY) > 0){ removestatusself(FURY); attack(8); } else{ attack(2); },,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Fool's Errand,Do [sword] <d6> damage|If enemy is [vanish]Vanished[;]|stash the dice for next turn,2,attack(d); if(getstatus(VANISH) + getstatus(~ncr_vanish~) > 0){inflictself(~stash~ + d); inflictself(~illuminate~);},,MIN4,,PINK,change_power,change_power,,,,,,,,,,,,,,,,,,
Fool's Errand_upgraded,Do [sword] <d6> damage|If enemy is [vanish]Vanished[;] stash|the dice and attack again,2,attack(d); if(getstatus(VANISH) + getstatus(~ncr_vanish~) > 0){inflictself(~stash~ + d); inflictself(~illuminate~); attack(d); },,MIN4,,PINK,,,,,,,,,,,,,,,,,,,,
Fool's Errand_downgraded,If enemy is [vanish]Vanished[;]|do [sword] <d6> damage and|stash the dice for next turn,2,if(getstatus(VANISH) + getstatus(~ncr_vanish~) > 0){inflictself(~stash~ + d); inflictself(~illuminate~); attack(d);},,MIN4,,PINK,,,,,,,,,,,,,,,,,,,,
Ice Splatter,Do [ice]<flipd6> damage[;]|+[ice]3 if you are frozen,2,if(getstatusself(ICE) > 0) { attack((10 - d) | ICE); } else { attack((7 - d) | ICE); },,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ice Splatter_upgraded,Do [ice]<flipd6> damage[;]|double if you are frozen,2,if(getstatusself(ICE) > 0) { attack((14 - (2 * d)) | ICE); } else { attack((7 - d) | ICE); },,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Ice Splatter_downgraded,Do [ice]<flipd6> damage[;]|+[ice]3 if you are frozen,2,if(getstatusself(ICE) > 0) { attack((10 - d) | ICE); } else { attack((7 - d) | ICE); },,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Sleet Clump,Inflict [ice]2 freeze|but gain [ice]1,2,inflict(ICE | 2); var oldfreeze = 0; var oldaltfreeze = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~ice~) { oldfreeze = stat.value; } if(stat.type == ~alternate_ice~) { oldaltfreeze = stat.value; } } } inflictself(ICE); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~ice~ && stat.value != oldfreeze) { inflictwhat = stat.type; } if(stat.type == ~alternate_ice~ && stat.value != oldaltfreeze) { inflictwhat = stat.type; } } if(inflictwhat == ~ice~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { dicelist.sort(function(a|b) return -1 * (a.basevalue - b.basevalue)); dicelist[0].animate(~ice~); } } if(inflictwhat == ~alternate_ice~) { for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.animateburn != true) { mydice.animate(~alternate_ice~); } } } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } },,ODD,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Blame Blast,Do [fire]6 damage for|each burning dice[;]|transfer burn,2,attack(getstatusself(FIRE) * 6 | FIRE); sfxdamage(target| d); inflict(FIRE | getstatusself(FIRE)); removestatusself(FIRE | ALL);,,COUNTDOWN,4,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blame Blast_upgraded,Do [fire]7 damage for|each burning dice[;]|transfer burn,2,attack(getstatusself(FIRE) * 7 | FIRE); sfxdamage(target| d); inflict(FIRE | getstatusself(FIRE)); removestatusself(FIRE | ALL);,,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Blame Blast_downgraded,Do [fire]4 damage for|each burning dice[;]|transfer burn,2,attack(getstatusself(FIRE) * 4 | FIRE); sfxdamage(target| d); inflict(FIRE | getstatusself(FIRE)); removestatusself(FIRE | ALL);,,COUNTDOWN,4,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Flicker,Inflict [fire]2 burn|but gain [fire]1,2,inflict(FIRE | 2); inflictself(FIRE);,,EVEN,,RED,simplify,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Low Voltage,Do [shock]<d6> damage[;] duplicate|dice if you are shocked,2,if(getstatusself(SHOCK) > 0) { givedice(d); givedice(d); } attack((d) | SHOCK); sfxdamage(target| d);,,MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,if(getstatus(SHOCK) > 0) { givedice(d); }
Low Voltage_upgraded,Do [shock]<d6> damage[;] duplicate|dice if you are shocked,2,if(getstatusself(SHOCK) > 0) { givedice(d); givedice(d); } attack((d) | SHOCK); sfxdamage(target| d);,,MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(getstatus(SHOCK) > 0) { givedice(d); }
Low Voltage_downgraded,Do [shock]<d6> damage[;] duplicate|dice if you are shocked,2,if(getstatusself(SHOCK) > 0) { givedice(d); givedice(d); } attack((d) | SHOCK); sfxdamage(target| d);,,MAX2,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,if(getstatus(SHOCK) > 0) { givedice(d); }
Zapper,Inflict [shock]2 shock|but gain [shock]1,2,inflict(SHOCK | 2); inflictself(SHOCK); self.applyequipmentcurses();,,EVEN,,YELLOW,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
Deton'tor,Do [sword]2 damage for|every [poison]1 on you,2,attack(getstatusself(POISON) * 2); sfxdamage(target|d);,,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
Duotoxin,Inflict [poison]2 poison|but gain [poison]1,2,inflict(POISON| 2); inflictself(POISON); sfx(~_poison~);,,COUNTDOWN,2,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Duotoxin_upgraded,Inflict [poison]3 poison|but gain [poison]1,2,inflict(POISON| 3); inflictself(POISON); sfx(~_poison~);,,COUNTDOWN,2,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Duotoxin_downgraded,[poison]Poison everyone,2,inflict(POISON| 1); inflictself(POISON | 1); sfx(~_poison~);,,COUNTDOWN,2,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Shielded Bash,Bash with enemy shield and|do [shield] <slotdoubles> extra damage|(pierces shield),2,pierceattack(getstatus(SHIELD) + d);,,DOUBLES|DOUBLES,,ORANGE,change_requirements,change_function,,,0,NO,NO,,,,,,,,,,,,,
Shielded Bash_downgraded,Bash with enemy shield and|do [shield] <slotdoubles> extra damage|(pierces shield),2,pierceattack(getstatus(SHIELD) + d);,,REQUIRE6|REQUIRE6,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Shielded Bash_upgraded,Bash with enemy shield and|do [shield] <double> extra damage|(pierces shield),2,pierceattack(getstatus(SHIELD) + (2 * d));,,DOUBLES|DOUBLES,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Double Guard,Gain 3 [shield]Shield|but inflict [shield]1,2,inflictself(SHIELD| 3); inflict(SHIELD);,,NORMAL,,ORANGE,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Double Guard_upgraded,Gain 4 [shield]Shield|but inflict [shield]1,2,inflictself(SHIELD| 4); inflict(SHIELD);,,NORMAL,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Panicked Laugh,Deal [sword]<d6> damage[;]|quadruple if you are [curse]cursed|Also[;] [curse]curse yourself,2,if(getstatusself(CURSE) > 0) { attack(d * 4); } else { attack(d); sfxdamage(target|d); } inflictself(CURSE);,,MAX4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Panicked Laugh_upgraded,Deal [sword]<d6> damage[;]|quadruple if you are [curse]cursed|Also[;] [curse]curse yourself,2,if(getstatusself(CURSE) > 0) { attack(d * 4); } else { attack(d); sfxdamage(target|d); } inflictself(CURSE);,,MAX5,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Panicked Laugh_downgraded,Deal [sword]<d6> damage[;]|quadruple if you are [curse]cursed|Also[;] [curse]curse yourself,2,if(getstatusself(CURSE) > 0) { attack(d * 4); } else { attack(d); sfxdamage(target|d); } inflictself(CURSE);,,MAX3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Unfestation,Unfairly [curse]curse everyone,2,inflict(CURSE); inflictself(CURSE | 2);,,MIN3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,inflictself(CURSE); sfx(~_curse~|~~|0.2);
Unfestation_upgraded,Doubly [curse]curse everyone,2,inflict(CURSE | 2); inflictself(CURSE | 2);,,MIN3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Unfestation_downgraded,Doubly [curse]curse yourself,2,inflictself(CURSE | 2);,,MIN3,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Irony Shield,[shield]Shield everyone|for <d6> damage,2,inflictself(SHIELD| d); inflict(SHIELD| d);,,NORMAL,,ORANGE,add1,complicate,,,0,YES,NO,,,,,,,,,,,,,
Frostbite,Do [ice]<flipd6> damage|Gain [ice]Freeze,2,attack(7 - d| ICE); inflictself(ICE| 1); sfxdamage(target|d);,,ODD,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,,,,,,,,,,,,,
Frostbite_upgraded,Do [ice]<flipd6> damage|Gain [ice]Freeze,2,attack(8 - d| ICE); inflictself(ICE| 1); sfxdamage(target|d);,,ODD|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Frostbite_downgraded,Do [ice]<flipd6> damage,2,attack(d| ICE); sfxdamage(target|d);,,ODD,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Declaw,Do [sword]<d6> damage[;]|and gain [poison]1 poison,2,attack(d); inflictself(POISON| 1); sfxdamage(target|d);,,MAX4,,PURPLE,change_requirements,change_power,,,0,NO,NO,,,,,,,,,,,,,
Declaw_downgraded,Do [sword]1 damage[;]|and gain [poison]1 poison,2,attack(1); inflictself(POISON| 1); sfxdamage(target|d);,,MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Declaw_upgraded,Do [sword]<d6> damage[;]|and gain [poison]1 poison,2,attack(d); inflictself(POISON| 1); sfxdamage(target|d);,,NORMAL,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
Cruel Mercy,In [jinx]5 turns[;]|do [fire]20 nonlethal damage,2,jinx(~Cruel Mercy~|~take [fire]%VAR% nonlethal damage~|~Take [fire]%VAR% nonlethal damage~|~inflict(SURVIVE); attack(%VAR%| FIRE); removestatus(SURVIVE); sfxdamage(null|%VAR%); sfx(\~_fire\~|\~\~|0.2);~|target|self|5|20); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cruel Mercy_upgraded,In [jinx]4 turns[;]|do [fire]20 nonlethal damage,2,jinx(~Cruel Mercy+~|~take [fire]%VAR% nonlethal damage~|~Take [fire]%VAR% nonlethal damage~|~inflict(SURVIVE); attack(%VAR%| FIRE); removestatus(SURVIVE); sfxdamage(null|%VAR%); sfx(\~_fire\~|\~\~|0.2);~|target|self|4|20); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Cruel Mercy_downgraded,In [jinx]6 turns[;]|do [fire]20 nonlethal damage,2,jinx(~Cruel Mercy-~|~take [fire]%VAR% nonlethal damage~|~Take [fire]%VAR% nonlethal damage~|~inflict(SURVIVE); attack(%VAR%| FIRE); removestatus(SURVIVE); sfxdamage(null|%VAR%); sfx(\~_fire\~|\~\~|0.2);~|target|self|6|20); sfx(~_thinghappens~);,,COUNTDOWN,5,PINK,,,,,0,NO,NO,,,,,,,,,,,,,
Concen'tration,In [jinx]<d6> turns[;]|recover <double> health,2,jinx(~Concen'tration~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfx(\~_heal\~);~|self|self|d|(d * 2)); sfx(~_thinghappens~);,,MAX4|FREE2,,PINK,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Concen'tration_upgraded,In [jinx]<d6> turns[;]|recover <triple> health,2,jinx(~Concen'tration+~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfx(\~_heal\~);~|self|self|d|(d * 3)); sfx(~_thinghappens~);,,MAX4|FREE2,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Concen'tration_downgraded,In [jinx]<d6> turns[;]|recover <d6> health,2,jinx(~Concen'tration-~|~heal [heart]%VAR% health~|~Heal [heart]%VAR% health~|~attack(-%VAR%); sfx(\~_heal\~);~|self|self|d|(d * 2)); sfx(~_thinghappens~);,,REQUIRE4,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Nojinx,Do [sword]3 for each [jinx]jinx[;]|removing all jinxes[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 3); givedice(d); sfxdamage(target|jinxcount * 2); for(x in self.status){ if(x.jinx) self.status.remove(x); } for(x in target.status){ if(x.jinx) target.status.remove(x); } sfxdamage(target|d); },,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Nojinx_upgraded,Do [sword]4 for each [jinx]jinx[;]|removing all jinxes[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 4); givedice(d); sfxdamage(target|jinxcount * 2); for(x in self.status){ if(x.jinx) self.status.remove(x); } for(x in target.status){ if(x.jinx) target.status.remove(x); } sfxdamage(target|d); },,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Nojinx_downgraded,Do [sword]2 for each [jinx]jinx[;]|removing all jinxes[;]|then return the dice,2,var jinxcount = getjinx(self) + getjinx(target); if(jinxcount == 0) { target.textparticle(~No effect!~); givedice(d); } else{ attack(jinxcount * 2); givedice(d); sfxdamage(target|jinxcount * 2); for(x in self.status){ if(x.jinx) self.status.remove(x); } for(x in target.status){ if(x.jinx) target.status.remove(x); } sfxdamage(target|d); },,NORMAL,,PINK,,,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Arf Arf Argh,Gain [fury]Fury at the start|of your next turn...?,2,jinx(~Arf_Arf_Arf~|~gain [fury]Fury...?~|~Gain [fury]Fury...?~|~ inflict(FURY | 2); inflict(\~reversenexttarget\~); sfx(\~_fury\~);~|self|self|1|1); sfx(~_thinghappens~);,,EVEN,,RED,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,noeffect();,
Yip Yip Nope,Reroll a dice (maintains|[fury]Fury[] but rebels on it),2,givedice(); if(getstatusself(FURY) > 0){inflictself(~reversenexttarget~);},,MAX4,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,e.maintainfury = true;,
Yip Yip Nope_upgraded,Reroll a dice (maintains|[fury]Fury[] but rebels on it),2,givedice(); if(getstatusself(FURY) > 0){inflictself(~reversenexttarget~);},,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,e.maintainfury = true;,
Yip Yip Nope_downgraded,Reroll a dice|(rebels unless [fury]Furied[]),2,inflict(~stash~ + rand([1 | 2 | 3 | 4 | 5 | 6])); if(getstatusself(FURY) > 0){inflictself(~reversenexttarget~);},,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,e.maintainfury = true;,
Trench Shovel,On 5[;] inflict [weaken]1 weaken|Do [weaken]<d6> damage,2,if(d == 6) { inflict(~weaken~| 2); sfx(~_weaken~); } if(getstatus(ALL) > 0) { attack(d + 3| WEAKEN); sfxdamage(target| d + 3); } else { attack(d| WEAKEN); sfxdamage(target| d); },,NORMAL|FREE1,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Trench Shovel_upgraded,On odd[;] inflict [weaken]1 weaken|Do [weaken]<d6> damage,2,if(d % 2 == 0) { inflict(~weaken~| 2); sfx(~_weaken~); } if(getstatus(ALL) > 0) { attack(d + 3| WEAKEN); sfxdamage(target| d + 3); } else { attack(d| WEAKEN); sfxdamage(d); },,NORMAL|FREE1,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Whip Crack,On 2 or less[;] inflict [fire]<d6> burn|Do [fire]<d6> damage,2,if(d <= 2) { inflict(FIRE); sfx(~_fire~); } attack(d + getstatus(FIRE)| FIRE); sfxdamage(target| d + getstatus(FIRE));,,NORMAL,,RED,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Whip Crack_upgraded,On 2 or less[;] inflict [fire]<d6> burn|Do [fire]<d6> damage,2,if(actualdice[0].basevalue <= 2) { inflict(FIRE); sfx(~_fire~); } attack(d + getstatus(FIRE)| FIRE); sfxdamage(target| d + getstatus(FIRE));,,NORMAL|FREE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Mourn,Do [ice]<d6> -1 damage|Inflict [ice]Freeze,2,attack(d| ICE); sfxdamage(target| d -1); inflict(~ice~);,,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Mourn_upgraded,Do [ice]<d6> damage|Inflict [ice]Freeze,2,attack(d| ICE); sfxdamage(target| d -1); inflict(~ice~);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Spinning Ball,Reroll the dice|Do [sword]value as damage,2,var r = rand([1|2|3|4|5|6]); givedice(r); sfx(~diceroll~); attack(r); sfxdamage(target| r);,,MAX4,,RED,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Spinning Ball_upgraded,Reroll the dice|Do [sword]value +1 as damage,2,var r = rand([1|2|3|4|5|6]); givedice(r); sfx(~diceroll~); attack(r + 1); sfxdamage(target| r + 1);,,MAX4|FREE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Glowing Lantern,Gain [lantern]Glow,2,inflictself(~glow~); sfx(~useitem~);,,MAX4,,YELLOW,simplify,decreaserange,,,0,YES,NO,,,,,,,,,,,,,
Mirror Room,Gain +1 dice,2,self.extradice++; sfx(~magic_gaindice~);,,EVEN|EVEN,,PURPLE,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Mirror Room_upgraded,Gain +2 dice,2,self.extradice+= 2; sfx(~magic_gaindice~);,,EVEN|EVEN,,PURPLE,,,,,0,YES,NO,,1,,,,,,,,,,,
Voodoo Pin,Gain [voodoo]Voodoo 2,2,inflictself(~voodoo~ | 2);,,COUNTDOWN,8,PURPLE,change_power,change_power,,_curse,,YES,,,,,,,,,,,,,,
Voodoo Pin_upgraded,Gain [voodoo]Voodoo 3,2,inflictself(~voodoo~ | 3);,,COUNTDOWN,8,PURPLE,,,,_curse,,YES,,,,,,,,,,,,,,
Voodoo Pin_downgraded,Gain [voodoo]Voodoo,2,inflictself(~voodoo~);,,COUNTDOWN,8,PURPLE,,,,_curse,,YES,,,,,,,,,,,,,,
Acupuncture,Gain a random good status|and a random bad one,1,inflictself(rand([~fire~|~ice~|~shock~|~weaken~|~poison~|~curse~|~lock~|~ncr_vanish~|~haunted~])); inflictself(rand([REDUCE|THORNS|REEQUIPNEXT|FURY|DODGE|~voodoo~]));,,NORMAL,,PURPLE,change_power,complicate,,_damage,,YES,,,,,,,,,,,,,,
Acupuncture_upgraded,Gain two random good statuses|and a random bad one,1,inflictself(rand([~fire~|~ice~|~shock~|~weaken~|~poison~|~curse~|~lock~|~ncr_vanish~|~haunted~])); inflictself(rand([REDUCE|THORNS|REEQUIPNEXT|FURY|DODGE|~voodoo~])); inflictself(rand([REDUCE|THORNS|REEQUIPNEXT|FURY|DODGE|~voodoo~]));,,NORMAL,,PURPLE,,,,_damage,,YES,,,,,,,,,,,,,,
Accursed Needle,Do [sword]<d6> damage[;]|on 6[;] gain [voodoo]Voodoo 2,2,attack(d); if(d == 6){ inflictself(~voodoo~ | 2); } sfxdamage(target | d);,,NORMAL,,PURPLE,change_power,change_power,,_curse,,,,,,,,,,,,,,,,
Accursed Needle_upgraded,Do [sword]<d6> damage[;]|on 6[;] gain [voodoo]Voodoo 3,2,attack(d); if(d == 6){ inflictself(~voodoo~ | 3); } sfxdamage(target | d);,,NORMAL,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Accursed Needle_downgraded,Do [sword]<d6> damage[;]|on 6[;] gain [voodoo]Voodoo,2,attack(d); if(d == 6){ inflictself(~voodoo~); } sfxdamage(target | d);,,NORMAL,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Hexed Needle,Do [sword]<d6> damage[;]|on 4[;] gain [voodoo]Voodoo,2,attack(d); if(d == 4){ inflictself(~voodoo~ | 2); } sfxdamage(target | d);,,MAX4,,PURPLE,change_power,change_power,,_curse,,,,,,,,,,,,,,,,
Hexed Needle_upgraded,Do [sword]<d6> damage[;]|on 4[;] gain [voodoo]Voodoo,2,attack(d); if(d == 6){ inflictself(~voodoo~ | 2); } sfxdamage(target | d);,,MAX4|FREE2,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Hexed Needle_downgraded,Do [sword]<d6> damage[;]|on 2[;] gain [voodoo]Voodoo,2,attack(d); if(d == 2){ inflictself(~voodoo~); } sfxdamage(target | d);,,MAX2,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Hexed Needle_weakened,Do [sword]<d6> damage[;]|on 2[;] gain [voodoo]Voodoo,2,attack(d); if(d == 4){ inflictself(~voodoo~); } sfxdamage(target | d);,,MAX2|FREE2,,PURPLE,,,,_curse,,,,,,,,,,,,,,,,
Spirit Prayer,Heal [heal]2 health|per [voodoo]Voodoo you have,2,pierceattackself(-2 * getstatusself(~voodoo~)); removestatusself(~voodoo~ | getstatusself(~voodoo~));,,ODD|EVEN,,GREEN,change_power,change_power,,_heal,,YES,,,,,,,,,,,,,,
Spirit Prayer_upgraded,Heal [heal]3 health|per [voodoo]Voodoo you have,2,pierceattackself(-3 * getstatusself(~voodoo~)); removestatusself(~voodoo~ | getstatusself(~voodoo~));,,ODD|EVEN,,GREEN,,,,_heal,,YES,,,,,,,,,,,,,,
Spirit Prayer_downgraded,Heal [heal]2 health|per [voodoo]Voodoo you have,2,pierceattackself(-2 * getstatusself(~voodoo~)); removestatusself(~voodoo~ | getstatusself(~voodoo~));,,ODD|RANGE25|EVEN,,GREEN,,,,_heal,,YES,,,,,,,,,,,,,,
U Do Voodoo,Gain [voodoo]Voodoo,2,inflictself(~voodoo~);,,RANGE25,,PURPLE,change_power,change_power,,_heal,,YES,,,,,,,,,,,,,,
U Do Voodoo_upgraded,Gain [voodoo]Voodoo,2,inflictself(~voodoo~);,,NORMAL,,PURPLE,,,,_heal,,YES,,,,,,,,,,,,,,
U Do Voodoo_downgraded,Gain [voodoo]Voodoo,2,inflictself(~voodoo~);,,RANGE34,,PURPLE,,,,_heal,,YES,,,,,,,,,,,,,,
Ritual Sacrifice,Divide enemy health|by your [voodoo]Voodoo|[gray](once per battle)[],2,target.hp = target.hp / getstatusself(~voodoo~);,,COUNTDOWN,48,WHITE,threequartercountdown,noeffect,,_curse,,,YES,,,,,,,,,,,,,
Vootwo,Double your [voodoo]Voodoo,2,inflictself(~voodoo~ | getstatusself(~voodoo~)); if(getstatusself(~voodoo~) == 0){inflictself(~voodoo~ | 2);},,COUNTDOWN,16,PURPLE,threequartercountdown,change_power,,_heal,,YES,,,,,,,,,,,,,,
Vootwo_downgraded,Increase your [voodoo]Voodoo| by 50 percent,2,inflictself(~voodoo~ | getstatusself(~voodoo~) / 2); if(getstatusself(~voodoo~) == 0){inflictself(~voodoo~ | 2);},,COUNTDOWN,16,PURPLE,,,,_heal,,YES,,,,,,,,,,,,,,
Pressure Point,Inflict [weaken]Weaken?|equal to your [voodoo]Voodoo[;]|remove all your [voodoo]Voodoo,2,inflict(~alternate_weaken~ | getstatusself(~voodoo~)); removestatusself(~voodoo~ | getstatusself(~voodoo~));,,MAX4|MIN3,,ORANGE,simplify,change_power,,_weaken,,,,,,,,,,,,,,,,
Pressure Point_downgraded,Inflict [weaken]Weaken?|equal to your [voodoo]Voodoo[;]|remove all your [voodoo]Voodoo,2,inflict(~alternate_weaken~ | getstatusself(~voodoo~)); removestatusself(~voodoo~ | getstatusself(~voodoo~) / 2);,,MAX2|MIN5,,ORANGE,,,,_weaken,,,,,,,,,,,,,,,,
Ominous Chant,Gain [voodoo]Voodoo[;]|return both dice,2,inflictself(~voodoo~); givedice(d); givedice(d); sfx(~_curse~);,,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,_curse,,YES,,,,,,,,,,,,,,
Ominous Chant_upgraded,Gain [voodoo]Voodoo[;]|return the die,2,inflictself(~voodoo~); givedice(d); sfx(~_curse~);,,ODD,,PURPLE,,,,_curse,,YES,,,,,,,,,,,,,,
Ominous Chant_downgraded,Gain [voodoo]Voodoo[;]|gain a <slotdoubles>,2,inflictself(~voodoo~); givedice(d); sfx(~_curse~);,,DOUBLES|DOUBLES,,PURPLE,,,,_curse,,YES,,,,,,,,,,,,,,
Ball o' the Wisp,Inflict [vanish]Vanish 2[;]|get a new dice,2,inflict(~ncr_vanish~ | 2); givedice();,,MAX3,,PINK,change_power,change_power,,_vanish,0,NO,NO,,,,,,,,,,,,,givedice();
Ball o' the Wisp_upgraded,Inflict [vanish]Vanish 2[;]|get a new dice,2,inflict(~ncr_vanish~ | 2); givedice();,,MAX4,,PINK,,,,_vanish,0,NO,NO,,,,,,,,,,,,,givedice();
Ball o' the Wisp_downgraded,Inflict [vanish]Vanish 2,2,inflict(~ncr_vanish~ | 2);,,MAX3,,PINK,,,,_vanish,0,NO,NO,,,,,,,,,,,,,
Flying Ball,Inflict [curse]Curse[;]|get a new dice,2,inflict(CURSE); givedice();,,MAX3,,WHITE,change_power,change_power,,_curse,0,NO,NO,,,,,,,,,,,,,givedice();
Flying Ball_upgraded,Inflict [curse]Curse[;]|get a new dice,2,inflict(CURSE); givedice();,,MAX4,,WHITE,,,,_curse,0,NO,NO,,,,,,,,,,,,,givedice();
Flying Ball_downgraded,Inflict [curse]Curse,2,inflict(CURSE);,,MAX3,,WHITE,,,,_curse,0,NO,NO,,,,,,,,,,,,,
Pin Ball,Gain [voodoo]Voodoo[;]|get a new dice,2,inflictself(~voodoo~); givedice();,,MAX3,,PURPLE,change_power,change_power,,_curse,0,YES,NO,,,,,,,,,,,,,givedice();
Pin Ball_upgraded,Gain [voodoo]Voodoo[;]|get a new dice,2,inflictself(~voodoo~); givedice();,,MAX4,,PURPLE,,,,_curse,0,YES,NO,,,,,,,,,,,,,givedice();
Pin Ball_downgraded,Gain [voodoo]Voodoo,2,inflictself(~voodoo~);,,MAX3,,PURPLE,,,,_curse,0,YES,NO,,,,,,,,,,,,,
Voodoom,Do [sword]<d6> damage[;]|+[sword]1 per [voodoo]Voodoo you have,2,attack(d + getstatusself(~voodoo~)); sfxdamage(target | d + getstatusself(~voodoo~));,,NORMAL,,PURPLE,change_power,change_power,,_curse,0,NO,NO,,,,,,,,,,,,,
Voodoom_upgraded,Do [sword]<d6> damage[;]|+[sword]2 per [voodoo]Voodoo you have,2,attack(d + getstatusself(~voodoo~) + getstatusself(~voodoo~)); sfxdamage(target | d + getstatusself(~voodoo~) + getstatusself(~voodoo~));,,NORMAL,,PURPLE,,,,_curse,0,NO,NO,,,,,,,,,,,,,
Voodoom_downgraded,Do [sword]<d6> damage[;]|+[sword]1 per [voodoo]Voodoo you have,2,attack(d + getstatusself(~voodoo~)); sfxdamage(target | d + getstatusself(~voodoo~));,,MAX3,,PURPLE,,,,_curse,0,NO,NO,,,,,,,,,,,,,
Voodice,Gain 1 [voodoo]Voodoo|Dice value +1 per [voodoo]Voodoo,2,inflictself(~voodoo~); givedice(d + getstatusself(~voodoo~));,,MAX5,,PURPLE,change_power,complicate,,_curse,,YES,,,,,,,,,,,,,,
Voodice_upgraded,Gain 1 [voodoo]Voodoo|Dice value +2 per [voodoo]Voodoo,2,inflictself(~voodoo~); givedice(d + getstatusself(~voodoo~) + getstatusself(~voodoo~));,,MAX5,,PURPLE,,,,_curse,,YES,,,,,,,,,,,,,,
Soul Sap,Drain [heart]health equal|to half your [voodoo]Voodoo,2,drain(getstatusself(~voodoo~) / 2; sfx(~_damage~);,,COUNTDOWN,6,PURPLE,change_power,noeffect,,_heal,,NO,,,,,,,,,,,,,,
Soul Sap_upgraded,Drain [heart]health equal|to your [voodoo]Voodoo,2,drain(getstatusself(~voodoo~)); sfx(~_damage~);,,COUNTDOWN,6,PURPLE,,,,_heal,,NO,,,,,,,,,,,,,,
Operator,Do [sword]<d6> damage|In two turns[;] receive a <d6>,2,attack(d); jinx(~Operator~|~receive a %VAR%~|~Receive a %VAR%~|~inflict(\~stash\~+%VAR%); sfx(\~magic_gaindice\~); ~|self|self|2|d); sfx(~_thinghappens~);,,MAX5,,PINK,simplify,complicate,,_damage,0,NO,NO,,,,,,,,,,,,,
Mirror on a Stick,Do [sword]<d6> damage. On 6[;] in|two turns[;] +1 [dice] this fight,2,attack(d); sfxdamage(target|d); if(d == 6) { jinx(~Mirror on a Stick~|~gain an extra dice this fight~|~Gain an extra dice this fight~|~target.extradice++; sfx(\~magic_gaindice\~);~|self|self|2|d);  sfx(~_thinghappens~); } /*in a very early alpha i wasn't present for (before the game even had real graphics) counterfeit was called 'mirror on a stick'*/,,NORMAL,,PURPLE,reducesize,change_power,,,,,,,,if(d == 6) { jinx(~Mirror on a Stick~|~gain an extra dice this fight~|~Gain an extra dice this fight~|~self.extradice++; sfx(\~magic_gaindice\~);~|self|self|2|d);  sfx(~_thinghappens~); },,,,,,,,,,
Mirror on a Stick_downgraded,Do [sword]<d6> damage. On 6[;] in|two turns[;] +1 [dice] that turn,2,attack(d); sfxdamage(target|d); if(d == 6) { jinx(~Mirror on a Stick-~|~gain an extra dice this turn~|~Gain an extra dice this turn~|~inflict(\~stash\~ + rand([1|2|3|4|5|6])); sfx(\~magic\~);~|self|self|2|d);  sfx(~_thinghappens~); },,NORMAL,,PURPLE,,,,,,,,,,if(d == 6) { jinx(~Mirror on a Stick-~|~gain an extra dice this turn~|~Gain an extra dice this turn~|~inflict(\~stash\~ + rand([1|2|3|4|5|6])); sfx(\~magic\~);~|self|self|2|d);  sfx(~_thinghappens~); },,,,,,,,,,
Mirror on a Stick_weakened,Do [sword]<d6> damage. On 6[;] in|two turns[;] +1 [dice] that turn,2,attack(d); sfxdamage(target|d); if(d == 6) { jinx(~Mirror on a Stick-~|~gain an extra dice this turn~|~Gain an extra dice this turn~|~inflict(\~stash\~ + rand([1|2|3|4|5|6])); sfx(\~magic\~);~|self|self|2|d);  sfx(~_thinghappens~); },,NORMAL,,PURPLE,,,,,,,,,,if(d == 6) { jinx(~Mirror on a Stick-~|~gain an extra dice this turn~|~Gain an extra dice this turn~|~inflict(\~stash\~ + rand([1|2|3|4|5|6])); sfx(\~magic\~);~|self|self|2|d);  sfx(~_thinghappens~); },,,,,,,,,,
Mirror on a Stick_deckupgrade,Do [sword]<d6> damage. On 6[;]|[]+1 dice this fight,2,attack(d); sfxdamage(target|d); if(d == 6) { self.extradice++; sfx(~magic_gaindice~|~~|0.1); },,NORMAL,,PURPLE,,,,,,,,,,if(d == 6) { self.extradice++; sfx(~magic_gaindice~|~~|0.1); },,,,,,,,,,
Prod,Get a new dice. If limit is|fully charged[;] do [sword]5,2,givedice(); if(self.limitvalue != null && self.limitvalue == self.limitmax) { attack(5); sfxdamage(target|5); },,MAX3,,YELLOW,increaserange,decreaserange,,,,YES,,,,givedice();,,,,,,,if(self.limitvalue != null && self.limitvalue == self.limitmax) { e.castdirection = 1; } else { e.castdirection = -1; },,,
Bad Damage,Do [sword]<d6> damage. If you're|at full HP[;] return the dice,2,attack(d); sfxdamage(target|d); if(self.hp == self.maxhp) givedice(d);,,NORMAL,,RED,change_power,change_power,,,,,,,,if(self.hp == self.maxhp) givedice(d);,,,,,,,,,,
Bad Damage_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,,NORMAL,,RED,,,,,,,,,,,,,,,,,,,,
Bad Damage_upgraded,Do [sword]<d6> damage. If 3 points|or less from full HP[;] return dice,2,attack(d); sfxdamage(target|d); if(self.hp >= self.maxhp - 3) givedice(d);,,NORMAL,,RED,,,,,,,,,,if(self.hp == self.maxhp) givedice(d);,,,,,,,,,,
Cheap Shot,Do [sword]<d6> damage[;] on 3|or lower[;] return the dice,2,attack(d); sfxdamage(target|d); if(actualdice[0].basevalue < 4) givedice(actualdice[0].basevalue); /*too much like quarterstaff*/,,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,,,if(actualdice[0].basevalue < 4) givedice(actualdice[0].basevalue);,,,,,,,,,,
Cheap Shot_downgraded,Do [sword]<d6> damage[;] on 3|or lower[;] set a dice to <d6>,2,attack(d); sfxdamage(target|d); if(actualdice[0].basevalue < 4) {var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != actualdice[0].basevalue){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(actualdice[0].basevalue| self.screenposition()); } },,NORMAL,,RED,,,,none,0,NO,NO,,,if(actualdice[0].basevalue < 4) {var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != actualdice[0].basevalue){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(actualdice[0].basevalue| self.screenposition()); } },,,,,,,,,,
Cheap Shot_upgraded,Do [sword]<d6> damage[;]|on odd[;] return the dice,2,attack(d); sfxdamage(target|d); if(actualdice[0].basevalue % 2 == 1) givedice(actualdice[0].basevalue);,,NORMAL,,RED,,,,none,0,NO,NO,,,if(actualdice[0].basevalue % 2 == 1) givedice(actualdice[0].basevalue);,,,,,,,,,,
Tap,Snap the card to the right|of this[;] if it's available,2,,,EVEN,,ORANGE,simplify,complicate,,none,,YES,,,,,,,,,,,var snapcard = null; var altequipment = [for(eq in self.equipment) if(eq.onscreen()) eq]; trace(altequipment); var _snapcard = null; _snapcard = altequipment[altequipment.indexOf(e) + 1]; trace(_snapcard); if(_snapcard != null) snapcard = _snapcard; if(snapcard != null && snapcard.onscreen() && snapcard.isready() && snapcard.slots.length > 0) { sfx(~jester_snap~); snapcard.animate(~snap~); var i = 0; for(slot in snapcard.slots) { trace(snapcard.slots); trace(slot); var snapvalue = 6; if(slot == ~ODD~) snapvalue = 5; if((slot + ~~).substr(0|3) == ~MAX~) snapvalue = (slot + ~~).substr(3|1) - 0; if((slot + ~~).substr(0|5) == ~RANGE~) snapvalue = (slot + ~~).substr(6|1) - 0; if(snapcard.remainingcountdown > 6) snapcard.remainingcountdown = 6; var snapdice = new elements.Dice(); snapdice.basevalue = snapvalue; self.dicepool.push(snapdice); snapcard.assigndice(snapdice|i); if(snapcard.remainingcountdown == 0 && (snapcard.needstotal == 0 # snapcard.needstotal == snapcard.getpower()) && (!snapcard.needsdoubles # [for(dice in snapcard.assigneddice) dice.basevalue == 6].indexOf(false) == -1)) { snapcard.doequipmentaction(self|target|1|snapcard.assigneddice|0|false|true); } } } else { self.textparticle(~No effect!~); } /*high concept donated by cody*/,,e.preventdefault = true; e.maintainfury = true;,
Saving Throw,Get a new dice. On 1[;]|get a dice over 3,2,if(d == 1) { givedice(rand([4|5|6])); } else givedice();,,MAX3,,GREEN,change_power,change_power,,,,YES,,,,,,,,,,,,,,
Saving Throw_upgraded,Get a dice over 3,2,givedice(rand([4|5|6]));,,MAX3,,GREEN,,,,,,YES,,,,,,,,,,,,,,
Saving Throw_downgraded,Get a new dice. On 1[;]|get a dice 3 or less,2,if(d == 1) { givedice(rand([1|2|3])); } else givedice();,,MAX3,,GREEN,,,,,,YES,,,,,,,,,,,,,,
Table Flip,Reroll dice that aren't <d6>[;]|and return this dice,2,var c = 0; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ mydice.animatereroll(rand([1|2|3|4|5|6])| self.screenposition()| c * 0.05); c++; } } givedice(d);,,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Table Flip_downgraded,Reroll dice that aren't <d6>[;]|and return this dice,2,var c = 0; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ mydice.animatereroll(rand([1|2|3|4|5|6])| self.screenposition()| c * 0.05); c++; } } givedice(d);,,ODD,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Table Flip_upgraded,Reroll dice that aren't <d6>[;]|and return this dice|,2,var c = 0; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != d){ mydice.animatereroll(rand([1|2|3|4|5|6])| self.screenposition()| c * 0.05); c++; } } givedice(d);,,NORMAL,,GREEN,,,,none,2,YES,NO,,,,,,,,,,,,,
Luckpick,Split a dice. 33% chance to|return original dice[;] too,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds = 66; } if(getstatusself(~luck+~) > 0){ odds = 100; } var s = split(d); if(chance(odds)) { self.textparticle(~Success!~); givedice([d|s[0]|s[1]]|~splitdice~); } else { givedice(s|~splitdice~); },,NORMAL,,GREEN,change_power,change_function,,none,0,YES,NO,,,,,,,,,,,,,
Luckpick_upgraded,Split a dice. 66% chance to|return original dice[;] too,2,var odds = 66; if(getstatusself(~luck~) > 0){ odds = 100; } if(getstatusself(~luck+~) > 0){ odds = 100; } var s = split(d); if(chance(odds)) { self.textparticle(~Success!~); givedice([d|s[0]|s[1]]|~splitdice~); } else { givedice(s|~splitdice~); },,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Luckpick_downgraded,Split a dice. 33% chance to|return just original dice,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds = 66; } if(getstatusself(~luck+~) > 0){ odds = 100; } var s = split(d); if(chance(odds)) { self.textparticle(~No effect!~); givedice(d); } else { givedice(s|~splitdice~); },,NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Welder,Combine with a random|dice[;] return this dice,2,var c = 0; var extradice = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()) { dicelist.push(mydice); } } if(dicelist.length > 0) { var thisdice = rand(dicelist); if (thisdice.basevalue + d > 6){ extradice.push((thisdice.basevalue + d) % 6); if(extradice[extradice.length - 1] == 0) { extradice[extradice.length - 1] = 6; } thisdice.animatereroll(6| self.screenposition()| c * 0.05); } else { thisdice.animatereroll((thisdice.basevalue + d)| self.screenposition()| c * 0.05); c++; } givedice(extradice); } } givedice(d); sfx(~combinedice~);,,MAX4,,GREEN,change_power,change_function,,none,0,YES,NO,,1,,,,,,,,,,,
Welder_upgraded,Combine dice[;] and|return one of them,2,var randice = rand(actualdice); if(d > 0) givedice(d|~combinedice~); givedice(randice.basevalue);,,MAX4|NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Welder_downgraded,Combine with a|random dice,2,var c = 0; var extradice = []; var dicelist = []; if(self.dicepool.length > 0) { for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween()) { dicelist.push(mydice); } } if(dicelist.length > 0) { var thisdice = rand(dicelist); if (thisdice.basevalue + d > 6){ extradice.push((thisdice.basevalue + d) % 6); if(extradice[extradice.length - 1] == 0) { extradice[extradice.length - 1] = 6; } thisdice.animatereroll(6| self.screenposition()| c * 0.05); } else { thisdice.animatereroll((thisdice.basevalue + d)| self.screenposition()| c * 0.05); c++; } givedice(extradice); } } sfx(~combinedice~);,,MAX4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Slim Jim,Split a <double> in two,2,if(d > 6) { self.textparticle(~stop using booster pack!!~); } else { if(d < 4){ var doub = d * 2; givedice(split(doub)| ~splitdice~); } else if(d == 4){ var r = rand([6|5|4|3|2]); givedice([r|8 - r]| ~splitdice~); } else if(d == 5){ var r = rand([6|5|4]); givedice([r|10 - r]| ~splitdice~); } else { givedice([6|6]| ~splitdice~); } },,MAX4,,GREEN,simplify,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Slim Jim_downgraded,Split a <d6> in two,2,givedice(split(d)| ~splitdice~);,,MAX4,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Innovate,Get a dice you don't have,2,var notseen = [1|2|3|4|5|6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) {notseen.remove(mydice.basevalue);} } if (notseen.length == 0) {givedice(d); self.textparticle(~You've got all dice!~);} else { shuffle(notseen); givedice(notseen[0]); },,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Innovate_upgraded,Get a dice you don't have|,2,var notseen = [1|2|3|4|5|6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) {notseen.remove(mydice.basevalue);} } if (notseen.length == 0) {givedice(d); self.textparticle(~You've got all dice!~);} else { shuffle(notseen); givedice(notseen[0]); },,NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
Innovate_downgraded,Get a 4[;] if you don't have one,2,var flag = true; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue == 4) {flag = false; } } if (flag == false) {givedice(d); self.textparticle(~You've got a 4!~);} else { givedice(4); },,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Dime,Roll 2 sixes,2,givedice([6|6]); /* 'dime a dozen' */,,EVEN|EVEN,,GREEN,change_power,change_power,,,,YES,,,,,,,,,,,,,,
Dime_downgraded,Roll 2 sixes,2,givedice([6|6]);,,REQUIRE6|EVEN,,GREEN,,,,,,YES,,,,,,,,,,,,,,
Dime_upgraded,Roll 2 sixes|,2,givedice([6|6]);,,EVEN|EVEN,,GREEN,,,,,2,YES,,,,,,,,,,,,,,
Coldron,Take [ice]2 damage[;]|get 2 new dice,2,attackself(2|ICE); sfx(~_ice~); givedice([for(i in 0...2) rand([1|2|3|4|5|6])]);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,,YES,,,,,,,,,,,,,,
Coldron_upgraded,Take [ice]3 damage[;]|get 3 new dice,2,attackself(3|ICE); sfx(~_ice~); givedice([for(i in 0...3) rand([1|2|3|4|5|6])]);,,NORMAL,,BRIGHTCYAN,,,,,,YES,,,,,,,,,,,,,,
Coldron_downgraded,Take [ice]1 damage[;]|get a new dice,2,attackself(1|ICE); sfx(~_ice~); givedice();,,NORMAL,,BRIGHTCYAN,,,,,,YES,,,,,,,,,,,,,,
Tootsie Pop,Reroll the dice. On 6[;]|instead return two 6s,2,if(d == 6) givedice([6|6]); else givedice();,,NORMAL,,ORANGE,change_power,change_power,,,,YES,,,,,,,,,,,,,,
Tootsie Pop_upgraded,Roll a higher dice. On 6[;]|instead return two 6s,2,if(d >= 6) givedice([6|6]); else givedice(rand([6|5|4|3|2|1].splice(0|6-d))); /*awful. who wrote this*/,,NORMAL,,ORANGE,,,,,,YES,,,,,,,,,,,,,,
Tootsie Pop_downgraded,Reroll the dice. On 6[;]|instead return two 1s,2,if(d == 6) givedice([1|1]); else givedice();,,NORMAL,,ORANGE,,,,,,YES,,,,,,,,,,,,,,
Bumpbomb,Do [sword]<d6> damage. On 6[;]|bump all dice below 6,2,attack(d); if(d == 6) { var c = 0; for(mydice in self.dicepool){ if(mydice.available() && !mydice.intween() && mydice.basevalue != 6) { mydice.animatereroll(mydice.basevalue + 1|self.screenposition()|c * 0.05); } } } /*if(d == 6) { var c = 0; var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue >= 6){ extradice.push(1); mydice.animatereroll(6| self.screenposition()| c * 0.05); } else { mydice.animatereroll((mydice.basevalue + 1)| self.screenposition()| c * 0.05); } c++; } } givedice(extradice); } yeah i literally just copypasted megabump into here. NO fear; baby! */,,NORMAL,,GREEN,change_power,change_function,,_damage,0,NO,NO,,,,,,,,,,,,,
Bumpbomb_upgraded,Do [sword]<d6> damage. On 5 or 6[;]|bump all dice below 6,2,attack(d); if(d == 6 # d == 5) { var c = 0; for(mydice in self.dicepool){ if(mydice.available() && !mydice.intween() && mydice.basevalue != 6) { mydice.animatereroll(mydice.basevalue + 1|self.screenposition()|c * 0.05); } } },,NORMAL,,GREEN,,,,_damage,0,NO,NO,,,,,,,,,,,,,
Bumpbomb_downgraded,Do [sword]<d6> damage. On 6[;]|bump highest non-6 dice,2,attack(d); if(d == 6 && self.dicepool.length > 0) { var max = 0; for (mydice in self.dicepool){ if (mydice.available() && !mydice.intween() && mydice.basevalue > max && mydice.basevalue != 6) { max = mydice.basevalue; } } for (mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == max) { mydice.animatereroll(mydice.basevalue + 1); break; } } } /*if(d == 6 && self.dicepool.length > 0) { var max = 0; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue > max) { max = mydice.basevalue; } } for (mydice in self.dicepool){ if(mydice.available() && mydice.basevalue == max) { if(mydice.basevalue != 6) { mydice.animatereroll(mydice.basevalue + 1); break; } else { mydice.animatereroll(6); givedice(1); break; } } } }*/,,NORMAL,,GREEN,,,,_damage,0,NO,NO,,,,,,,,,,,,,
Hijack,Split a dice in two[;]|on 1[;] do [sword]3 instead,2,if(d==1){ attack(3); sfxdamage(target|3); }; else { givedice(split(d)| ~splitdice~); };,,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,,,givedice(split(d)| ~splitdice~);,,,,,,,if(d==1){ e.castdirection = 1; }; else { e.castdirection = -1; };,,,
Hijack_upgraded,Split a dice in two[;]|on 1[;] also do [sword]3 damage,2,if(d==1){ attack(3); sfxdamage(target|3); }; givedice(split(d)| ~splitdice~);,,NORMAL,,GREEN,,,,,0,YES,NO,,,givedice(split(d)| ~splitdice~);,,,,,,,if(d==1){ e.castdirection = 1; }; else { e.castdirection = -1; };,,,
Hijack_downgraded,Split a dice in two,2,givedice(split(d)| ~splitdice~);,,MIN2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Sharpened Rosary,Do [sword]<d6> damage. On 1[;]|gain a random blessing,2,attack(d); if(d == 1) {  var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD|FURY|REDUCE|REEQUIPNEXT|DODGE]); }else { randomstatus = rand([SHIELD|REDUCE|REEQUIPNEXT|DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus | a); if(randomstatus == REDUCE) randomstatus = SHIELD; if(randomstatus == REEQUIPNEXT) randomstatus = ~reduce~; sfx(~_~ + randomstatus.toLowerCase()|~~|0.2); },,ODD,,PURPLE,simplify,change_power,,_damage,0,,,,,,,,,,,,,,,
Sharpened Rosary_downgraded,Do [sword]<d6> damage. On 1[;]|gain a random blessing,2,attack(d); if(d == 1) {  var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD|FURY|REDUCE|REEQUIPNEXT|DODGE]); }else { randomstatus = rand([SHIELD|REDUCE|REEQUIPNEXT|DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus | a); if(randomstatus == REDUCE) randomstatus = SHIELD; if(randomstatus == REEQUIPNEXT) randomstatus = ~reduce~; sfx(~_~ + randomstatus.toLowerCase()|~~|0.2); },,REQUIRE1,,PURPLE,,,,_damage,0,,,,,,,,,,,,,,,
Bop Bop,Do [sword]3 damage. On 6[;]|drain [heart]2 health instead,2,if(d == 6) { drain(2); sfx(~_drain~); } else { attack(3); sfxdamage(target|3); } /*originally 'on snap; drain 2 health instead' but you will not believe how difficult it is to *replace* the effect of a card on snap rather than adding to it: https://github.com/TerryCavanagh/diceydungeons.com/issues/1889*/,,MIN3,,PINK,change_power,change_power,,none,0,,,,,,,,,,,,,,,
Bop Bop_upgraded,Do [sword]3 damage. On 6[;]|drain [heart]3 health instead,2,if(d == 6) { drain(3); sfx(~_drain~); } else { attack(3); sfxdamage(target|3); },,MIN3,,PINK,,,,none,0,,,,,,,,,,,,,,,
Bop Bop_downgraded,Do [sword]3 damage. On 6[;]|heal [heart]2 health instead,2,if(d == 6) { attackself(-2); sfx(~_heal~); } else { attack(3); sfxdamage(target|3); },,MIN3,,PINK,,,,none,0,,,,,if(d == 6) { attackself(-2); sfx(~_heal~); },,,,,,,if(d == 6) { e.castdirection = -1; } else { e.castdirection = 1; },,,
Zoop Zoop,Do [sword]<d6> damage|[sword]3 less if above 3,2,attack(d > 3 ? d - 3 : d); sfxdamage(target|d > 3 ? d - 3 : d);,,NORMAL,,PURPLE,change_power,change_power,,none,0,,,,1,,,,,,,,,,,
Zoop Zoop_upgraded,Do [sword]<d6> damage|[sword]2 less if above 2,2,attack(d > 2 ? d - 2 : d); sfxdamage(target|d > 2 ? d - 2 : d);,,NORMAL,,PURPLE,,,,none,0,,,,,,,,,,,,,,,
Zoop Zoop_downgraded,Do [sword]<d6> damage|[sword]3 less if above 3,2,attack(d > 3 ? d - 3 : d); sfxdamage(target|d > 3 ? d - 3 : d);,,MAX4,,PURPLE,,,,none,0,,,,,,,,,,,,,,,
Veneer,Charge limit break by [confuse]2,2,sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 2; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },,NORMAL,,ORANGE,change_power,change_power,,none,0,YES,,,,,,,,,,,,,,
Veneer_upgraded,Charge limit break by [confuse]3,2,sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 3; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },,NORMAL,,ORANGE,,,,none,0,YES,,,,,,,,,,,,,,
Veneer_downgraded,Charge limit break by [confuse]1,2,sfx(~_cure~); if(self.limitvalue != null && self.limitmax != null) { self.limitvalue += 1; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } } /*ultimately i quite like what i'd ended up with for ncr jester. by settling for bop bop draining on 6 rather than on snap; it essentially takes on the roles of bop *and* sweets both at once while not being redundant to zoop zoop (since zoop zoop does less damage on 4s and 5s); which allows me to replace sweets with an item that doesn't heal whatsoever*/,,NORMAL,,ORANGE,,,,none,0,YES,,,,,,,,,,,,,,
Smart Spike,Do [sword]<d6> damage. At half|HP or lower[;] [shield]<d6> instead,2,if(self.hp <= (self.maxhp / 2)) { inflictself(SHIELD|d); sfx(~_shield~); } else { attack(d); sfxdamage(target|d); },,MAX5,,RED,change_power,complicate,,none,0,NO,NO,,1,,,,,,,,if(self.hp <= (self.maxhp / 2)) { e.castdirection = -1; } else { e.castdirection = 1; },,,
Smart Spike_upgraded,Do [sword]<d6> dmg. At half|HP or less[;] [shield]<d6> instead,2,if(self.hp <= (self.maxhp / 2)) { inflictself(SHIELD|d); sfx(~_shield~); } else { attack(d); sfxdamage(target|d); },,NORMAL|FREE1,,RED,,,,none,0,NO,NO,,,,,,,,,,if(self.hp <= (self.maxhp / 2)) { e.castdirection = -1; } else { e.castdirection = 1; },,,
Breaking Point,Do [sword]<d6> damage[;]|raise limit break by [confuse]<d6>,2,attack(d); sfxdamage(target|d); if(self.limitvalue != null && self.limitmax != null) { sfx(~_cure~); self.limitvalue += d; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },,MAX3,,YELLOW,increaserange,change_power,,none,,,,,1,if(self.limitvalue != null && self.limitmax != null) { sfx(~_cure~); self.limitvalue += d; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },,,,,,,,,,
Breaking Point_downgraded,Do [sword]<d6> damage[;]|take [sword]<d6> damage,2,attack(d); sfxdamage(target|d); attackself(d); sfx(~_heal~|~~|0.2);,,MAX3,,YELLOW,,,,none,,,,,,attackself(d); sfx(~_heal~);,,,,,,,,,,
Magic Cyanide,Do [sword]2 damage. If above 4[;]|inflict [poison]2 poison instead,2,if(d <= 4) { attack(2); sfxdamage(target|2); } else { inflict(POISON|2); sfx(~_poison~); },,MIN3,,PURPLE,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,
Magic Cyanide_upgraded,Do [sword]2 damage. If above 4[;]|inflict [poison]2 poison instead|,2,if(d <= 4) { attack(2); sfxdamage(target|2); } else { inflict(POISON|2); sfx(~_poison~); },,MIN3,,PURPLE,,,,none,2,NO,NO,,,,,,,,,,,,,
Magic Cyanide_downgraded,Do [sword]2 damage,2,attack(2);,,RANGE34,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Throwing Axe,Do [sword]<d6> damage. On 6[;]|do [sword]<d6> again in 2 turns[;] but|make unavailable next turn,2,attack(d); sfxdamage(target|d); if(d == 6) { e.availablenextturn = false; jinx(~Throwing Axe~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|2|d);  sfx(~_thinghappens~); },,NORMAL,,YELLOW,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,if(e.hastag(~makeunavailable~)) { e.removetag(~makeunavailable~); e.availablenextturn = false; },,if(d == 6) { e.availablenextturn = false; e.addtag(~makeunavailable~); },,,
Throwing Axe_upgraded,Do [sword]<d6> damage. On 4-6[;]|do [sword]<d6> again in 2 turns[;] but|make unavailable next turn,2,attack(d); sfxdamage(target|d); if(d >= 4 && d <= 6) { e.availablenextturn = false; jinx(~Throwing Axe+~|~take [sword]%VAR% damage~|~Take [sword]%VAR% damage~|~attack(%VAR%); sfxdamage(null|%VAR%);~|target|self|2|d);  sfx(~_thinghappens~); },,NORMAL,,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Throwing Axe_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,,NORMAL,,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Supervolcano,Do [fire]<d6> damage. On 6[;]|[fire]burn ALL[;] lose this this fight,2,attack(d|FIRE); sfxdamage(target|d); if(d == 6) { inflict(FIRE|ALL); sfx(~_fire~|~~|0.1); e.onceperbattle = true; e.usedthisbattle = true; } /*thx kirb; cody; and cody again for the name suggestions; respectively*/,,NORMAL,,RED,reducesize,change_power,,,,,,,,if(d == 6) { e.onceperbattle = true; e.usedthisbattle = true; },,,,,,,,,,
Supervolcano_downgraded,Do [fire]<d6> damage. On 6[;]|[fire]burn 2[;] lose this this fight,2,attack(d|FIRE); sfxdamage(target|d); if(d == 6) { inflict(FIRE|2); sfx(~_fire~|~~|0.1); e.onceperbattle = true; e.usedthisbattle = true; },,NORMAL,,RED,,,,,,,,,,if(d == 6) { e.onceperbattle = true; e.usedthisbattle = true; },,,,,,,,,,
Supervolcano_deckupgrade,Do [fire]<d6> damage. On 6[;]|[fire]burn ALL[;] lose this this fight,2,attack(d|FIRE); sfxdamage(target|d); if(d == 7) { inflict(FIRE|ALL); sfx(~_fire~|~~|0.1); e.onceperbattle = true; e.usedthisbattle = true; },,NORMAL|FREE1,,RED,,,,,,,,,,if(d == 6) { e.onceperbattle = true; e.usedthisbattle = true; },,,,,,,,,,
Supervolcano_weakened,Do [fire]<d6> damage. On 6[;]|[fire]burn 2[;] lose this this fight,2,attack(d|FIRE); sfxdamage(target|d); if(d == 6) { inflict(FIRE|2); sfx(~_fire~|~~|0.1); e.onceperbattle = true; e.usedthisbattle = true; },,NORMAL,,RED,,,,,,,,,,if(d == 6) { e.onceperbattle = true; e.usedthisbattle = true; },,,,,,,,,,
Spin Attack,Do [sword]<d6> damage. On 6[;]|[lock]counter a random dice|that's not countered yet,2,attack(d); sfxdamage(target|d); if(d == 6) { var availablecounters = [1|2|3|4|5|6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~|~~|0.2); } },,NORMAL,,PURPLE,change_power,change_power,,none,,,,,,,,,,,,,,,,
Spin Attack_downgraded,Do [sword]<d6> damage. On 6[;]|[lock]counter the lowest dice|that's not countered yet,2,attack(d); sfxdamage(target|d); if(d == 6) { var availablecounters = [1|2|3|4|5|6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + availablecounters[0]); sfx(~_lock~|~~|0.2); } },,NORMAL,,PURPLE,,,,none,,,,,,,,,,,,,,,,
Spin Attack_upgraded,Do [sword]<d6> damage. On 6[;]|[lock]counter the highest dice|that's not countered yet,2,attack(d); sfxdamage(target|d); if(d == 6) { var availablecounters = [1|2|3|4|5|6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + availablecounters[availablecounters.length - 1]); sfx(~_lock~|~~|0.2); } },,NORMAL,,PURPLE,,,,none,,,,,,,,,,,,,,,,
Sharp Straw,Do [sword]<d6> damage. On 1[;]|next use drains health,2,if(simulation) { attack(d); if(d == 1 && turn % 2 == 1) bonus(1000); if(turn % 2 == 0) bonus(d); } else { var dmgdesc = ~Do [sword]<d6> damage~; var draindesc = ~Drain [heart]<d6> health~; if(e.fulldescription.split(draindesc).length > 1) { drain(d); sfx(~_drain~); } else { attack(d); sfxdamage(target|d); } if(d != 1 && e.fulldescription.split(draindesc).length > 1) { e.animate(~flash~); e.fulldescription = e.fulldescription.split(draindesc).join(dmgdesc); } if(d == 1 && e.fulldescription.split(dmgdesc).length > 1) { e.animate(~flash~); e.fulldescription = e.fulldescription.split(dmgdesc).join(draindesc); } } /*whipcrack couldve been done a million times easier omg*/,,MAX4,,RED,increaserange,change_function,,none,0,NO,NO,,1,,,,,,,,,,,
Sharp Straw_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,,MAX4,,RED,,,,none,0,NO,NO,,,,,,,,,,,,,
Bass Guitar,Do [weaken]<d6> damage[;]|on 1[;] inflict [weaken]1 weaken,2,attack(d|WEAKEN); sfxdamage(target|d); if(d == 1) { inflict(WEAKEN); sfx(~_weaken~|~~|0.2); },,MAX5,,ORANGE,change_power,change_power,,none,0,NO,NO,,1,,,,,,,,,,,
Bass Guitar_upgraded,Do [weaken]<d6> damage[;]|on 1[;] inflict [weaken]2 weaken,2,attack(d|WEAKEN); sfxdamage(target|d); if(d == 1) { inflict(WEAKEN|2); sfx(~_weaken~|~~|0.2); },,MAX5,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Bass Guitar_downgraded,Do [weaken]<d6> damage,2,attack(d|WEAKEN); sfxdamage(target|d); ,,MAX5,,ORANGE,,,,none,0,NO,NO,,,,,,,,,,,,,
Ouija Board,[vanish]<timesused> dmg[;] inflict [vanish]1 vanish|Add +[vanish]1 dmg each use,2,sfxdamage(target|e.timesused + 1); attack(e.timesused + 1| VANISH); inflict(~ncr_vanish~); bonus(1000); /*campfire. why is a girl scout carrying around a ouija board? i dunno. what do i look like; a child psychologist?*/,,EVEN,,PINK,change_power,complicate,,_vanish,0,NO,NO,,,,,,,,,,,,,
Ouija Board_upgraded,[vanish]<timesused> dmg[;] inflict [vanish]2 vanish|Add +[vanish]1 dmg each use,2,sfxdamage(target|e.timesused + 1); attack(e.timesused + 1| VANISH); inflict(~ncr_vanish~|2); bonus(1000);,,EVEN,,PINK,,,,_vanish,0,NO,NO,,,,,,,,,,,,,
Holy Water,Recover [heal]<d6> health|[gray](once per battle),2,attackself(-d);,,MAX4|MAX4,,GREEN,change_power,decreaserange,,_heal,0,YES,YES,,,,,,,,,,,,,
Holy Water_upgraded,Recover [heal]<d6> health|[gray](once per battle),2,attackself(-d);,,MAX4|MAX4|MAX4|MAX4,,GREEN,,,,_heal,0,YES,YES,,,,,,,,,,,,,
Ice Giant,Odd turns: do [ice]<oddturn_d6> damage|Even: inflict [ice]1[;] return dice,2,if(turn % 2 == 1) { attack(d|ICE); sfxdamage(target|d); } else { inflict(ICE); sfx(~_ice~); givedice(d); },,NORMAL,,BRIGHTCYAN,reducesize,complicate,,,,,,,,if(turn % 2 == 0) { givedice(d); },,,,,,,,,,
Ice Giant_weakened,Odd turns: do [ice]<oddturn_d6> damage|Even: inflict [ice]1[;] return dice,2,if(turn % 2 == 1) { attack(d|ICE); sfxdamage(target|d); } else { inflict(ICE); sfx(~_ice~); givedice(d); },,MAX3,,BRIGHTCYAN,,,,,,,,,,if(turn % 2 == 0) { givedice(d); },,,,,,,,,,
Ice Giant_deckupgrade,Odd turns: do [ice]<oddturn_d6> dmg|Even: inflict [ice]1[;] reroll dice,2,if(turn % 2 == 1) { attack(d|ICE); sfxdamage(target|d); } else { inflict(ICE); sfx(~_ice~); givedice(); },,NORMAL|FREE2,,BRIGHTCYAN,reducesize,complicate,,,,,,,,if(turn % 2 == 0) { givedice(d); },,,,,,,,,,
Swing Me Another 6,Do [sword]<d6> damage[;] roll a 6|[gray](once per battle),2,attack(d); givedice(6);,,MAX5,,RED,change_power,change_function,,_damage,0,NO,YES,,1,,,,,,,,,,,
Swing Me Another 6_upgraded,Do [sword]<d6> damage[;] roll two 6s|[gray](once per battle),2,attack(d); givedice([6|6]);,,MAX5|MAX5,,RED,,,,_damage,0,NO,YES,,,,,,,,,,,,,
Swing Me Another 6_downgraded,Do [sword]<d6>[;] set a dice to 6|[gray](once per battle),2,attack(d); var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue != 6){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animatereroll(6| self.screenposition()); } givedice(6);,,MAX5,,RED,,,,_damage,0,NO,YES,,,,,,,,,,,,,
Gas Lamp,Return dice. In [jinx]2 turns[;]|return them again,2,givedice([d|d]); jinx(~Gas Lamp~|~receive two %VAR%s~|~Receive two %VAR%s~|~inflict(\~stash\~+%VAR%|2); sfx(\~magic_gaindice\~);~|self|self|2|d);,,DOUBLES|DOUBLES,,PINK,change_power,change_function,,,0,YES,NO,,1,,,,,,,,,,,
Gas Lamp_upgraded,Return dice. In [jinx]2 turns[;]|return them again,2,givedice([actualdice[0].basevalue|actualdice[1].basevalue]); jinx(~Gas Lamp+~|~receive a ~ + actualdice[0].basevalue + ~ and a ~ + actualdice[1].basevalue|~Receive a ~ + actualdice[0].basevalue + ~ and a ~ + actualdice[1].basevalue|~if(~ + actualdice[0].basevalue + ~ == ~ + actualdice[1].basevalue + ~) { inflict(\~stash~ + actualdice[0].basevalue + ~\~|2); } else { inflict(\~stash~ + actualdice[0].basevalue + ~\~); inflict(\~stash~ + actualdice[1].basevalue + ~\~); } sfx(\~magic_gaindice\~);~|self|self|2|0);,,MIN4|MIN4,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Gas Lamp_downgraded,Return a dice. In [jinx]2 turns[;]|return both dice,2,givedice(d); jinx(~Gas Lamp-~|~receive two %VAR%s~|~Receive two %VAR%s~|~inflict(\~stash\~+%VAR%|2); sfx(\~magic_gaindice\~);~|self|self|2|d);,,DOUBLES|DOUBLES,,PINK,,,,,0,YES,NO,,,,,,,,,,,,,
Mirrorang,[]+2 dice this fight[;]|+1 dice for enemy,2,if(!simulation) { self.extradice+= 2; target.extradice++; } else { bonus(1000); },,REQUIRE6,,PURPLE,simplify,change_power,,magic_gaindice,0,YES,NO,,,,,,,,,,,,,
Mirrorang_downgraded,[]+1 dice this fight[;]|+1 dice for enemy,2,if(!simulation) { self.extradice++; target.extradice++; } else { bonus(1000); },,REQUIRE6,,PURPLE,,,,magic_gaindice,0,YES,NO,,,,,,,,,,,,,
Doppeldfire,Double and duplicate dice[;]|but [fire]burn resulting copies,2,var dicetogive = []; d * 2 > 6 ? dicetogive = [6|(d * 2) - 6|6|(d * 2) - 6] : dicetogive = [d * 2|d * 2]; inflictself(FIRE|dicetogive.length); givedice(dicetogive); /*made before jacke's marshsword; actually showcased it in the modding channel and he asked if he could repurpose the pun. also tertiary operators because screw you lol*/ /*i still look at this sometimes and go ''wait; why doesn't this have an ice equiva- god dammit''*/,,MAX3,,RED,simplify,change_power,,_fire,0,YES,NO,,1,,,,,,,,,,,
Doppeldfire_downgraded,Duplicate dice[;]|but [fire]burn resulting copies,2,var dicetogive = [d|d]; inflictself(FIRE|dicetogive.length); givedice(dicetogive);,,MAX3,,RED,,,,_fire,0,YES,NO,,,,,,,,,,,,,
Distort,Reroll this dice|Lose [heart]<d6> health,2,if(self.hp > d) { bonus(d * 10000); } givedice(); pierceattackself(d);,,NORMAL,,PURPLE,change_power,change_function,,_heal,0,YES,NO,,1,,,,,,,,,,,
Distort_upgraded,Reroll this dice|Lose [heart]<d6> health|,2,if(self.hp > d) { bonus(d * 10000); } givedice(); pierceattackself(d);,,NORMAL,,PURPLE,,,,_heal,2,YES,NO,,,,,,,,,,,,,
Distort_downgraded,Reroll this dice|Lose [heart]<d6>x0.5 health,2,if(self.hp > d/2) { bonus(d * 5000);  } givedice(); pierceattackself(d/2);,,NORMAL,,PURPLE,,,,_heal,0,YES,NO,,,,,,,,,,,,,
Hammer Up!,Gain a three-use|Rubber Mallet,2,addjestercard(~Rubber Mallet[]~);,,COUNTDOWN,5,RED,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,,,,,,
Hammer Up!_upgraded,Gain a three-use|Rubber Mallet+,2,addjestercard(~Rubber Mallet[]_upgraded~);,,COUNTDOWN,5,RED,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Hammer Up!_downgraded,Gain a one-use|Rubber Mallet,2,addjestercard(~Rubber Mallet[][]~);,,COUNTDOWN,5,RED,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Wonder Gummi,[]+6 max HP|Destroy this on use,2,self.maxhp += 6; sfx(~_survive~); attackself(-6); if(self.layout == ~DECK~) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); } else { e.name = ~ncrsaysremoveme~; removeequipment(~ncrsaysremoveme~); },,COUNTDOWN,40,PINK,change_power,change_power,,jester_delete,,YES,,cannotreuse,,,,,,,,,,,e.maintainfury = true; e.preventdefault = true;,
Wonder Gummi_upgraded,[]+6 max HP|Destroy this on use,2,self.maxhp += 6; sfx(~_survive~); attackself(-6); if(self.layout == ~DECK~) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); } else { e.name = ~ncrsaysremoveme~; removeequipment(~ncrsaysremoveme~); },,COUNTDOWN,32,PINK,,,,jester_delete,,YES,,cannotreuse,,,,,,,,,,,e.maintainfury = true; e.preventdefault = true;,
Wonder Gummi_downgraded,[]+3 max HP|Destroy this on use,2,self.maxhp += 3; sfx(~_survive~); attackself(-3); if(self.layout == ~DECK~) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); } else { e.name = ~ncrsaysremoveme~; removeequipment(~ncrsaysremoveme~); },,COUNTDOWN,40,PINK,,,,jester_delete,,YES,,cannotreuse,,,,,,,,,,,e.maintainfury = true; e.preventdefault = true;,
Wonder Gummi_weakened,[]+3 max HP|Destroy this on use,2,self.maxhp += 3; sfx(~_survive~); attackself(-3); if(self.layout == ~DECK~) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); } else { e.name = ~ncrsaysremoveme~; removeequipment(~ncrsaysremoveme~); },,COUNTDOWN,32,PINK,,,,jester_delete,,YES,,cannotreuse,,,,,,,,,,,e.maintainfury = true; e.preventdefault = true;,
Spear,Do [sword]<d6> damage|Get a new dice,2,attack(d); sfxdamage(target|d); givedice(); /*my attempt at coming up with a generic 'spear' item. the original spear after which starspear; magic spear; etc. are named was renamed six shooter*/,,REQUIRE6,,RED,increaserange,change_power,,,,,,,2,,,,,,,,,,,
Spear_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,,REQUIRE6,,RED,,,,,,,,,,,,,,,,,,,,
Envy,Lose [heart]<d6> HP[;] charge|limit by an extra [confuse]<d6>,2,pierceattackself(d); if(self.limitvalue != null && self.limitmax != null) { sfx(~_cure~); self.limitvalue += d; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },,MAX5,,GRAY,change_power,change_function,,_curse,0,YES,YES,,,,,,,,,,,,,
Envy_upgraded,Lose [heart]<d6> HP[;] charge|limit by an extra [confuse]<d6>|,2,pierceattackself(d); if(self.limitvalue != null && self.limitmax != null) { sfx(~_cure~); self.limitvalue += d; if(self.limitvalue > self.limitmax) { self.limitvalue = self.limitmax; } },,MAX5,,GRAY,,,,_curse,2,YES,YES,,,,,,,,,,,,,
Envy_downgraded,Lose [heart]<d6> HP,2,pierceattackself(d);,,MAX5,,GRAY,,,,_curse,0,YES,YES,,,,,,,,,,,,,
Remaster,Upgrade a random card|[gray](once per battle)[],2,if(self.layout != ~DECK~) { var eqlist = []; for(eq in self.equipment) { if(!eq.temporary_thisturnonly && !eq.upgraded && !eq.originallyupgraded && eq != e && eq != self.getskillcard() && eq.upgradetype != ~~ && new elements.Equipment(eq.name + ~+~).size <= eq.size) { eqlist.push(eq); } } if(eqlist.length == 0 && !e.upgraded && !e.originallyupgraded) { var oldx = e.x; var oldy = e.y; var oldrcd = e.remainingcountdown; e.create(e.name|true|e.weakened|!self.isplayer); e.x = oldx; e.y = oldy; if(e.remainingcountdown > oldrcd) { e.remainingcountdown = oldrcd; } e.animate(~flashandshake~); sfx(~upgradeequipment~); screenshake(); self.textparticle(e.displayname + ~+!~); } else if(eqlist.length > 0) { var choseneq = rand(eqlist); var oldx = choseneq.x; var oldy = choseneq.y; var oldrcd = choseneq.remainingcountdown; choseneq.create(choseneq.name|true|choseneq.weakened|!self.isplayer); /* bool args for e.create: upgraded; weakened; deckupgrade */ choseneq.x = oldx; choseneq.y = oldy; if(choseneq.remainingcountdown > oldrcd) { choseneq.remainingcountdown = oldrcd; } choseneq.animate(~flashandshake~); sfx(~upgradeequipment~); screenshake(); self.textparticle(choseneq.displayname + ~+!~); } else { self.textparticle(~No effect!~); } } else { var cardlist = []; for(card in Deck.getcards(~all~)) { if(!card.equipment.temporary_thisturnonly && !card.equipment.upgraded  && !card.equipment.originallyupgraded && card.equipment != e && card.equipment.upgradetype != ~~) { cardlist.push(card); } } if(cardlist.length == 0 && !e.upgraded && !e.originallyupgraded) { var oldx = e.x; var oldy = e.y; var oldrcd = e.remainingcountdown; e.create(e.name|true|e.weakened|true); e.resize(2); e.x = oldx; e.y = oldy; if(e.remainingcountdown > oldrcd) { e.remainingcountdown = oldrcd; } e.animate(~flashandshake~); sfx(~upgradeequipment~); screenshake(); self.textparticle(e.displayname + ~+!~); } else if(cardlist.length > 0) { var chosencard = rand(cardlist); var oldx = chosencard.equipment.x; var oldy = chosencard.equipment.y; var oldrcd = chosencard.equipment.remainingcountdown; chosencard.equipment.create(chosencard.equipment.name|true|chosencard.equipment.weakened|true); chosencard.equipment.resize(2); chosencard.equipment.x = oldx; chosencard.equipment.y = oldy; if(chosencard.equipment.remainingcountdown > oldrcd) { chosencard.equipment.remainingcountdown = oldrcd; } chosencard.equipment.animate(~flashandshake~); if(!chosencard.equipment.onscreen()) chosencard.equipment.ready = false; sfx(~upgradeequipment~); screenshake(); self.textparticle(chosencard.equipment.displayname + ~+!~); } else { self.textparticle(~No effect!~); } },,ODD|ODD,,ORANGE,simplify,complicate,,,,YES,YES,finale,,,,,,,,,,,,
NC Deck,4 Zoop Zoops[;] 3 Bop Bops|and 2 Veneers|Finale Card: Remaster,2,,,,,PINK,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Remaster~);} addjestercard(~zoop zoop~); addjestercard(~zoop zoop~); addjestercard(~zoop zoop~); addjestercard(~zoop zoop~); addjestercard(~bop bop~); addjestercard(~bop bop~); addjestercard(~bop bop~); addjestercard(~veneer~); addjestercard(~veneer~);,,,,,,,,
IC Chip,Return the dice,2,givedice(d); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,GRAY,change_power,change_power,,chip,,YES,,,,,,,,,,,,,,
Chip Socket,Do [sword]2 damage[;] +[sword]2 per|chip used this turn (+[sword]<var:icchips>)|[gray](more items will be chips)[],2,attack(2 + self.getvar(~icchips~)); sfxdamage(target|2 + self.getvar(~icchips~)); sfx(~socket~|~~|0.2);,,EVEN,,YELLOW,change_power,complicate,,,,,,excludefromrandomlists,,,,,self.setvar(~icchips~|0); self.setvar(~actualicchips~|0);,,self.setvar(~icchips~|0); self.setvar(~actualicchips~|0);,,,,,
Chip Socket_upgraded,Do [sword]4 damage[;] +[sword]2 per|chip used this turn (+[sword]<var:icchips>)|[gray](more items will be chips)[],2,attack(4 + self.getvar(~icchips~)); sfxdamage(target|4 + self.getvar(~icchips~)); sfx(~socket~|~~|0.2);,,EVEN,,YELLOW,,,,,,,,excludefromrandomlists,,,,,self.setvar(~icchips~|0); self.setvar(~actualicchips~|0);,,self.setvar(~icchips~|0); self.setvar(~actualicchips~|0);,,,,,
IC Chip_downgraded,Count as used|[80%][gray]''Bummer!''[],2,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,GRAY,,,,chip,,YES,,,,,,,,,,,,,,
IC Chip_upgraded,Return the dice,2,givedice(d); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN3,,GRAY,,,,chip,,YES,,,,,,,,,,,,,,
Toggle Chip,On even[;] do [sword]<d6> damage|On odd[;] acts as a chip,2,if(d % 2 == 0) { attack(d); sfxdamage(target|d); } else { sfx(~chip~); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1); },,NORMAL,,GREEN,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,,,if(d % 2 == 0) { e.castdirection = 1; } else { e.castdirection = -1; },,,
Toggle Chip_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target|d);,,EVEN,,GREEN,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Toggle Chip_upgraded,On even[;] do [sword]<d6> damage|On odd[;] acts as a chip[;]|and returns the dice,2,if(d % 2 == 0) { attack(d); sfxdamage(target|d); } else { sfx(~chip~); givedice(d); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1); },,NORMAL,,GREEN,,,,,,,,excludefromrandomlists,,,,,,,,,if(d % 2 == 0) { e.castdirection = 1; } else { e.castdirection = -1; },,,
Mystical Chip,Inflict [vanish]1 vanish|Counts as a chip,2,inflict(~ncr_vanish~|1); sfx(~_vanish~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN3,,PINK,change_power,change_function,,chip,,,,,,,,,,,,,,,,
Mystical Chip_upgraded,Inflict [vanish]2 vanish|Counts as a chip,2,inflict(~ncr_vanish~|2); sfx(~_vanish~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN3,,PINK,,,,chip,,,,,,,,,,,,,,,,
Mystical Chip_downgraded,Inflict [vanish]1 vanish,2,inflict(~ncr_vanish~|1); sfx(~_vanish~);,,MIN3,,PINK,,,,,,,,,,,,,,,,,,,,
Brushfire,Inflict [fire]1 burn|Counts as a chip,2,inflict(FIRE|1); sfx(~_fire~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN3,,RED,change_power,change_function,,chip,,,,,,,,,,,,,,,,
Brushfire_upgraded,Inflict [fire]2 burn|Counts as a chip,2,inflict(FIRE|2); sfx(~_fire~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN3,,RED,,,,chip,,,,,,,,,,,,,,,,
Brushfire_downgraded,Inflict [fire]1 burn,2,inflict(FIRE|1); sfx(~_fire~);,,MIN3,,RED,,,,,,,,,,,,,,,,,,,,
Icedeath,Inflict [ice]1 freeze|Counts as a chip,2,inflict(ICE|1); sfx(~_ice~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN3,,BRIGHTCYAN,change_power,change_function,,chip,,,,,,,,,,,,,,,,
Icedeath_upgraded,Inflict [ice]2 freeze|Counts as a chip,2,inflict(ICE|2); sfx(~_ice~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN3,,BRIGHTCYAN,,,,chip,,,,,,,,,,,,,,,,
Icedeath_downgraded,Inflict [ice]1 freeze,2,inflict(ICE|1); sfx(~_ice~);,,MIN3,,BRIGHTCYAN,,,,,,,,,,,,,,,,,,,,
Force Field,Discard current hand|Counts as a chip,2,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1); Deck.discardhand(); sfx(~jester_discard~);,,ODD,,GREEN,simplify,complicate,,chip,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Chchchips,Counts as 3 chips|[gray](once per battle),2,self.setvar(~icchips~|self.getvar(~icchips~) + 6);,,MIN5,,GRAY,increaserange,complicate,,chip,,YES,YES,,,,,,,,,,,,,
Chipmine,Chipmine|Get a random chip,2,//$replacemewith(rand(loadtext(~diceydungeons/chipminespawnablechips~))| -1);$ /*originally the button text for this was going to be 'ggja' because that's the password to chipmine but that would be nonsensical to anyone who doesn't play chips*/,,,,GRAY,,,,,,YES,,powercard|weakenavoid,,,,,,,,,,,,
Southpole,Get a lower dice|Counts as a chip,2,givedice(rand([1|2|3|4|5|6].splice(0|d))); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN2,,BRIGHTCYAN,change_power,change_power,,chip,,YES,,,,,,,,,,,,,,
Southpole_upgraded,Get a random dice|Counts as a chip,2,givedice(); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN2,,BRIGHTCYAN,,,,chip,,YES,,,,,,,,,,,,,,
Southpole_downgraded,Get a lower dice|Counts as a chip,2,givedice(rand([1|2|3|4|5|6].splice(0|d))); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,BRIGHTCYAN,,,,chip,,YES,,,,,,,,,,,,,,
Cellblocked,Lock a dice|Counts as a chip,2,inflict(LOCK); sfx(~_lock~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN5,,PURPLE,increaserange,change_power,,chip,,,,,,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
Cellblocked_downgraded,Counts as a chip,2,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN5,,PURPLE,,,,chip,,,,,,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
CANYON.MID,Inflict [weaken]weaken|Counts as a chip,2,inflict(WEAKEN); sfx(~_weaken~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,EVEN,,ORANGE,change_power,change_power,,chip,,,,,,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
CANYON.MID_downgraded,Counts as a chip,2,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,EVEN,,ORANGE,,,,chip,,,,,,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
CANYON.MID_upgraded,Inflict [weaken]weaken|Counts as a chip,2,inflict(WEAKEN); sfx(~_weaken~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN3,,ORANGE,,,,chip,,,,,,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
CHIP01.MID,Inflict [shock]shock|Counts as a chip,2,inflict(SHOCK); sfx(~_shock~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,EVEN,,YELLOW,change_power,change_power,,chip,,,,,,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
CHIP01.MID_downgraded,Counts as a chip,2,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,EVEN,,YELLOW,,,,chip,,,,,,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
CHIP01.MID_upgraded,Inflict [shock]shock|Counts as a chip,2,inflict(SHOCK); sfx(~_shock~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN3,,YELLOW,,,,chip,,,,,,self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
Block Factory,Gain [shield]<d6> shield|Counts as a chip,2,inflictself(SHIELD|d);  sfx(~_shield~|~~|0.2); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MAX3,,ORANGE,increaserange,decreaserange,,chip,,YES,,,,,,,,,,,,,,
Goldkey,Split a dice in two|Counts as a chip,2,givedice(split(d)|~splitdice~); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN5,,YELLOW,increaserange,complicate,,chip,,YES,,,,,,,,,,,,,,
Firetrap,Roll two burning dice|Counts as a chip,2,inflictself(FIRE|2); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,RED,change_power,change_power,,chip,,YES,,,,,,,,,,,,,,
Firetrap_upgraded,Roll three burning dice|Counts as a chip,2,inflictself(FIRE|3); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,RED,,,,chip,,YES,,,,,,,,,,,,,,
Firetrap_downgraded,Roll two burning dice,2,inflictself(FIRE|2); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]);,,MIN4,,RED,,,,,,YES,,,,,,,,,,,,,,
Doublemaze,Roll two 1s|Counts as a chip,2,givedice([1|1]); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,BRIGHTCYAN,increaserange,change_power,,chip,,YES,,,,,,,,,,,,,,
Doublemaze_downgraded,Roll two 1s,2,givedice([1|1]);,,MIN4,,BRIGHTCYAN,,,,,,YES,,,,,,,,,,,,,,
Paranoia,Roll 2 dice[;] get [vanish]2 vanish|Counts as a chip,2,inflictself(~ncr_vanish~|2); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,PINK,increaserange,change_power,,chip,,YES,,,,,,,,,,,,,,
Paranoia_downgraded,Roll 2 dice[;] get [vanish]2 vanish,2,inflictself(~ncr_vanish~|2); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]);,,MIN4,,PINK,,,,,,YES,,,,,,,,,,,,,,
Time Lapse,If you have 6 or more chips[;]|start an extra turn & discard|this (chips collected: <var:actualicchips>),2,if(self.getvar(~icchips~) >= 12) { inflictself(EXTRATURN); sfx(~_recycle~); self.endturnnow(); } else { self.textparticle(~No effect!~); } e.onceperbattle = true; e.usedthisbattle = true;,,EVEN,,YELLOW,simplify,complicate,,,,YES,,,,,,,self.setvar(~icchips~|0); self.setvar(~actualicchips~|0);,,self.setvar(~icchips~|0); self.setvar(~actualicchips~|0);,,,,e.preventdefault = true; e.maintainfury = true;,
Recurring Dream,Get [recycle]re-equip[;] return dice|Counts as a chip,2,inflictself(REEQUIPNEXT); sfx(~_recycle~); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1); givedice(d);,,MAX2,,GREEN,change_power,change_power,,chip,,YES,,,,,,,,,,,,,,
Recurring Dream_upgraded,Get [recycle]re-equip[;] reroll dice|Counts as a chip,2,inflictself(REEQUIPNEXT); sfx(~_recycle~); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1); givedice();,,MAX2,,GREEN,,,,chip,,YES,,,,,,,,,,,,,,
Recurring Dream_downgraded,Get [recycle]re-equip[;] return dice|Counts as a chip,2,inflictself(REEQUIPNEXT); sfx(~_recycle~); self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1); givedice(d);,,REQUIRE2,,GREEN,,,,chip,,YES,,,,,,,,,,,,,,
Blue Wall,Do [sword]4 damage|50% chance to return dice|Counts as a chip,2,attack(4); sfxdamage(target|4); var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0) odds = 100; if(chance(odds)) { givedice(d); self.textparticle(~Success!~); } self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,PURPLE,change_power,change_power,,chip,,,,,,var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0) odds = 100; if(chance(odds)) { givedice(d); self.textparticle(~Success!~); } self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
Blue Wall_upgraded,Do [sword]<d6> damage|50% chance to return dice|Counts as a chip,2,attack(d); sfxdamage(target|d); var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0) odds = 100; if(chance(odds)) { givedice(d); self.textparticle(~Success!~); } self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,PURPLE,,,,chip,,,,,,var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0) odds = 100; if(chance(odds)) { givedice(d); self.textparticle(~Success!~); } self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
Blue Wall_downgraded,Do [sword]2 damage|50% chance to return dice|Counts as a chip,2,attack(2); sfxdamage(target|2); var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0) odds = 100; if(chance(odds)) { givedice(d); self.textparticle(~Success!~); } self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,MIN4,,PURPLE,,,,chip,,,,,,var odds = 50; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0) odds = 100; if(chance(odds)) { givedice(d); self.textparticle(~Success!~); } self.setvar(~icchips~|self.getvar(~icchips~) + 2); self.setvar(~actualicchips~|self.getvar(~actualicchips~) + 1);,,,,,,,,,,
Cyclone,Do [sword]<d6> damage[;]|roll two locked dice,2,attack(d); sfxdamage(target|d); givedice([for(i in 0...2) rand([1|2|3|4|5|6])]); var lockisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~lock~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_lock~) { lockisalt = true; } } }  if(lockisalt) {  for(mydice in [for(i in 0...2) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.animate(~alternate_lock~);  }  inflictself(~alternate_lock~|2); } else {  for(mydice in [for(i in 0...2) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.locked = true;  }  sfx(~_lock~); },,NORMAL,,PURPLE,change_power,change_power,,,,,,,,givedice([for(i in 0...2) rand([1|2|3|4|5|6])]); var lockisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~lock~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_lock~) { lockisalt = true; } } }  if(lockisalt) {  for(mydice in [for(i in 0...2) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.animate(~alternate_lock~);  }  inflictself(~alternate_lock~|2); } else {  for(mydice in [for(i in 0...2) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.locked = true;  }  sfx(~_lock~); },,,,,,,,,,
Cyclone_upgraded,Do [sword]<d6> damage[;]|roll three locked dice,2,attack(d); sfxdamage(target|d); givedice([for(i in 0...3) rand([1|2|3|4|5|6])]); var lockisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~lock~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_lock~) { lockisalt = true; } } }  if(lockisalt) {  for(mydice in [for(i in 0...3) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.animate(~alternate_lock~);  }  inflictself(~alternate_lock~|3); } else {  for(mydice in [for(i in 0...3) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.locked = true;  }  sfx(~_lock~); },,NORMAL,,PURPLE,,,,,,,,,,givedice([for(i in 0...3) rand([1|2|3|4|5|6])]); var lockisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~lock~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_lock~) { lockisalt = true; } } }  if(lockisalt) {  for(mydice in [for(i in 0...3) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.animate(~alternate_lock~);  }  inflictself(~alternate_lock~|3); } else {  for(mydice in [for(i in 0...3) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.locked = true;  }  sfx(~_lock~); },,,,,,,,,,
Cyclone_downgraded,Do [sword]<d6> damage[;]|roll a locked dice,2,attack(d); sfxdamage(target|d); givedice([for(i in 0...1) rand([1|2|3|4|5|6])]); var lockisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~lock~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_lock~) { lockisalt = true; } } }  if(lockisalt) {  for(mydice in [for(i in 0...1) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.animate(~alternate_lock~);  }  inflictself(~alternate_lock~|1); } else {  for(mydice in [for(i in 0...1) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.locked = true;  }  sfx(~_lock~); } /*having the downgrade be a double-dose (smaller range and suppressed secondary effect) just felt natural in this case; for some reason?*/,,MAX3,,PURPLE,,,,,,,,,,givedice([for(i in 0...1) rand([1|2|3|4|5|6])]); var lockisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~lock~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_lock~) { lockisalt = true; } } }  if(lockisalt) {  for(mydice in [for(i in 0...1) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.animate(~alternate_lock~);  }  inflictself(~alternate_lock~|1); } else {  for(mydice in [for(i in 0...1) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.locked = true;  }  sfx(~_lock~); },,,,,,,,,,
Wind Chimes,Unlock all your dice,2,removestatusself(LOCK|ALL); for(i in 1...7) removestatusself(~counter_~ + i); for(mydice in self.dicepool) { if(mydice.locked # mydice.priority) { mydice.locked = false; mydice.priority = false; mydice.canbedragged = true; mydice.animate(~flashshake~); } },,EVEN,,PURPLE,change_power,change_power,,_lock,,YES,,,,,,,,,,,,,,
Wind Chimes_upgraded,Unlock all your dice,2,removestatusself(LOCK|ALL); for(i in 1...7) removestatusself(~counter_~ + i); for(mydice in self.dicepool) { if(mydice.locked # mydice.priority) { mydice.locked = false; mydice.priority = false; mydice.canbedragged = true; mydice.animate(~flashshake~); } },,NORMAL,,PURPLE,,,,_lock,,YES,,,,,,,,,,,,,,
Wind Chimes_downgraded,Unlock half your dice,2,removestatusself(LOCK|ALL); for(i in 1...7) removestatusself(~counter_~ + i); var dicelist = []; for(mydice in self.dicepool) { if(mydice.locked # mydice.priority) { dicelist.push(mydice); } } shuffle(mydice); var halflength = dicelist.length / 2; halflength += (1 - (dicelist.length % 1)); for(i in 0...halflength) { var mydice = dicelist[i]; mydice.locked = false; mydice.priority = false; mydice.canbedragged = true; mydice.animate(~flashshake~); },,EVEN,,PURPLE,,,,_lock,,YES,,,,,,,,,,,,,,
Ivy,Gain [thorns]1 thorn|Return the dice,2,inflictself(THORNS); givedice(d);,,EVEN,,GREEN,change_power,complicate,,_thorns,,YES,,,,,,,,,,,,,,
Ivy_upgraded,Gain [thorns]1 thorn|Bump the dice,2,inflictself(THORNS); if(d >= 6){ givedice([6| 1]); } else { givedice(d + 1); },,EVEN,,GREEN,,,,_thorns,,YES,,,,,,,,,,,,,,
Speak Softly,Heal [heal]2 per thorn,2,attackself(-getstatusself(THORNS) * 2); if(getstatusself(THORNS) > 0) { sfx(~_heal~); sfx(~_thorns~|~~|0.1); } else { sfx(~_thorns~); },,ODD,,GREEN,change_power,change_power,thorns,,,YES,,,,,,,,,,,,,,
Speak Softly_downgraded,Heal [heal]1 per thorn,2,attackself(-getstatusself(THORNS)); if(getstatusself(THORNS) > 0) { sfx(~_heal~); sfx(~_thorns~|~~|0.1); } else { sfx(~_thorns~); },,ODD,,GREEN,,,,,,YES,,,,,,,,,,,,,,
Speak Softly_upgraded,Heal [heal]2 per thorn|Return the dice,2,attackself(-getstatusself(THORNS) * 2); givedice(d); if(getstatusself(THORNS) > 0) { sfx(~_heal~); sfx(~_thorns~|~~|0.1); } else { sfx(~_thorns~); },,ODD,,GREEN,,,,,,YES,,,,,,,,,,,,,,
Foggy Glass,Get a dice[;] do [vanish]3 dmg|per [vanish]vanish on enemy,2,givedice(); if(getstatus(VANISH) > 0) { attack((target.dice + target.extradice + target.bonusdice) * 3); sfxdamage(target|(target.dice + target.extradice + target.bonusdice) * 3); } else { if(getstatus(~ncr_vanish~) == 0) { self.textparticle(~No effect!~); } else { attack(getstatus(~ncr_vanish~) * 3 | VANISH); sfxdamage(target|getstatus(~ncr_vanish~) * 3); } },,ODD,,PINK,change_power,change_power,,_vanish,,,,,,givedice();,,,,,,,,,,
Foggy Glass_upgraded,Get a dice[;] do [vanish]4 dmg|per [vanish]vanish on enemy,2,givedice(); if(getstatus(VANISH) > 0) { attack((target.dice + target.extradice + target.bonusdice) * 4); sfxdamage(target|(target.dice + target.extradice + target.bonusdice) * 4); } else { if(getstatus(~ncr_vanish~) == 0) { self.textparticle(~No effect!~); } else { attack(getstatus(~ncr_vanish~) * 4 | VANISH); sfxdamage(target|getstatus(~ncr_vanish~) * 4); } },,ODD,,PINK,,,,_vanish,,,,,,givedice();,,,,,,,,,,
Foggy Glass_downgraded,Do [vanish]3 dmg per|[vanish]vanish on enemy,2,if(getstatus(VANISH) > 0) { attack((target.dice + target.extradice + target.bonusdice) * 3); sfxdamage(target|(target.dice + target.extradice + target.bonusdice) * 3); } else { if(getstatus(~ncr_vanish~) == 0) { self.textparticle(~No effect!~); } else { attack(getstatus(~ncr_vanish~) * 3 | VANISH); sfxdamage(target|getstatus(~ncr_vanish~) * 3); } },,ODD,,PINK,,,,_vanish,,,,,,,,,,,,,,,,
Spite,Heal [heal]<charge>[;] discharge [sword]<charge>|Damage yourself to charge,2,if(e.charge == 0) { bonus(-990000); } else { bonus(e.charge * 10000); } attack(e.charge); sfxdamage(e.charge); attackself(-e.charge); e.charge = 0; if(!simulation) { self.setvar(~selfdmg~|0); },,DOUBLES|DOUBLES,,PURPLE,change_power,change_function,,_heal,0,NO,NO,,,,self.setvar(~selfdmg~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } self.setvar(~selfdmg~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } e.charge = self.getvar(~selfdmg~);,,var l = e.fulldescription.split(~<charge>~); if(l.length > 1) { e.fulldescription = l.join(e.charge); } self.setvar(~selfdmg~|e.charge);,,,,,
Spite_downgraded,Heal and discharge[;] but|do zero damage,2,if(e.charge < 6) { bonus(-990000); } attackself(-e.charge); e.charge = 0; if(!simulation) { self.setvar(~selfdmg~|0); },,DOUBLES|DOUBLES,,PURPLE,,,,_heal,0,NO,NO,,,,self.setvar(~selfdmg~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } self.setvar(~selfdmg~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } e.charge = self.getvar(~selfdmg~);,,var l = e.fulldescription.split(~<charge>~); if(l.length > 1) { e.fulldescription = l.join(e.charge); } self.setvar(~selfdmg~|e.charge);,,,,,
Spite_upgraded,Heal [heal]1.5x<charge>[;] discharge [sword]<charge>|Damage yourself to charge,2,if(e.charge == 0) { bonus(-990000); } else { bonus(e.charge * 10000); } attack(e.charge); sfxdamage(e.charge); attackself(-(e.charge * 1.5)); e.charge = 0; if(!simulation) { self.setvar(~selfdmg~|0); },,DOUBLES|DOUBLES,,PURPLE,,,,_heal,0,NO,NO,,,,self.setvar(~selfdmg~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } self.setvar(~selfdmg~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } e.charge = self.getvar(~selfdmg~);,,var l = e.fulldescription.split(~<charge>~); if(l.length > 1) { e.fulldescription = l.join(e.charge); } self.setvar(~selfdmg~|e.charge);,,,,,
Folly,Do [sword]<d6> damage|to both enemy and you,2,if(self.hp > d) { bonus(d * 10000); } else { bonus(-990000); } attack(d); attackself(d); sfxdamage(target|d);,,MAX4,,PURPLE,change_power,change_function,,none,0,NO,NO,,1,,,,,,,,,,,
Folly_downgraded,Do [sword]<d6> damage|to both enemy and you,2,if(self.hp > d) { bonus(d * 10000); } else { bonus(-990000); } attack(d); attackself(d); sfxdamage(target|d); /*originally folly downgraded was this; which i thought was kinda clever; but it doesn't make sense for jester since jester doesn't have fire resistance (this was originally for super wisp): if(self.hp > ((d/2) % 1 == 0 ? d/2 : d/2 + 0.5)) { bonus(d * 5000); } else { bonus(-990000); } attack(d|FIRE); attackself(d|FIRE); help how do i ceiling*/,,MAX3,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Folly_upgraded,Do [sword]<d6> damage|to both enemy and you[;]|and get a new dice,2,if(self.hp > d) { bonus(d * 10000); } else { bonus(-990000); } attack(d); attackself(d); sfxdamage(target|d); givedice();,,MAX4,,PURPLE,,,,none,0,NO,NO,,,,,,,,,,,,,
Fastball,Do [sword]<triple> damage[;] but|lose 3 dice this fight|(no effect if you'd have 0),2,if(self.dice + self.extradice > 3) { attack(d * 3); sfxdamage(target|d * 3); self.extradice -= 3; } else self.textparticle(~No effect!~);,,MAX5,,PURPLE,simplify,change_function,,magic_gaindice,0,NO,NO,,,,,,,,,,,,,
Fastball_downgraded,Do [sword]<triple> damage[;] but|lose 4 dice this fight|(no effect if you'd have 0),2,if(self.dice + self.extradice > 4) { attack(d * 3); sfxdamage(target|d * 3); self.extradice -= 4; } else self.textparticle(~No effect!~);,,MAX5,,PURPLE,,,,magic_gaindice,0,NO,NO,,,,,,,,,,,,,
Lucky Charm,Double the success odds|of chance based items,2,inflictself(~luck~);,,EVEN,,GREEN,simplify,complicate,,none,0,YES,,,,,,,,,,,,,,
Reckless Flailing,(100/<d6>)% chance: [sword]<triple>|Otherwise[;] no effect,2,var odds = (100 / d); if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0 # odds > 100){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3); sfxdamage(target|d * 3); } else { self.textparticle(~No effect!~); },,NORMAL,,RED,change_power,change_power,,none,0,NO,,,,,,,,,,,,,,
Reckless Flailing_upgraded,(100/<d6>)% chance: [sword]<triple>|Otherwise[;] do [sword]2 damage,2,var odds = (100 / d); if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0 # odds > 100){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3); sfxdamage(target|d * 3); } else { attack(2); sfxdamage(target|2); },,NORMAL,,RED,,,,none,0,NO,,,,,,,,,,,,,,
Reckless Flailing_downgraded,(100/<d6>)% chance: [sword]<double>|Otherwise[;] no effect,2,var odds = (100 / d); if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0 # odds > 100){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 2); sfxdamage(target|d * 3); } else { self.textparticle(~No effect!~); },,NORMAL,,RED,,,,none,0,NO,,,,,,,,,,,,,,
Sticky Cauldron,Do [sword]2 per counter placed|Receive each countered dice,2,var counters = [1|2|3|4|5|6]; var dicelist = []; for(num in counters) if(getstatus(~counter_~ + num) > 0) dicelist.push(num); if(dicelist.length > 0) { givedice(dicelist); attack(2 * dicelist.length); sfxdamage(target|2 * dicelist.length); } else self.textparticle(~No effect!~); /*good thing this isn't php*/,,NORMAL,,PURPLE,change_power,change_power,,,,NO,,,,var counters = [1|2|3|4|5|6]; var dicelist = []; for(num in counters) if(getstatus(~counter_~ + num) > 0) dicelist.push(num); if(dicelist.length > 0) givedice(dicelist); else self.textparticle(~No effect!~);,,,,,,,,,,
Sticky Cauldron_upgraded,Do [sword]3 per counter placed|Receive each countered dice,2,var counters = [1|2|3|4|5|6]; var dicelist = []; for(num in counters) if(getstatus(~counter_~ + num) > 0) dicelist.push(num); if(dicelist.length > 0) { givedice(dicelist); attack(3 * dicelist.length); sfxdamage(target|3 * dicelist.length); } else self.textparticle(~No effect!~);,,NORMAL,,PURPLE,,,,,,NO,,,,var counters = [1|2|3|4|5|6]; var dicelist = []; for(num in counters) if(getstatus(~counter_~ + num) > 0) dicelist.push(num); if(dicelist.length > 0) givedice(dicelist); else self.textparticle(~No effect!~);,,,,,,,,,,
Sticky Cauldron_downgraded,Receive each countered dice,2,var counters = [1|2|3|4|5|6]; var dicelist = []; for(num in counters) if(getstatus(~counter_~ + num) > 0) dicelist.push(num); if(dicelist.length > 0) givedice(dicelist); else self.textparticle(~No effect!~);,,NORMAL,,PURPLE,,,,,,YES,,,,var counters = [1|2|3|4|5|6]; var dicelist = []; for(num in counters) if(getstatus(~counter_~ + num) > 0) dicelist.push(num); if(dicelist.length > 0) givedice(dicelist); else self.textparticle(~No effect!~);,,,,,,,,,,
Crazy Glue,[lock]Counter a random dice|that's not countered yet,2,var availablecounters = [1|2|3|4|5|6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },,NORMAL,,PURPLE,change_power,change_power,,,,,,,,,,,,,,,,,,
Crazy Glue_downgraded,[lock]Counter a random dice|that's not countered yet,2,var availablecounters = [1|2|3|4|5|6]; for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },,ODD,,PURPLE,,,,,,,,,,,,,,,,,,,,
Crazy Glue_upgraded,[lock]Counter a random dice|higher than or equal to <d6>,2,var availablecounters = [6|5|4|3|2|1].splice(0|7-d); for(num in availablecounters) { if(getstatus(~counter_~ + num) > 0) { availablecounters.remove(num); } } if(availablecounters.length == 0) { self.textparticle(~No effect!~); } else { inflict(~counter_~ + rand(availablecounters)); sfx(~_lock~); },,NORMAL,,PURPLE,,,,,,,,,,,,,,,,,,,,
Sceptre,Deal [vanish]6 damage|Inflict [vanish]1 vanish,2,sfxdamage(target|6); attack(6| VANISH); inflict(~ncr_vanish~); /*staff*/,,COUNTDOWN,8,PINK,change_power,change_power,,_vanish,0,NO,NO,,,,,,,,,,,,,
Sceptre_downgraded,Deal [vanish]3 damage|Inflict [vanish]1 vanish,2,sfxdamage(target|3); attack(3| VANISH); inflict(~ncr_vanish~);,,COUNTDOWN,8,PINK,,,,_vanish,0,NO,NO,,,,,,,,,,,,,
Sceptre_upgraded,Deal [vanish]8 damage|Inflict [vanish]1 vanish,2,sfxdamage(target|8); attack(8| VANISH); inflict(~ncr_vanish~);,,COUNTDOWN,8,PINK,,,,_vanish,0,NO,NO,,,,,,,,,,,,,
Scientology Pamphlet,Double enemy [vanish]vanish,2,if(getstatus(VANISH) > 0) { inflict(~ncr_vanish~|target.dice + target.extradice + target.bonusdice); /*can bait alt. reduce*/ } else { if(getstatus(~ncr_vanish~) > 0) { inflict(~ncr_vanish~|getstatus(~ncr_vanish~)); } else { self.textparticle(~No effect!~); } },,DOUBLES|DOUBLES,,PINK,change_power,change_power,,_vanish,,,,,,,,,,,,,,,,
Scientology Pamphlet_upgraded,Double enemy [vanish]vanish,2,if(getstatus(VANISH) > 0) { inflict(~ncr_vanish~|target.dice + target.extradice + target.bonusdice); /*can bait alt. reduce*/ } else { if(getstatus(~ncr_vanish~) > 0) { inflict(~ncr_vanish~|getstatus(~ncr_vanish~)); } else { self.textparticle(~No effect!~); } },,EVEN,,PINK,,,,_vanish,,,,,,,,,,,,,,,,
Scientology Pamphlet_downgraded,Increase enemy [vanish]vanish|by 50 percent,2,if(getstatus(VANISH) > 0) { inflict(~ncr_vanish~|(target.dice + target.extradice + target.bonusdice) * 0.5); /*can bait alt. reduce*/ } else { if(getstatus(~ncr_vanish~) > 0) { inflict(~ncr_vanish~|getstatus(~ncr_vanish~) *  0.5); } else { self.textparticle(~No effect!~); } },,DOUBLES|DOUBLES,,PINK,,,,_vanish,,,,,,,,,,,,,,,,
Gaslighting,Do [sword]<d6> damage[;] on 6[;]|next use inflicts [vanish]2 vanish,2,e.setvar(~test~|true); var readystring = ~#~.substr(0|1) + ~[purple](ready)~; sfxdamage(target|d); attack(d); if(e.fulldescription.split(readystring).length > 1) { inflict(~ncr_vanish~|2); } if(d == 6 && e.fulldescription.split(readystring).length == 1) { trace(~hi 1~); e.fulldescription = e.fulldescription + readystring; for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { trace(~hi 2~); if(eq.fulldescription.split(readystring).length == 1) { trace(~hi 3~); eq.fulldescription = eq.fulldescription + readystring; eq.animate(~flash~); } eq.setvar(~test~|false); break; } } } if(d != 6 && e.fulldescription.split(readystring).length > 1) { e.fulldescription = e.fulldescription.split(readystring)[0]; for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { eq.fulldescription = eq.fulldescription.split(readystring)[0]; eq.animate(~flash~); eq.setvar(~test~|false); break; } } } e.setvar(~test~|false); /*whipcrack. has the same ''deceit'' theme as sleight of hand but much harsher*/,,NORMAL,,PURPLE,reducesize,change_function,,_damage,0,NO,NO,excludefromrandomlists,,,var readystring = ~#~.substr(0|1) + ~[purple](ready)~; if(e.fulldescription.split(readystring).length > 1) { e.fulldescription = e.fulldescription.split(readystring)[0]; },var readystring = ~#~.substr(0|1) + ~[purple](ready)~; if(e.fulldescription.split(readystring).length > 1) { e.fulldescription = e.fulldescription.split(readystring)[0]; },,,,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~|true); } },,,
Gaslighting_downgraded,Do [sword]<d6> damage,2,sfxdamage(target|d); attack(d);,,NORMAL,,PURPLE,,,,_damage,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Gaslighting_weakened,Do [sword]<d6> damage,2,sfxdamage(target|d); attack(d);,,NORMAL,,PURPLE,,,,_damage,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Gaslighting_deckupgrade,Do [sword]<d6> damage[;] on 4-6[;]|next use inflicts [vanish]2 vanish,2,e.setvar(~test~|true); var readystring = ~#~.substr(0|1) + ~[purple](ready)~; sfxdamage(target|d); attack(d); if(e.fulldescription.split(readystring).length > 1) { inflict(~ncr_vanish~|2); } if(d > 3 && e.fulldescription.split(readystring).length == 1) { trace(~hi 1~); e.fulldescription = e.fulldescription + readystring; for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { trace(~hi 2~); if(eq.fulldescription.split(readystring).length == 1) { trace(~hi 3~); eq.fulldescription = eq.fulldescription + readystring; eq.animate(~flash~); } eq.setvar(~test~|false); break; } } } if(d < 4 && e.fulldescription.split(readystring).length > 1) { e.fulldescription = e.fulldescription.split(readystring)[0]; for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { eq.fulldescription = eq.fulldescription.split(readystring)[0]; eq.animate(~flash~); eq.setvar(~test~|false); break; } } } e.setvar(~test~|false);,,NORMAL,,PURPLE,,,,_fire,0,NO,NO,excludefromrandomlists,,,var readystring = ~#~.substr(0|1) + ~[purple](ready)~; if(e.fulldescription.split(readystring).length > 1) { e.fulldescription = e.fulldescription.split(readystring)[0]; },var readystring = ~#~.substr(0|1) + ~[purple](ready)~; if(e.fulldescription.split(readystring).length > 1) { e.fulldescription = e.fulldescription.split(readystring)[0]; },,,,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~|true); } },,,
Swamp Gas,Convert enemy's|[vanish]vanish to [poison]poison|[80%][gray]''Reflected by a weather balloon'',2,var g = getstatus(~ncr_vanish~); if(getstatus(VANISH) > 0) { g = target.dice + target.extradice + target.bonusdice; } if(g > 0) { inflict(POISON|g); sfx(~_vanish~); sfx(~_poison~); removestatus(~ncr_vanish~|ALL); removestatus(VANISH|ALL); } else {self.textparticle(~No effect!~); },,EVEN,,PURPLE,simplify,complicate,,none,0,NO,NO,,,,,,,,,,,,,
Lucky Charm,Double the success odds|of chance based items,2,inflictself(~luck~);,,EVEN,,GREEN,simplify,complicate,,none,0,YES,,,,,,,,,,,,,,
Reckless Flailing,(100/<d6>)% chance: [sword]<triple>|Otherwise[;] no effect,2,var odds = (100 / d); if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0 # odds > 100){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3); sfxdamage(target|d * 3); } else { self.textparticle(~No effect!~); },,NORMAL,,RED,change_power,change_power,,none,0,NO,,,,,,,,,,,,,,
Reckless Flailing_upgraded,(100/<d6>)% chance: [sword]<triple>|Otherwise[;] do [sword]2 damage,2,var odds = (100 / d); if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0 # odds > 100){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3); sfxdamage(target|d * 3); } else { attack(2); sfxdamage(target|2); },,NORMAL,,RED,,,,none,0,NO,,,,,,,,,,,,,,
Reckless Flailing_downgraded,(100/<d6>)% chance: [sword]<double>|Otherwise[;] no effect,2,var odds = (100 / d); if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0 # odds > 100){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 2); sfxdamage(target|d * 3); } else { self.textparticle(~No effect!~); },,NORMAL,,RED,,,,none,0,NO,,,,,,,,,,,,,,
Beginner's Luck,If you have [heal]Luck[;]|exchange it for a blessing|Return the dice,2,if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0) { removestatusself(~luck~); removestatusself(~luck+~); var sfxdelay = 0; for(i in 0...0) { var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD|FURY|REDUCE|REEQUIPNEXT|DODGE]); } else { randomstatus = rand([SHIELD|REDUCE|REEQUIPNEXT|DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus | a); sfx(~_~ + randomstatus.toLowerCase()|~~|sfxdelay); sfxdelay += 0.1; } } else { self.textparticle(~No effect!~); } givedice(d);,,NORMAL,,GREEN,change_power,change_power,,none,0,YES,,,,,,,,,,donothing();,,,,
Beginner's Luck_upgraded,If you have [heal]Luck[;]|gain a blessing|Return the dice,2,if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0) { var sfxdelay = 0; for(i in 0...0) { var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD|FURY|REDUCE|REEQUIPNEXT|DODGE]); } else { randomstatus = rand([SHIELD|REDUCE|REEQUIPNEXT|DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus | a); sfx(~_~ + randomstatus.toLowerCase()|~~|sfxdelay); sfxdelay += 0.1; } } else { self.textparticle(~No effect!~); } givedice(d);,,NORMAL,,GREEN,,,,none,0,YES,,,,,,,,,,donothing();,,,,
Beginner's Luck_downgraded,If you have [heal]Luck[;]|exchange it for a blessing,2,if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0) { removestatusself(~luck~); removestatusself(~luck+~); var sfxdelay = 0; for(i in 0...0) { var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD|FURY|REDUCE|REEQUIPNEXT|DODGE]); } else { randomstatus = rand([SHIELD|REDUCE|REEQUIPNEXT|DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus | a); sfx(~_~ + randomstatus.toLowerCase()|~~|sfxdelay); sfxdelay += 0.1; } } else { self.textparticle(~No effect!~); },,NORMAL,,GREEN,,,,none,0,YES,,,,,,,,,,,,,,
Fissure,33% chance: [fire]<triple> dmg|Otherwise[;] no effect,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3|FIRE); sfxdamage(target|d * 3); } else { self.textparticle(~No effect!~); },,ODD,,RED,change_power,change_power,,none,0,NO,,,,,,,,,,,,,,
Fissure_upgraded,33% chance: [fire]<triple> dmg|Otherwise[;] roll a burnt dice,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3|FIRE); sfxdamage(target|d * 3); } else { inflictself(FIRE); givedice(); },,ODD,,RED,,,,none,0,NO,,,,,,,,,,,,,,
Fissure_downgraded,33% chance: [fire]<triple> dmg|Otherwise[;] take [fire]3 dmg,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3|FIRE); sfxdamage(target|d * 3); } else { attackself(3|FIRE); },,ODD,,RED,,,,none,0,NO,,,,,,,,,,,,,,
Sheer Cold,33% chance: [ice]<triple> dmg|Otherwise[;] no effect,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3|ICE); sfxdamage(target|d * 3); } else { self.textparticle(~No effect!~); },,ODD,,BRIGHTCYAN,change_power,change_power,,none,0,NO,,,,,,,,,,,,,,
Sheer Cold_upgraded,33% chance: [ice]<triple> dmg|Otherwise[;] roll a 1,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3|ICE); sfxdamage(target|d * 3); } else { givedice(1); },,ODD,,BRIGHTCYAN,,,,none,0,NO,,,,,,,,,,,,,,
Sheer Cold_downgraded,33% chance: [ice]<triple> dmg|Otherwise[;] take [ice]3 dmg,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3|ICE); sfxdamage(target|d * 3); } else { attackself(3|ICE); },,ODD,,BRIGHTCYAN,,,,none,0,NO,,,,,,,,,,,,,,
Guillotine,33% chance: [vanish]<triple> dmg|Otherwise[;] no effect,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3|VANISH); sfxdamage(target|d * 3); } else { self.textparticle(~No effect!~); },,ODD,,PINK,change_power,change_power,,none,0,NO,,,,,,,,,,,,,,
Guillotine_upgraded,33% chance: [vanish]<triple> dmg|Otherwise[;] roll a dice[;] get [vanish]1,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3|VANISH); sfxdamage(target|d * 3); } else { givedice(); inflictself(~ncr_vanish~); },,ODD,,PINK,,,,none,0,NO,,,,,,,,,,,,,,
Guillotine_downgraded,33% chance: [vanish]<triple> dmg|Otherwise[;] take [vanish]3 dmg,2,var odds = 33; if(getstatusself(~luck~) > 0){ odds *= 2; } if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success!~); attack(d * 3|VANISH); sfxdamage(target|d * 3); } else { self.textparticle(~No effect!~); },,ODD,,PINK,,,,none,0,NO,,,,,,,,,,,,,,
Trinity Charm,Roll a 3[;] 33% chance|to roll another 3,2,var odds = 33.33; if(getstatusself(~luck~) > 0){ odds = 66.66; } if(getstatusself(~luck+~) > 0){ odds = 100; }   if(chance(odds)) { self.textparticle(~Success!~); givedice([3|3]); } else{ givedice(3); },,MIN4,,YELLOW,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Trinity Charm_upgraded,Roll a 3[;] 33% chance|to roll another 3,2,var odds = 33.33; if(getstatusself(~luck~) > 0){ odds = 66.66; } if(getstatusself(~luck+~) > 0){ odds = 100; }   if(chance(odds)) { self.textparticle(~Success!~); givedice([3|3]); } else{ givedice(3); },,COUNTDOWN,4,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Trinity Charm_downgraded,Roll a 3,2,givedice(3); /*tc has gone through a million and one iterations. in its very first incarnation it was a 3-coutndown 33% chance to roll a 3; 3 uses this turn but it kind of captured the very essence of why jackeea doesn't like chance items. same with when its chance was to roll three 3s. at some point the base was needs 3 and the upgrade made it min 3. the incarnation this was in before i wrote this note and redesigned it was the same as before; but min3 and the upgrade made it a countdown of 3. for the longest time i refused to touch tc because i didn't want it to involve any number that wasn't a 3. this incarnation involves a 4 (min; countdown) and a 2 (how many 3s you roll when the chance succeeds). oh well. (also: in its very first few stages; it was green. how bizarre is that?) (also also: if this were morefluff i would've just stuck with the first design and never rethought it. nah jk ilu jackeea)*/,,MIN4,,YELLOW,,,,,0,YES,NO,,,,,,,,,,,,,
Delicious Fruit,50% chance to heal [heal]4[;]|otherwise[;] lose [heart]2 health,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds = 100; } else if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { attackself(-4); sfx(~_heal~); } else { pierceattackself(2); sfxdamage(self|2); },,ODD,,RED,simplify,change_power,,none,0,YES,NO,,1,,,,,,,,,,,
Delicious Fruit_downgraded,50% chance to heal [heal]4[;]|otherwise[;] lose [heart]4 health,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds = 100; } else if(getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { attackself(-4); sfx(~_heal~); } else { pierceattackself(4); sfxdamage(self|2); },,ODD,,RED,,,,none,0,YES,NO,,,,,,,,,,,,,
Respite,Heal [heal]0.5x<charge>[;] return dice|Take self-damage to charge,2,attackself(-e.charge * 0.5); givedice([d|d]);,,DOUBLES|DOUBLES,,RED,change_power,complicate,,_heal,0,NO,NO,,,,self.setvar(~selfdmg_music~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } self.setvar(~selfdmg~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg_music~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } e.charge = self.getvar(~selfdmg_music~);,,var l = e.fulldescription.split(~<charge>~); if(l.length > 1) { e.fulldescription = l.join(e.charge); } self.setvar(~selfdmg_music~|e.charge);,,,,,
Respite_upgraded,Heal [heal]0.5x<charge>[;] return dice|Take self-damage to charge,2,attackself(-e.charge * 0.5); givedice(d);,,EVEN,,RED,,,,_heal,0,NO,NO,,,,self.setvar(~selfdmg_music~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } self.setvar(~selfdmg~|0); e.charge = 0;,var l = e.fulldescription.split(self.getvar(~selfdmg_music~)); if(l.length > 1) { e.fulldescription = l.join(~<charge>~); } e.charge = self.getvar(~selfdmg_music~);,,var l = e.fulldescription.split(~<charge>~); if(l.length > 1) { e.fulldescription = l.join(e.charge); } self.setvar(~selfdmg_music~|e.charge);,,,,,
Super Backfire,Lose [heart]5 health|Return the dice,2,pierceattackself(5); givedice(d);,,REQUIRE1,,PURPLE,change_backfire,change_power,,_heal,0,YES,NO,,1,,,,,,,,,,,
Super Backfire_downgraded,Lose [heart]15 health|Return the dice,2,pierceattackself(15); givedice(d);,,REQUIRE1,,PURPLE,,,,_heal,0,YES,NO,,,,,,,,,,,,,
Super Backfire_weakened,Lose [heart]15 health|Return the dice,2,pierceattackself(15); givedice(d);,,REQUIRE1,,PURPLE,,,,_heal,0,YES,NO,,,,,,,,,,,,,
Super Backfire_upgraded,Lose [heart]10 health|Return the dice,2,pierceattackself(10); givedice(d);,,REQUIRE1,,PURPLE,,,,_heal,0,YES,NO,,,,,,,,,,,,,
Turbine,Do [sword]1 per locked dice|you have[;] return the dice,2,var lockcount = 0; for(mydice in self.dicepool) { if(mydice.availableorlocked() && mydice.locked) { lockcount++; } } attack(lockcount); sfxdamage(target|lockcount); sfx(~_lock~|~~|0.2); givedice(d);,,EVEN,,PURPLE,simplify,change_power,,,,,,,,givedice(d);,,,,,,,,,,
Turbine_downgraded,Do [sword]1 per locked dice|you have[;] lock this dice,2,var lockcount = 0; for(mydice in self.dicepool) { if(mydice.availableorlocked() && mydice.locked) { lockcount++; } } attack(lockcount); sfxdamage(target|lockcount); sfx(~_lock~|~~|0.2); givedice(d); var lockisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~lock~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_lock~) { lockisalt = true; } } }  if(lockisalt) {  for(mydice in [for(i in 0...1) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.animate(~alternate_lock~);  }  inflictself(~alternate_lock~|1); } else {  for(mydice in [for(i in 0...1) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.locked = true;  }  sfx(~_lock~); },,EVEN,,PURPLE,,,,,,,,,,givedice(d); var lockisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~lock~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_lock~) { lockisalt = true; } } }  if(lockisalt) {  for(mydice in [for(i in 0...1) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.animate(~alternate_lock~);  }  inflictself(~alternate_lock~|1); } else {  for(mydice in [for(i in 0...1) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.locked = true;  }  sfx(~_lock~); },,,,,,,,,,
One Way Mirror,[]+2 dice this fight[;] but every|<d6> you roll will be locked,2,self.extradice += 2; inflictself(~ncr_lingeringcounter~ + d); sfx(~_lock~|~~|0.1);,,NORMAL,,PURPLE,change_power,change_power,,magic_gaindice,,YES,,,,,,,,,,,,,,
One Way Mirror_downgraded,[]+2 dice this fight[;] but every|<d6> you roll will be locked,2,self.extradice += 2; inflictself(~ncr_lingeringcounter~ + d); sfx(~_lock~|~~|0.1);,,MIN4,,PURPLE,,,,magic_gaindice,,YES,,,,,,,,,,,,,,
One Way Mirror_upgraded,[]+3 dice this fight[;] but every|<d6> you roll will be locked,2,self.extradice += 3; inflictself(~ncr_lingeringcounter~ + d); sfx(~_lock~|~~|0.1);,,NORMAL,,PURPLE,,,,magic_gaindice,,YES,,,,,,,,,,,,,,
Blow,Bump and lock dice[;]|return the dice,2,var lockamt = 1; if(d >= 6) lockamt = 2; var lockisalt = false; var dummyfighter = new elements.Fighter(~Wisp~); dummyfighter.addstatus(~lock~|1); trace(dummyfighter.status.length); if(dummyfighter.status.length > 0) { for(stat in dummyfighter.status) { if(stat.type == ~alternate_lock~) { lockisalt = true; } } } if(lockamt == 1) { givedice([d|d + 1]); } else { givedice([6|1|6]); }  if(lockisalt) {  for(mydice in [for(i in 0...lockamt) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.animate(~alternate_lock~);  }  inflictself(~alternate_lock~|lockamt); } else {  for(mydice in [for(i in 0...lockamt) self.dicepool[(self.dicepool.length - 1) - i]]) {   mydice.locked = true;  }  sfx(~_lock~); } /* if(d < 6) { inflictself(LOCK); givedice([d + 1|d]); } else { inflictself(LOCK|2); givedice([6|1|6]); } */,,MAX5,,PURPLE,simplify,complicate,,_lock,,YES,,,,,,,,,,,,,,
Retroreflector,Roll one dice per|extra dice this fight,2,var dicelist = []; if(self.extradice > 0) for (i in 0...self.extradice) { dicelist.push(rand([1|2|3|4|5|6])); } if (dicelist.length == 0) { self.textparticle(~No effect!~); } else { givedice(dicelist); },,COUNTDOWN,6,PURPLE,change_power,change_function,,magic_gaindice,0,YES,NO,,2,,,,,,,,,,,
Retroreflector_upgraded,Roll one dice per|extra dice this fight[;]|+1 this fight if this fails,2,var dicelist = []; if(self.extradice > 0) for (i in 0...self.extradice) { dicelist.push(rand([1|2|3|4|5|6])); } if (dicelist.length == 0) { self.extradice++; } else { givedice(dicelist); },,COUNTDOWN,6,PURPLE,,,,magic_gaindice,0,YES,NO,,,,,,,,,,,,,
Retroreflector_downgraded,Roll one dice per|extra dice this fight[;]|-1 this fight if this works,2,var dicelist = []; if(self.extradice > 0) for (i in 0...self.extradice) { dicelist.push(rand([1|2|3|4|5|6])); } if (dicelist.length == 0) { self.textparticle(~No effect!~); } else { self.extradice--; givedice(dicelist); },,COUNTDOWN,6,PURPLE,,,,magic_gaindice,0,YES,NO,,,,,,,,,,,,,
Dark Hedges,Gain [thorns]5 thorns|[gray](once per battle),2,inflictself(THORNS| 5); /*battle cry used to be this back in closed beta when thorns? was identical to weaken? but made you do extra damage instead of making the enemy take extra damage*/,,REQUIRE5,,GREEN,reducesize,change_power,,_thorns,0,YES,YES,,,,,,,,,,,,,
Dark Hedges_downgraded,Gain [thorns]3 thorns|[gray](once per battle),2,inflictself(THORNS| 3);,,REQUIRE3,,GREEN,,,,_thorns,0,YES,YES,,,,,,,,,,,,,
Dark Hedges_weakened,Gain [thorns]3 thorns|[gray](once per battle),2,inflictself(THORNS| 3);,,REQUIRE3,,GREEN,,,,_thorns,0,YES,YES,,,,,,,,,,,,,
Dark Hedges_deckupgrade,Gain [thorns]5 thorns|[gray](once per battle),2,inflictself(THORNS| 5);,,MIN5,,GREEN,,,,_thorns,0,YES,YES,,,,,,,,,,,,,
Equipment That Does Nothing,Equipment That Does Nothing,2,self.equipmentused--; self.equipmenthistory.pop();,,NORMAL,,,,,,,,YES,,excludefromrandomlists|weakenavoid|shockavoid|altpoisonavoid|curseavoid|internal,,,,,,,,,,,e.maintainfury = true; e.preventdefault = true;,
Smoke Signal,Stash dice for next|turn[;] then return it,2,inflictself(~stash~+d|1); inflictself(~illuminate~); givedice(d);,,MIN4,,RED,simplify,complicate,,magic,0,YES,,,,,,,,,,,,,,
Wolf Puppy[],Bark Bark Bark|Everyone gets [fury]Fury,2,inflictself(FURY); inflict(FURY); /*name is weird so it does not replace the actual wolf puppy card in backstage*/,,,,RED,,change_power,,_fury,0,YES,NO,powercard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Wolf Puppy[]_downgraded,Scratch Scratch Scratch|Everyone takes [sword]2 dmg,2,attack(2); attackself(2); sfxdamage(self|2); sfxdamage(target|2);,,,,RED,,,,_fury,0,YES,NO,powercard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Wolf Puppy?,Injection|Next card use also|deals [d6] damage,2,inflictself(~ncr_injection~); sfx(~_cure~); var cardlist = Deck.getcards(~all~); var injectstring = ~if(getstatusself(\~ncr_injection\~) > 0 && d > 0) { attack(d); sfxdamage(target|d); removestatusself(\~ncr_injection\~|1); } ~; for(c in cardlist) { if(c.equipment.script.indexOf(injectstring) == -1) { c.equipment.script = injectstring + c.equipment.script; } } /*purposefully not doing it the more obvious way with statuseffects.csv - cody pioneered script injection*/,,,,RED,,change_power,,none,0,YES,NO,alternateversion|powercard,,,,,,,,,,,,
Wolf Puppy?_downgraded,Popular Request|Gain [recycle]Re-Equip[],2,inflictself(REEQUIPNEXT);,,,,RED,,,,_recycle,0,YES,NO,alternateversion|powercard,,,,,,,,,,,,
Wisp[],Spirit Bomb|Do [sword]2 damage|per duplicate dice,2,var dicelist = []; for(mydice in self.dicepool) { if(mydice.available()) { dicelist.push(mydice); } } for(i in 1...7) { for(mydice in self.dicepool) { if(mydice.basevalue == i) { dicelist.remove(mydice); break; } } } if(dicelist.length == 0) { self.textparticle(~No effect!~); } else { attack(dicelist.length * 2); sfxdamage(target|dicelist.length * 2); },,,,PURPLE,,change_power,,none,0,NO,NO,powercard,,var dicelist = []; var t = 0; for(mydice in self.dicepool) { if(mydice.available()) { dicelist.push(mydice); } } for(i in 1...7) { for(mydice in self.dicepool) { if(mydice.basevalue == i) { dicelist.remove(mydice); break; } } } if(dicelist.length == 0) { self.textparticle(~No effect!~); } else { for(mydice in dicelist) { mydice.animate(~disappear~|t); t += 0.1; } },,,,,,,,,,
Wisp[]_downgraded,Fool's Fool's Fire|Do [sword]4[;] get [vanish]Vanish_ALL,2,attack(4); inflictself(VANISH);,,,,PURPLE,,,,none,0,NO,NO,powercard,,inflictself(VANISH);,,,,,,,,,,
Wisp?,Signed Portrait|Get a brilliant and|creative item,2,//$replacemewith(rand([~Keyhole~|~Ashley Bat~|~Sacred Grounds~|~Drill~|~Virtue Grip~|~new elements.Equipment(null);~|~Tap~])| -1);$ /*readd hammer up! once https://github.com/TerryCavanagh/diceydungeons.com/issues/1840 is addressed*/,,,,PURPLE,,change_power,,_vanish,0,YES,NO,alternateversion|powercard|cannotreuse,,,,,,,,,,,,
Wisp?_downgraded,Eternal Damnation|Install and instantly activate|the worst mod imaginable,2,self.textparticle(~Too late~);,,,,PURPLE,,,,_vanish,0,YES,NO,alternateversion|powercard,,,,,,,,,,,,
Alchemist[],Brewery|Random effect|(never harms you),2,var effects = [~damage~|~heal~|~poison~|~fire~|~ice~|~ncr_vanish~]; var selectableeffects = effects.copy(); selectableeffects.remove(~heal~); var adjectives = [~Spiky~|~Healthy~|~Toxic~|~Fire~|~Ice~|~Milky~]; var effect = rand(selectableeffects); if(e.castdirection == -1) effect = ~heal~; var adjective = adjectives[effects.indexOf(effect)]; self.textparticle(adjective + ~ Brew!~); if(effect == ~damage~) { sfxdamage(target|2); attack(2); } if(effect == ~heal~) { sfx(~_heal~); attackself(-2); } if(effect != ~damage~ && effect != ~heal~) { sfx(~_~ + effect); if(effect == ~poison~) { inflict(effect|2); } else { inflict(effect); } },,,,GRAY,,change_function,,,,,,powercard,,,,,,,,,if(chance(100/6)) e.castdirection = -1; else e.castdirection = 1;,,,
Alchemist[]_downgraded,Potion of Water|No effect,2,self.textparticle(~No effect!~);,,,,GRAY,,,,,,,,powercard,,,,,,,,,,,,
Alchemist?,[80%]Negative Suggestion|Inflict [weaken]1 weaken,2,inflict(WEAKEN); sfx(~_weaken~); /*'negative' because it makes cards switch to their - version; 'suggestion' because weaken's modern form was first suggested by yinyin*/,,,,GRAY,,change_function,,,,,,alternateversion|powercard,,,,,,,,,,,,
Alchemist?_downgraded,Rumble|Mix up slots on|enemy cards,2,inflict(~ncr_jumble~); sfx(~_weaken~); /*another form of weaken suggested by yinyin*/,,,,GRAY,,,,,,,,alternateversion|powercard,,,,,,,,,,,,
Cactus?,Lead Balloon|Roll 3 new dice[;] but|they're filled with lead,2,/*funny enough i actually looked at mysticsword's 'helium shooter' for reference since i wanted the dice to accelerate when falling - helium balloon itself just continuously kicks dice upward*/  if(!self.isplayer) { bonus(-99999999); self.textparticle(~No effect!~); }  if(self.isplayer) {  var gravityindices = self.getvar(~gravityindices~);  var gravityspeedindices = self.getvar(~gravityspeedindices~);  givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]);  gravityindices.push(self.dicepool.length - 1);  gravityindices.push(self.dicepool.length - 2);  gravityindices.push(self.dicepool.length - 3);  self.setvar(~gravityindices~|gravityindices);  for(i in 0...gravityindices.length) {   gravityspeedindices.push(0);  }  self.setvar(~gravityspeedindices~|gravityspeedindices); }  var skipsetup = false;  if(self.getvar(~leadactuator~) + 1 == ~SimpleActuator1~ # !self.isplayer) skipsetup = true; trace(skipsetup); if(skipsetup) trace(~skipping setup~); if(!skipsetup) {  trace(~starting lead actuator~);  var tw = new motion.actuators.SimpleActuator(null|0|null);  tw._repeat = -1;  var s = new elements.Skill(~Against all odds_old~);  s.script = ~   var gravityindices = self.getvar(\~gravityindices\~);   var gravityspeedindices = self.getvar(\~gravityspeedindices\~);   var changesmade = false;   var diceavailable = false;   if(self.doendturnnow # self.hp <= 0 # self.graphic == null # target == null # target.graphic == null # target.hp <= 0) {    trace(\~lead actuator stopped\~);    self.getvar(\~leadactuator\~).stop();    self.resetvar(\~leadactuator\~);    self.setvar(\~gravityindices\~|[]);    self.setvar(\~gravityspeedindices\~|[]);    diceavailable = true; /*kludge so the second 'can we leave yet?' check is bypassed*/   }   else {    if(gravityindices.length == 0) {     trace(\~gravityindices is empty! stopping\~);     self.getvar(\~leadactuator\~).stop();     self.resetvar(\~leadactuator\~);     self.setvar(\~gravityindices\~|[]);     self.setvar(\~gravityspeedindices\~|[]);    }    else {     for(indice in gravityindices) { /*my x key is being uncooperative*/      var mydice = self.dicepool[indice];      if(mydice == null) {       trace(\~a dice referred to by gravityindices is null. stopping\~);       self.getvar(\~leadactuator\~).stop();       self.resetvar(\~leadactuator\~);       self.setvar(\~gravityindices\~|[]);       self.setvar(\~gravityspeedindices\~|[]);       break;      }      if(!mydice.intween() && !mydice.grabbed && !mydice.consumed && mydice.assigned == null) {       if(mydice.y > 4000) { /*guessing this is roughly below the bottom of the screen. no way to get screen height currently*/        mydice.consumed = true;        }       mydice.y = mydice.y + gravityspeedindices[gravityindices.indexOf(indice)];       gravityspeedindices[gravityindices.indexOf(indice)] += 0.275;       changesmade = true;      }      if(mydice.intween() # mydice.grabbed # mydice.consumed # mydice.assigned != null) {       gravityspeedindices[gravityindices.indexOf(indice)] = 0;       changesmade = true;      }      if(!diceavailable && !mydice.consumed) {       if(mydice.assigned == null # mydice.assigned.ready) {        diceavailable = true;       }      }     }    }   }   if(changesmade) {    self.setvar(\~gravityindices\~|gravityindices);    self.setvar(\~gravityspeedindices\~|gravityspeedindices);   }   if(!diceavailable) {    trace(\~all lead dice gone! stopping\~);    self.getvar(\~leadactuator\~).stop();    self.resetvar(\~leadactuator\~);    self.setvar(\~gravityindices\~|[]);    self.setvar(\~gravityspeedindices\~|[]);   }  ~;  tw.onRepeat(s.execute|[self|target]);  self.setvar(~leadactuator~|tw);  s.execute(self|target);  tw.move(); },,,,GREEN,,change_function,,,,YES,,alternateversion|powercard,,,,,self.setvar(~gravityindices~|[]); self.setvar(~gravityspeedindices~|[]);,,,,,,,
Cactus?_downgraded,Torture Machine|Split all dice below 2,2,var dicelist = []; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue < 2){ dicelist.push(mydice); } } if(dicelist.length > 0) { sfx(~splitdice~); for(mydice in dicelist) { mydice.removedice(self.screenposition()); givedice(split(mydice.basevalue)); } },,,,GREEN,,,,,,YES,,alternateversion|powercard,,,,,,,,,,,,
Cactus[],Needle|Gain [thorns]1 thorns,2,inflictself(THORNS|1);,,,,GREEN,,change_function,,_thorns,0,YES,NO,powercard,,,,,,,,,,,,
Cactus[]_downgraded,Poke|Do [sword]2 damage,2,attack(2); sfxdamage(target|2); sfx(~_thorns~|~~|0.2);,,,,GREEN,,,,,,,,powercard,,,,,,,,,,,,
Haunted Jar[],Haunted Tray|If you are out of dice[;]|inflict [poison]3 poison,2,var diceavailable = false; for(dice in self.dicepool) { if(dice.available()) { diceavailable = true; break; } } for(eq in self.equipment) { if(eq.isready() && eq.assigneddice.length > 0) { for(dice in eq.assigneddice) { if(dice != null && dice.available()) { diceavailable = true; break; } } } } if(!diceavailable) { inflict(POISON|3); sfx(~_poison~); } else { self.textparticle(~No effect!~); },,,,PURPLE,,change_function,,,,,,powercard,,,,,,,,,,,,
Haunted Jar?,True Purple|Get a random purple card,2,if(self.layout != ~DECK~ && !simulation) { for(eq in self.equipment) { eq.setvar(~alreadyheretemp~|1); } } if(self.layout != ~DECK~ && !simulation) { var descriptionblacklist = loadtext(~diceydungeons/itemspawnerdescblacklist~); var scriptblacklist = [~self.equipment~|~new elements.Equipment~|~self.getvar(\~fixedeqlist\~).indexOf(e)~]; var checkblacklist = function(text|list) {  for(phrase in list) {   if(text.indexOf(phrase) != -1) {    return(false);   }  }  return(true); }; var purpleeq = ~~; var exceptions = [~skillcard~|~excludefromrandomlists~|~alternateversion~|~robotonly~|~witchonly~|~inventoronly~|~onceperbattle~]; if(self.usecpuinsteadofdice) exceptions.remove(~robotonly~); if(self.getskillcard() != null && self.getskillcard().skillcard == ~witch~) exceptions.remove(~witchonly~); if(self.getskillcard() != null && self.getskillcard().skillcard == ~inventor~) exceptions.remove(~inventoronly~); var geteqs = getequipmentlist(null|[]|exceptions); geteqs = shuffle(geteqs); var placeholder = new elements.Equipment(~Seize~); var count = 0; while(purpleeq == ~~) {  placeholder.create(geteqs[count]);  trace(placeholder.fulldescription); trace(placeholder.getslots());  var ds = placeholder.fulldescription;  var sc = placeholder.script;  var scbx = placeholder.scriptbeforeexecute;  if(   placeholder.equipmentcol == 5 &&   !(placeholder.hastag(~powercard~)) &&   checkblacklist(ds|descriptionblacklist) &&   checkblacklist(sc|scriptblacklist) &&   checkblacklist(scbx|scriptblacklist)  ) {   purpleeq = placeholder.name;  } /*else { geteqs.remove(placeholder.name); }*/ count++; trace(count); if(count >= geteqs.length) { placeholder.create(~Seize~); purpleeq = ~Seize~; break; } } if( self.layout == ~DECK~) { replacemewith(purpleeq|-1); } else { giveequipment(purpleeq); } for(eq in self.equipment) { if(eq.getvar(~alreadyheretemp~) != 1) { self.setvar(~doonthis~|eq); } } var estandardize = ~var e = self.getvar(\~doonthis\~); ~;var doscripts = new elements.Skill(~Against all odds_old~); doscripts.script = estandardize + placeholder.scriptbeforecombat; doscripts.execute(self|target); doscripts.script = estandardize + placeholder.scriptbeforestartturn; doscripts.execute(self|target); doscripts.script = estandardize + placeholder.scriptonstartturn; doscripts.execute(self|target); self.resetvar(~doonthis~); placeholder.name = ~deletemetemp~; self.equipment.push(placeholder); removeequipment(~deletemetemp~); for(eq in self.equipment) { eq.resetvar(~alreadyheretemp~); } } //$trace(~yo~); trace(Deck.getcardlist(~all~)); if((self.layout == ~DECK~) && !simulation) { for(eq in self.equipment) { eq.setvar(~alreadyheretemp~|1); } } if((self.layout == ~DECK~) && !simulation) { var descriptionblacklist = loadtext(~diceydungeons/itemspawnerdescblacklist~); var scriptblacklist = [~self.equipment~|~new elements.Equipment~|~self.getvar(\~fixedeqlist\~).indexOf(e)~]; var checkblacklist = function(text|list) {  for(phrase in list) {   if(text.indexOf(phrase) != -1) {    return(false);   }  }  return(true); }; var purpleeq = ~~; var exceptions = [~skillcard~|~excludefromrandomlists~|~alternateversion~|~robotonly~|~witchonly~|~inventoronly~|~onceperbattle~]; if(self.usecpuinsteadofdice) exceptions.remove(~robotonly~); if(self.getskillcard() != null && self.getskillcard().skillcard == ~witch~) exceptions.remove(~witchonly~); if(self.getskillcard() != null && self.getskillcard().skillcard == ~inventor~) exceptions.remove(~inventoronly~); var geteqs = getequipmentlist(null|[]|exceptions); geteqs = shuffle(geteqs); var placeholder = new elements.Equipment(~Seize~); var count = 0; while(purpleeq == ~~) {  placeholder.create(geteqs[count]);  trace(placeholder.fulldescription); trace(placeholder.getslots());  var ds = placeholder.fulldescription;  var sc = placeholder.script;  var scbx = placeholder.scriptbeforeexecute;  if(   placeholder.equipmentcol == 5 &&   !(placeholder.hastag(~powercard~)) &&   checkblacklist(ds|descriptionblacklist) &&   checkblacklist(sc|scriptblacklist) &&   checkblacklist(scbx|scriptblacklist)  ) {   purpleeq = placeholder.name;  } count++; trace(count); if(count >= geteqs.length) { placeholder.create(~Seize~); purpleeq = ~Seize~; break; } } if(self.layout == ~DECK~) { trace(~doing jester replace~); replacemewith(purpleeq|-1); } else { trace(~doing... other replace~); giveequipment(purpleeq); } for(eq in self.equipment) { if(eq.getvar(~alreadyheretemp~) != 1) { self.setvar(~doonthis~|eq); } } var estandardize = ~var e = self.getvar(\~doonthis\~); ~;var doscripts = new elements.Skill(~Against all odds_old~); doscripts.script = estandardize + placeholder.scriptbeforecombat; doscripts.execute(self|target); doscripts.script = estandardize + placeholder.scriptbeforestartturn; doscripts.execute(self|target); doscripts.script = estandardize + placeholder.scriptonstartturn; doscripts.execute(self|target); self.resetvar(~doonthis~); placeholder.name = ~deletemetemp~; self.equipment.push(placeholder); removeequipment(~deletemetemp~); for(eq in self.equipment) { eq.resetvar(~alreadyheretemp~); } }$,,,,PURPLE,,change_function,,,,YES,,alternateversion|powercard|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Haunted Jar[]_downgraded,Cough|Inflict [poison]1 poison,2,inflict(POISON); sfx(~_poison~);,,,,PURPLE,,,,,,,,powercard,,,,,,,,,,,,
Haunted Jar?_downgraded,Architecture Simulator|Get a Plasma Cannon,2,if( self.layout == ~DECK~) { replacemewith(~Plasma Cannon~|-1); } else { giveequipment(~Plasma Cannon~); },,,,PURPLE,,,,,,YES,,alternateversion|powercard|cannotreuse,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Robobot[],Electrocute|Do [shock]4 damage[;] but|[shock]shock your other 2 cards,2,attack(SHOCK|4); //$inflictself(SHOCK|2); var hasshockavoid = e.hastag(~shockavoid~); e.addtag(~shockavoid~); self.applyequipmentcurses(); if(!hasshockavoid) e.removetag(~shockavoid~);$,,,,YELLOW,,change_function,,_shock,,,,powercard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Robobot[]_downgraded,Broken Charger|Inflict [shock]1 shock[;] but|[shock]shock your other 2 cards,2,inflict(SHOCK); //$inflictself(SHOCK|2); var hasshockavoid = e.hastag(~shockavoid~); e.addtag(~shockavoid~); self.applyequipmentcurses(); if(!hasshockavoid) e.removetag(~shockavoid~);$,,,,YELLOW,,,,_shock,,,,powercard,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Robobot?,Short Temper|For the next 5 seconds[;] deal|and take +[sword]2 for all attacks,2,if(!self.isplayer) { bonus(-99999999); self.textparticle(~No effect!~); }  var skipsetup = false;  if(self.getvar(~poweractuator~) + 1 == ~SimpleActuator1~ # !self.isplayer) skipsetup = true; trace(skipsetup); if(skipsetup && self.isplayer) { trace(~skipping setup~); self.setvar(~ncrpowertime~|self.getvar(~ncrpowertime~) + 5.0); } if(!skipsetup) {  trace(~starting power actuator~);  var Rules = self.getvar(~ncr_get_Rules~);  self.setvar(~ncrpowertime~|5.0);  if(Rules.bonusdamage == null) Rules.bonusdamage = 0;  self.setvar(~oldbonusdamage~|Rules.bonusdamage);  Rules.bonusdamage += 2;  inflictself(~extradamage~|2);  inflict(~extradamage~|2);  var tw = new motion.actuators.SimpleActuator(null|0.1|null);  tw._repeat = -1;  var s = new elements.Skill(~Against all odds_old~);  s.script = ~   var Rules = self.getvar(\~ncr_get_Rules\~);   if(self.getvar(\~ncrpowertime\~) <= 0.01 # self.doendturnnow # self.hp <= 0 # self.graphic == null # target == null # target.graphic == null # target.hp <= 0) {    trace(\~power actuator stopping\~);    Rules.bonusdamage = self.getvar(\~oldbonusdamage\~);    removestatusself(\~extradamage\~|2);    if(target.status != null) removestatus(\~extradamage\~|2);    self.resetvar(\~oldbonusdamage\~);    self.getvar(\~poweractuator\~).stop();    self.resetvar(\~poweractuator\~);    self.resetvar(\~ncr_get_Rules\~);    new elements.CombatCommand(\~msg\~|\~\~).execute();    sfx(\~_weaken\~);   }   else {    var time = self.getvar(\~ncrpowertime\~);    var timestring = time + \~\~;    timestring = timestring.split(\~0000\~)[0];    if(timestring.length < 2) timestring += \~.0\~;    new elements.CombatCommand(\~msg\~|\~[200%]\~ + timestring).execute();    time -= 0.1;    self.setvar(\~ncrpowertime\~|time);   }  ~;  tw.onRepeat(s.execute|[self|target]);  self.setvar(~poweractuator~|tw);  s.execute(self|target);  tw.move(); },,,,YELLOW,,change_function,,upgradeequipment,,YES,,alternateversion|powercard|curseavoid,,,,,,,self.resetvar(~ncr_get_Rules~|Rules);,,self.setvar(~ncr_get_Rules~|Rules);,,e.preventdefault = true; e.maintainfury = true;,
Robobot?_downgraded,Mystic's Sword|Do [sword]2 damage,2,attack(2); sfxdamage(target|2);,,,,YELLOW,,,,,,,,alternateversion|powercard,,,,,,,self.resetvar(~ncr_get_Rules~|Rules);,,self.setvar(~ncr_get_Rules~|Rules);,,,
Aoife[],Guard|Gain [shield]3 shield,2,inflictself(SHIELD|3);,,,,PINK,,change_function,,_shield,,,,powercard,,,,,,,,,,,,
Aoife[]_downgraded,Sabre|Bash with shield,2,if(getstatusself(SHIELD) == 0) { attack(0); sfxdamage(target|0); sfx(~_shield~|~~|0.2); self.textparticle(~No effect!~); } else { attack(getstatusself(SHIELD)); sfxdamage(target|getstatusself(SHIELD)); sfx(~_shield~|~~|0.2); },,,,PINK,,,,,,,,powercard,,,,,,,,,,,,
Aoife?,Compass Rose|Do [sword]dmg equal to length|of 1st word on 1st card,2,//$trace(~test~); trace(~test~ - 0); var dmgamt = 0; var firstcard = Deck.getcard(0); if(firstcard != null && firstcard.equipment != null && firstcard.equipment.fulldescription.length > 0) { var desc = firstcard.equipment.fulldescription; if(desc != null && desc.length > 0) { if(firstcard.equipment.hastag(~powercard~)) { desc = desc.split(~#~.substr(0|1)); if(desc.length > 1) desc = desc.splice(1|desc.length - 1); desc = desc.join(~#~.substr(0|1)); } desc = desc.split(~[~); for(i in 0...desc.length) { if(desc[i].split(~]~).length > 1) { desc[i] = desc[i].split(~]~)[1]; } } desc = desc.join(~~); desc = desc.split(~|~).join(~~).split(~.~).join(~~).split(~!~).join(~~).split(~?~).join(~~).split(~;~).join(~~).split(~-~).join(~ ~).split(~:~).join(~~).split(~\~~).join(~~).split(~ ~); if(desc[0] - 0 != 0 # desc[0] == ~0~) desc.shift(); trace(desc); dmgamt = desc[0].length; } } attack(dmgamt); sfxdamage(target|dmgamt);$,,,,PINK,,change_function,,,,,,alternateversion|powercard,,,,,,,,,,,,
Aoife?_downgraded,Pace Mace|Do [sword]2 damage,2,attack(2); sfxdamage(target|2);,,,,PINK,,,,,,,,alternateversion|powercard,,,,,,,,,,,,
Gardener[],Shovel Whack|If your dice sum to 15|or more[;] inflict [weaken]2,2,var dicesum = 0; if(self.dicepool.length > 0) for(dice in self.dicepool) { if(dice.available()) { dicesum += dice.basevalue; } } for(eq in self.equipment) { if(eq.isready() && eq.assigneddice.length > 0) { for(dice in eq.assigneddice) { if(dice != null && dice.available()) {dicesum += dice.basevalue; } } } } if(dicesum >= 15) { inflict(WEAKEN|2); sfx(~_weaken~); } else { self.textparticle(~No effect!~); },,,,BRIGHTCYAN,,change_function,,,,,,powercard,,,,,,,,,,,,
Gardener[]_downgraded,Gardening Accident|If sum of dice is odd[;] get [weaken]1|If sum of dice is even[;] get [shock]1,2,var dicesum = 0; if(self.dicepool.length > 0) for(dice in self.dicepool) { if(dice.available()) { dicesum += dice.basevalue; } } for(eq in self.equipment) { if(eq.isready() && eq.assigneddice.length > 0) { for(dice in eq.assigneddice) { if(dice != null && dice.available()) {dicesum += dice.basevalue; } } } } if(dicesum % 2 == 1) { inflictself(WEAKEN); sfx(~_weaken~); } else { inflictself(SHOCK); sfx(~_shock~); } self.applyequipmentcurses();,,,,BRIGHTCYAN,,,,,,YES,,powercard,,,,,,,,,,,,
Gardener?,Livestream|Inflict [shock]1 shock whenever|the enemy attacks you,2,inflict(~ncr_paralysis_all~); /*i actually dunno what hupfen does aside from her livestreaming :(*/,,,,BRIGHTCYAN,,change_function,,_shock,,,,alternateversion|powercard,,,,,,,,,,,,
Gardener?_downgraded,Quantum Circuit|Inflict a random status|(out of: [shock][;] [shock][;] [shock][;] [shock][]),2,inflict(SHOCK);,,,,BRIGHTCYAN,,,,_shock,,,,alternateversion|powercard,,,,,,,,,,,,
Wicker Man[],Burning Man|Burn 2 dice for both,2,var oldburn = 0; var oldaltburn = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~fire~) { oldburn = stat.value; } if(stat.type == ~alternate_fire~) { oldaltburn = stat.value; } } } inflictself(FIRE|2); sfx(~_fire~); inflict(FIRE|2); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(dicelist.length > 1) { dicelist[1].animate(inflictwhat|0.2); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value -= 2; } } } },,,,RED,,change_power,,,,,,powercard,,,,,,,,,,,,
Wicker Man[]_downgraded,Fire Hazard|Burn 1 dice for both,2,var oldburn = 0; var oldaltburn = 0; if(self.status.length > 0) { for(stat in self.status) { if(stat.type == ~fire~) { oldburn = stat.value; } if(stat.type == ~alternate_fire~) { oldaltburn = stat.value; } } } inflictself(FIRE); sfx(~_fire~); inflict(FIRE); var inflictwhat = ~~; for(stat in self.status) { if(stat.type == ~fire~ && stat.value != oldburn) { inflictwhat = stat.type; } if(stat.type == ~alternate_fire~ && stat.value != oldaltburn) { inflictwhat = stat.type; } } if(inflictwhat != ~~) { var dicelist = []; for(mydice in self.dicepool) { if(mydice.available() && mydice.burn != true && mydice.alternateburn != true) { dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); dicelist[0].animate(inflictwhat); } if(self.status.length > 0) { for(stat in self.status) { if(stat.type == inflictwhat) { stat.value--; } } } } /*-we walked in?*/,,,,RED,,,,,,,,powercard,,,,,,,,,,,,
Wicker Man?,Moth's Beanie|Gain [reduce]1 reduce,2,inflictself(REDUCE); sfx(~_shield~);,,,,RED,,change_power,,,,YES,,alternateversion|powercard,,,,,,,,,,,,
Wicker Man?_downgraded,Raw Bee Power|Inflict [shock]1 shock,2,inflict(SHOCK); sfx(~_shock~);,,,,RED,,,,,,YES,,alternateversion|powercard,,,,,,,,,,,,
Hall of Mirrors[],[]+1 dice this fight,2,if(simulation) { bonus(1000); } else{ self.extradice++; },,REQUIRE6,,PURPLE,simplify,doublerequirements,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Keyhole,Flip and split die[;]|flip results,2,var s = split(7-d); givedice([7-s[0]|7-s[1]]);,,NORMAL,,GREEN,reducesize,complicate,,splitdice,0,YES,NO,,,,,,,,,,,,,
Keyhole_weakened,Flip and split die[;]|flip results,2,var s = split(7-d); givedice([7-s[0]|7-s[1]]);,,MAX3,,GREEN,,,,splitdice,0,YES,NO,,,,,,,,,,,,,
Keyhole_deckupgrade,Split die[;]|flip results,2,var s = split(d); givedice([7-s[0]|7-s[1]]);,,NORMAL,,GREEN,,,,splitdice,0,YES,NO,,,,,,,,,,,,,
Ashley Bat,Gain [fury]Fury (just 1) on 5[;]|then do [sword]<d6> damage,2,attack(d); e.setvar(~ashleyuses~|e.getvar(~ashleyuses~) + 1); if ( e.getvar(~ashleycheck~) == true ) { e.setvar(~ashleyuses~|0); e.setvar(~ashleycheck~|false); } if(getstatusself(FURY) == 0) { e.setvar(~ashleycheck~|true); }  /*i don't feel comfortable fucking around with e.timesused for this*/,,MAX5,,RED,change_power,change_function,,_damage,0,NO,NO,,,,,,e.setvar(~ashleyuses~|0);,,,,if(d == 5 && e.getvar(~ashleyuses~) == 0) { inflictself(FURY); sfx(~_fury~|~~|0.2); },,donothing(); /*what happens if you use ashley while you have fury is handled in ashley's script*/,
Ashley Bat_upgraded,Do [sword]<d6> damage[;] then|gain [fury]Fury (just 1) on 5,2,attack(d); if(d == 5 && e.getvar(~ashleyuses~) == 0) { inflictself(FURY); sfx(~_fury~|~~|0.2); } e.setvar(~ashleyuses~|e.getvar(~ashleyuses~) + 1); if(e.preventdefault == true) { e.maintainfury = false; e.preventdefault = false; e.setvar(~ashleyuses~|0); } if(getstatusself(FURY) == 1) { e.maintainfury = true; e.preventdefault = true; },,MAX5,,RED,,,,_damage,0,NO,NO,,,,,,e.setvar(~ashleyuses~|0);,,,,,,donothing();,
Ashley Bat_downgraded,Gain [fury]Fury (just 1) on 3[;]|then do [sword]<d6> damage,2,attack(d); e.setvar(~ashleyuses~|e.getvar(~ashleyuses~) + 1); if ( e.getvar(~ashleycheck~) == true ) { e.setvar(~ashleyuses~|0); e.setvar(~ashleycheck~|false); } if(getstatusself(FURY) == 0) { e.setvar(~ashleycheck~|true); },,MAX3,,RED,,,,_damage,0,NO,NO,,,,,,e.setvar(~ashleyuses~|0);,,,,if(d == 3 && e.getvar(~ashleyuses~) == 0) { inflictself(FURY); sfx(~_fury~|~~|0.2); },,donothing();,
Sacred Grounds,Do [sword]<d6> damage[;] inflict|[vanish]Vanish and [weaken]Weaken,2,attack(d); inflict(~ncr_vanish~); inflict(WEAKEN| 1); sfx(~_vanish~|~~|0.2); sfx(~_weaken~|~~|0.2);,,MAX4,,PINK,change_power,change_power,,_damage,0,NO,NO,,1,,,,,,,,,,,
Sacred Grounds_upgraded,Do [sword]<d6> damage[;] inflict|[vanish]Vanish and [weaken]Weaken,2,attack(d); inflict(~ncr_vanish~); inflict(WEAKEN| 1); sfx(~_vanish~|~~|0.2); sfx(~_weaken~|~~|0.2);,,NORMAL,,PINK,,,,_damage,0,NO,NO,,,,,,,,,,,,,
Sacred Grounds_downgraded,Do [sword]<d6> damage,2,attack(d);,,REQUIRE5,,PINK,,,,_damage,0,NO,NO,,,,,,,,,,,,,
Drill,Inflict [weaken]<d6> weaken,2,inflict(WEAKEN|d);,,MAX3,,ORANGE,change_power,change_function,,_weaken,0,NO,NO,,,,,,,,,,,,,
Drill_downgraded,Do [weaken]<d6> damage,2,attack(d|WEAKEN);,,MAX3,,ORANGE,,,,_weaken,0,NO,NO,,,,,,,,,,,,,
Drill_upgraded,Do [weaken]<d6> damage[;] then|inflict [weaken]<d6> weaken,2,attack(d|WEAKEN); inflict(WEAKEN|d);,,MAX3,,ORANGE,,,,_weaken,0,NO,NO,,,,,,,,,,,,,
Virtue Grip,Get sum twice. Overflow|only returns excess dice,2,var s = (actualdice[0].basevalue + actualdice[1].basevalue) % 6; if(s == 0) { s = 6; } givedice([s|s]);,,NORMAL|NORMAL,,GREEN,change_power,change_function,,none,0,YES,NO,,1,,,,,,,,,,,
Virtue Grip_upgraded,Get sum thrice. Overflow|only returns excess dice,2,var s = (actualdice[0].basevalue + actualdice[1].basevalue) % 6; if(s == 0) { s = 6; } givedice([s|s|s]);,,NORMAL|NORMAL,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Virtue Grip_downgraded,Get sum twice. Overflow|only returns excess dice,2,var s = (actualdice[0].basevalue + actualdice[1].basevalue) % 6; if(s == 0) { s = 6; } givedice([s|s]);,,DOUBLES|DOUBLES,,GREEN,,,,none,0,YES,NO,,,,,,,,,,,,,
Jester[],Decksterity Charm|Gain a boosterpack[;] once,2,runscript(~diceydungeons/decksteritycharm~); trace(self.getvar(~packstogive~)); for(x in self.getvar(~packstogive~)){addjestercard(x);} var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete();,,,,ORANGE,,change_power,,,,YES,,powercard,,,,,,,,,,,,
Jester[]_downgraded,Double Dealing|Gain 2 booster cards[;] once|[80%]''Wait[;] is this a Touhou joke?''[],2,runscript(~diceydungeons/doubledealing~); trace(self.getvar(~packstogive~)); for(x in self.getvar(~packstogive~)){addjestercard(x);} var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete();,,,,ORANGE,,,,,,YES,,powercard,,,,,,,,,,,,
Rubber Mallet[],Do [sword]<d6> damage[;]|on 1[;] also reroll|[gray](<evar:fetusdeletus> out of 3 times used)[],2,e.setvar(~fetusdeletus~ | e.getvar(~fetusdeletus~) + 1); var fetusdeletus = e.getvar(~fetusdeletus~); attack(d); if(d == 1){givedice();} if(self.layout == ~DECK~ && e.getvar(~fetusdeletus~) == 3) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 1) { givedice(); }
Rubber Mallet[]_upgraded,Do [sword]<d6> damage[;]|on odd[;] also reroll|[gray](<evar:fetusdeletus> out of 3 times used)[],2,e.setvar(~fetusdeletus~ | e.getvar(~fetusdeletus~) + 1); attack(d); if(d % 2 == 1){givedice();} if(self.layout == ~DECK~ && e.getvar(~fetusdeletus~) == 3) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); },,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d % 2 == 1) { givedice(); }
Rubber Mallet[]_downgraded,Do [sword]<d6> damage[;]|on 1[;] also reroll|[gray](<evar:fetusdeletus> out of 3 times used)[],2,e.setvar(~fetusdeletus~ | e.getvar(~fetusdeletus~) + 1); attack(d); if(d == 1){givedice();} if(self.layout == ~DECK~ && e.getvar(~fetusdeletus~) == 3) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); },,ODD,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 1) { givedice(); } 
Rubber Mallet[][],Do [sword]<d6> damage[;]|on 1[;] also reroll|[gray](one use only)[],2,attack(d); if(d == 1){givedice();} if(self.layout == ~DECK~) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); },,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 1) { givedice(); }
Rubber Mallet[][]_upgraded,Do [sword]<d6> damage[;]|on odd[;] also reroll|[gray](one use only)[],2,attack(d); if(d % 2 == 1){givedice();} if(self.layout == ~DECK~) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); },,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d % 2 == 1) { givedice(); }
Rubber Mallet[][]_downgraded,Do [sword]<d6> damage[;]|on 1[;] also reroll|[gray](one use only)[],2,attack(d); if(d == 1){givedice();} if(self.layout == ~DECK~) { var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); },,ODD,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 1) { givedice(); } 
Exile,Delete the card to the left|of this[;] if there is one|If not[;] return the dice,2,,,ODD,,WHITE,change_power,complicate,,none,,YES,,excludefromrandomlists,,,,,,,,,if (!simulation) {var lefteq = null; var leftcard = null; for (eq in self.equipment) if (eq != e && eq.ready && eq.active && eq.x < e.x && (lefteq == null # eq.x > lefteq.x)) lefteq = eq; for (i in 0...3) {var card = Deck.getcard(i); if (card != null && card.equipment == lefteq) {leftcard = card; break;}} if (leftcard != null) leftcard.delete(); else givedice(d); } else bonus(-1000);,,e.preventdefault = true; e.maintainfury = true;,
Exile_upgraded,Odd: delete the card to the|left of this[;] if there is one,2,,,NORMAL,,WHITE,,,,,,YES,,excludefromrandomlists,,,,,,,,,if(d % 2 == 1){if (!simulation) {var lefteq = null; var leftcard = null; for (eq in self.equipment) if (eq != e && eq.ready && eq.active && eq.x < e.x && (lefteq == null # eq.x > lefteq.x)) lefteq = eq; for (i in 0...3) {var card = Deck.getcard(i); if (card != null && card.equipment == lefteq) {leftcard = card; break;}} if (leftcard != null) leftcard.delete(); else givedice(d); } else bonus(-1000);} else{givedice(d);},,e.preventdefault = true; e.maintainfury = true;,
Pekay Fire,Do [fire]2 damage|Cost [edenmana]1: Inflict [flame]Flame,2,var dmg = 0; if(getstatusself(~edenmana~) > 0){dmg = getstatusself(~spellpower~); inflict(~flame~); removestatusself(~edenmana~);} attack(2 + dmg | FIRE);,,NORMAL,,ORANGE,change_power,complicate,,,,,,excludefromrandomlists,,,,,,,,,,,,
Pekay Fire_upgraded,Do [fire]3 damage|Cost [edenmana]1: Inflict [flame]Flame,2,var dmg = 0; if(getstatusself(~edenmana~) > 0){dmg = getstatusself(~spellpower~); inflict(~flame~); removestatusself(~edenmana~);} attack(3 + dmg | FIRE);,,NORMAL,,ORANGE,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Frostbolt,Do [ice]2 damage|Cost [edenmana]1: Inflict [frost]Frost,2,var dmg = 0; if(getstatusself(~edenmana~) > 0){dmg = getstatusself(~spellpower~); inflict(~frost~); removestatusself(~edenmana~);} attack(2 + dmg | ICE);,,NORMAL,,BRIGHTCYAN,change_power,complicate,,,,,,excludefromrandomlists,,,,,,,,,,,,
Frostbolt_upgraded,Do [ice]3 damage|Cost [edenmana]1: Inflict [frost]Frost,2,var dmg = 0; if(getstatusself(~edenmana~) > 0){dmg = getstatusself(~spellpower~); inflict(~frost~); removestatusself(~edenmana~);} attack(3 + dmg | ICE);,,NORMAL,,BRIGHTCYAN,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Step Slash,Do [sword]4 damage [ancolor]([anchor]Anchor)[]|Cost [edenmana]1: no [anchor]anchor,2,if(getstatusself(~edenmana~) == 0){inflictself(~anchor~); attack(4);} else{removestatusself(~edenmana~); attack(4 + getstatusself(~spellpower~));},,MIN3,,RED,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,,,,,,
Step Slash_upgraded,Do [sword]1 damage 4 times|Cost [edenmana]1: gain [trinity]Trinity,2,for(x in 0...4){attack(1);} if(getstatusself(~edenmana~) > 0){inflictself(~trinity~); removestatusself(~edenmana~); for(x in 0...getstatusself(~spellpower~)){attack(1);}},,MIN3,,RED,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Step Slash_downgraded,Cost [edenmana]1: do [sword]4 damage|[ancolor]([anchor]Anchor),2,if(getstatusself(~edenmana~) > 0){attack(4 + getstatusself(~spellpower~)); inflictself(~anchor~); removestatusself(~edenmana~);},,MIN3,,RED,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Kinetic Wave,Do [sword]1 damage <d6> times|On [flow]Flow[;] gain 1 [edenmana]Mana|Gain 2 [flow]Flow,2,for(x in 0...d){attack(1);} if(getstatusself(~flow~) > 0){inflictself(~edenmana~);} inflictself(~flow~ | 2);,,MAX4,,GREEN,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,,,,,,
Kinetic Wave_upgraded,Do [sword]1 damage <d6> times|On [flow]Flow[;] gain 1 [edenmana]Mana|Gain 2 [flow]Flow and a [jam]Jam,2,for(x in 0...d){attack(1);} if(getstatusself(~flow~) > 0){inflictself(~edenmana~);} inflictself(~flow~ | 2); addjestercard(~Jam~);,,MAX4|FREE4,,GREEN,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Kinetic Wave_downgraded,Do [sword]1 damage <d6> times|On [flow]Flow[;] gain 1 [edenmana]Mana|Gain 2 [flow]Flow,2,for(x in 0...d){attack(1);} if(getstatusself(~flow~) > 0){inflictself(~edenmana~);} inflictself(~flow~ | 2);,,MAX3,,GREEN,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Jam,[jam][]|A waste of space.|Cost [edenmana]1: delete this card.,2,var deleteindex = -1; if(getstatusself(~edenmana~) > 0){removestatusself(~edenmana~); for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete(); },,NORMAL,,WHITE,change_power,doublerequirements,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Jam_upgraded,[jam][]|A waste of space.|Delete this card.,2,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) { deleteindex = i; break; } Deck.getcards(~all~)[deleteindex].delete();,,NORMAL,,WHITE,,,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Thunder,In [jinx]2 turns[;]|[shock]4 damage and [jolt]Jolt|Cost [edenmana]1: instant,2,if(getstatusself(~edenmana~) > 0){removestatusself(~edenmana~); inflictstatus(jolt); attack(4 + getstatusself(~spellpower~) | SHOCK);} else{jinx(~Thunder~|~take [shock]%VAR% damage and gain [jolt]Jolt~|~Take [shock]%VAR% damage and gain [jolt]Jolt~|~attack(%VAR% | SHOCK); inflict(\~jolt\~); sfx(\~_shock\~);~|target|self|2|4); sfx(~_thinghappens~);},,COUNTDOWN,5,YELLOW,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,,,,,,
Thunder_upgraded,In [jinx]2 turns[;]|[shock]4 damage and [jolt]Jolt|Cost [edenmana]1: instant[;] inflicts [fragile]Fragile,2,if(getstatusself(~edenmana~) > 0){removestatusself(~edenmana~); attack(4 + getstatusself(~spellpower~) | SHOCK); inflict(~fragile~); inflict(~jolt~);} else{jinx(~Thunder+~|~take [shock]%VAR% damage and gain [jolt]Jolt~|~Take [shock]%VAR% damage and gain [jolt]Jolt~|~attack(%VAR% | SHOCK); inflict(\~jolt\~); sfx(\~_shock\~);~|target|self|2|4); sfx(~_thinghappens~);},,COUNTDOWN,5,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Thunder_downgraded,Cost [edenmana]1:|in [jinx]2 turns[;]|[shock]4 damage and [jolt]Jolt,2,if(getstatusself(~edenmana~) > 0){removestatusself(~edenmana~); jinx(~Thunder-~|~take [shock]%VAR% damage and gain [jolt]Jolt~|~Take [shock]%VAR% damage and gain [jolt]Jolt~|~attack(%VAR% | SHOCK); sfx(\~_shock\~); inflictself(\~jolt\~);~|target|self|2|(4 + getstatusself(~spellpower~))); sfx(~_thinghappens~);},,COUNTDOWN,5,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Multi Potion,Cost [edenmana]1: heal [heal]4 health|If out of [edenmana]mana[;]|gain [edenmana]2 mana instead,2,if(getstatusself(~edenmana~) > 0){removestatusself(~edenmana~); pierceattackself(-4 - getstatusself(~spellpower~)); sfx(~_heal~);} else{inflictself(~edenmana~ | 2); sfx(~_cure~);},,NORMAL,,PINK,change_power,complicate,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Multi Potion_upgraded,Cost [edenmana]1: heal [heal]6 health|If out of [edenmana]mana[;]|gain [edenmana]3 mana instead,2,if(getstatusself(~edenmana~) > 0){removestatusself(~edenmana~); pierceattackself(-6 - getstatusself(~spellpower~)); sfx(~_heal~);} else{inflictself(~edenmana~ | 3); sfx(~_cure~);},,NORMAL,,PINK,,,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Field Bracer,Do [sword]2 damage|(Counts as a [spellpower]spell[])|,2,attack(2 + getstatusself(~spellpower~));,,MAX3,,WHITE,simplify,removereusable,,,-1,,,finale|excludefromrandomlists,,,,,,,,,,,,
Focus,Cost [edenmana]1:|gain 1 [spellpower]Spell [spellcolor]Power,2,inflictself(~spellpower~);,,MIN5,,BRIGHTCYAN,simplify,doublerequirements,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Eden Deck,1 Multi Potion and 2 of:|Frostbolt[;] Step Slash[;]|Kinetic Wave[;] Thunder|Finale Card: Field Bracer,2,,,,,BRIGHTCYAN,,,,,,,,excludefromrandomlists|finale,,,,var deleteindex = -1; for(i in 0...Deck.getcards(~all~).length) if(Deck.getcards(~all~)[i].equipment == e) {Deck.getcards(~all~)[i].equipment = new elements.Equipment(~Field Bracer~);} for(x in [~Frostbolt~|~Frostbolt~|~Kinetic Wave~|~Kinetic Wave~|~Step Slash~|~Step Slash~|~Thunder~|~Thunder~|~Multi Potion~]){addjestercard(x);},,,,,,,,
Charge Ring,Do [sword]1 damage|While held[;] refill +1 [edenmana]Mana|at the start of the turn,2,attack(1);,,NORMAL,,BRIGHTCYAN,change_power,complicate,,,,,,excludefromrandomlists,,,,,if(e.onscreen()){inflictself(~edenmana~);},,,,,,,
Charge Ring_upgraded,Do [sword]1 damage|While held[;] refill +2 [edenmana]Mana|at the start of the turn,2,attack(1);,,NORMAL,,BRIGHTCYAN,,,,,,,,excludefromrandomlists,,,,,if(e.onscreen()){inflictself(~edenmana~ | 2);},,,,,,,
One Ring,Do [sword]1 damage|While held[;] roll a one|when you spend exactly [edenmana]1,2,attack(1);,,NORMAL,,WHITE,change_power,complicate,,,,,,excludefromrandomlists,,,,,,if(getstatusself(~edenmana~) + 1 == self.getvar(~pastmana~)){givedice(1);} self.setvar(~pastmana~ | getstatusself(~edenmana~));,,,,,,
One Ring_upgraded,Do [sword]1 damage|While held[;] roll a one|when you spend [edenmana]1 or [edenmana]2,2,attack(1);,,NORMAL,,WHITE,,,,,,,,excludefromrandomlists,,,,,,if(getstatusself(~edenmana~) + 1 == self.getvar(~pastmana2~)){givedice(1);} if(getstatusself(~edenmana~) + 2 == self.getvar(~pastmana2~)){givedice(1);} self.setvar(~pastmana2~ | getstatusself(~edenmana~));,,,,,,
Amber Ring,Do [sword]1 damage|While held[;] gain 1 [guard]Guard|every time you play a card,2,attack(1);,,NORMAL,,ORANGE,change_power,complicate,,,,,,excludefromrandomlists,,,,,,inflictself(~guard~);,,,,,,
Amber Ring_upgraded,Do [sword]1 damage|While held[;] gain 2 [guard]Guard|every time you play a card,2,attack(1);,,NORMAL,,ORANGE,,,,,,,,excludefromrandomlists,,,,,,inflictself(~guard~ | 2);,,,,,,
Electrum Ring,Do [sword]1 damage|If held at end of battle[;]|gain [gold]2 extra gold,2,attack(1);,,NORMAL,,YELLOW,change_power,complicate,,,,,,excludefromrandomlists,,,,,,,,if(target.hp < 1 && e.onscreen()){self.gold += 2;},,,,
Electrum Ring_upgraded,Do [sword]1 damage|If held at end of battle[;]|gain [gold]3 extra gold,2,attack(1);,,NORMAL,,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,if(target.hp < 1 && e.onscreen()){self.gold += 3;},,,,
Electron Ring,Do [sword]1 damage|While held[;] inflict [jolt]Jolt|at the start of each turn,2,attack(1);,,NORMAL,,YELLOW,change_power,complicate,,,,,,excludefromrandomlists,,,,,if(e.onscreen()){inflict(~jolt~);},,,,,,,
Electron Ring_upgraded,Do [sword]1 damage|While held[;] inflict [jolt]2 Jolt|at the start of each turn,2,attack(1);,,NORMAL,,YELLOW,,,,,,,,excludefromrandomlists,,,,,if(e.onscreen()){inflict(~jolt~ | 2);},,,,,,,
Oneion Ring,Do [sword]1 damage|While held[;] heal [heal]2 health|when you spend exactly [edenmana]1,2,attack(1);,,NORMAL,,GREEN,change_power,complicate,,,,,,excludefromrandomlists,,,,,,if(getstatusself(~edenmana~) + 1 == self.getvar(~pastmana3~)){pierceattackself(-2);} self.setvar(~pastmana3~ | getstatusself(~edenmana~));,,,,,,
Oneion Ring_upgraded,Do [sword]1 damage|While held[;] heal [heal]2 health|when you spend [edenmana]1 or [edenmana]2,2,attack(1);,,NORMAL,,GREEN,,,,,,,,excludefromrandomlists,,,,,,if(getstatusself(~edenmana~) + 1 == self.getvar(~pastmana4~)){pierceattackself(-2);} if(getstatusself(~edenmana~) + 2 == self.getvar(~pastmana4~)){pierceattackself(-2);} self.setvar(~pastmana4~ | getstatusself(~edenmana~));,,,,,,
Clock Ring,Do [sword]1 damage|While held[;] gain [haste]Haste|+ inflict [slow]Slow each turn,2,attack(1);,,NORMAL,,PINK,change_power,complicate,,,,,,excludefromrandomlists,,,,,if(e.onscreen()){inflictself(~haste~); inflict(~slow~);},,,,,,,
Clock Ring_upgraded,Do [sword]1 damage|While held[;] gain 2 [haste]Haste|+ inflict 2 [slow]Slow each turn,2,attack(1);,,NORMAL,,PINK,,,,,,,,excludefromrandomlists,,,,,if(e.onscreen()){inflictself(~haste~ | 2); inflict(~slow~ | 2);},,,,,,,
Clathrate Ring@fire,While held[;] inflict [flame]Flame|at the start of each turn|Use to switch to [frost]Frost,2,e.setvar(~change~ | 1);,,NORMAL,,RED,change_power,complicate,,,,YES,,excludefromrandomlists,,,,if(e.getvar(~change~) == 1){e.create(~Clathrate Ring@ice~); e.y = 9999;},if(e.onscreen()){inflict(~flame~);} e.setvar(~change~ | 0);,,,,,,,
Clathrate Ring@fire_upgraded,[95%]While held[;][95%] inflict 2 [flame]Flame|[95%]at the start of each turn|[95%]Use to switch to [frost]Frost,2,e.setvar(~change~ | 1);,,NORMAL,,RED,,,,,,YES,,excludefromrandomlists,,,,if(e.getvar(~change~) == 1){e.create(~Clathrate Ring@ice~|true); e.y = 9999;},if(e.onscreen()){inflict(~flame~ | 2);} e.setvar(~change~ | 0);,,,,,,,
Clathrate Ring@ice,While held[;] inflict [frost]Frost|at the start of each turn|Use to switch to [flame]Flame,2,e.setvar(~change~ | 1);,,NORMAL,,BRIGHTCYAN,change_power,complicate,,,,YES,,excludefromrandomlists,,,,if(e.getvar(~change~) == 1){e.create(~Clathrate Ring@fire~); e.y = 9999;},if(e.onscreen()){inflict(~frost~);} e.setvar(~change~ | 0);,,,,,,,
Clathrate Ring@ice_upgraded,[95%]While held[;][95%] inflict 2 [frost]Frost|[95%]at the start of each turn|[95%]Use to switch to [flame]Flame,2,e.setvar(~change~ | 1);,,NORMAL,,BRIGHTCYAN,,,,,,YES,,excludefromrandomlists,,,,if(e.getvar(~change~) == 1){e.create(~Clathrate Ring@fire~|true); e.y = 9999;},if(e.onscreen()){inflict(~frost~ | 2);} e.setvar(~change~ | 0);,,,,,,,
Cracked Dice,Split dice into three[;]|gain [crack]Crack|Cost [edenmana]1: also return dice,2,givedice(split(d | 3)[;] ~splitdice~); inflictself(~crack~); if(getstatusself(~edenmana~) > 0){givedice(d); if(getstatusself(~spellpower~) > 0){givedice(getstatusself(~spellpower~));} removestatusself(~edenmana~);},,MIN3,,WHITE,change_power,complicate,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Cracked Dice_upgraded,Split dice into three|Cost [edenmana]1: also return dice,2,givedice(split(d | 3)[;] ~splitdice~); if(getstatusself(~edenmana~) > 0){givedice(d); if(getstatusself(~spellpower~) > 0){givedice(getstatusself(~spellpower~));} removestatusself(~edenmana~);},,MIN3,,WHITE,,,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Blink,Next turn[;] gain|[move]Teleport and [haste]Haste|Cost [edenmana]1: return the dice,2,if(getstatusself(~edenmana~) > 0){givedice(d); if(getstatusself(~spellpower~) > 0){givedice(getstatusself(~spellpower~));} removestatusself(~edenmana~);} jinx(~Blink~|~gain [move]Teleport and [haste]Haste~|~Gain [move]Teleport and [haste]Haste~|~inflict(\~haste\~); inflict(\~swap\~);~|self|self|1|2);,,NORMAL,,GREEN,change_power,complicate,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Blink_upgraded,Next turn[;] gain|[move]Teleport and 2 [haste]Haste|Cost [edenmana]1: return the dice,2,if(getstatusself(~edenmana~) > 0){givedice(d); if(getstatusself(~spellpower~) > 0){givedice(getstatusself(~spellpower~));} removestatusself(~edenmana~);} jinx(~Blink+~|~gain [move]Teleport and 2 [haste]Haste~|~Gain [move]Teleport and 2 [haste]Haste~|~inflict(\~haste\~ | 2); inflict(\~swap\~);~|self|self|1|2);,,NORMAL,,GREEN,,,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Wobble,Do [sword]1 damage 4 times[;]|inflict 2 [push]Push + 2 [pull]Pull,2,attack(1); inflict(~push~); attack(1); inflict(~pull~); attack(1); inflict(~push~); attack(1); inflict(~pull~);,,RANGE25,,GREEN,simplify,complicate,,,,,,excludefromrandomlists,,,,,,,,,,,,
Dice Tower,Reroll all unused dice|Cost [edenmana]1: set all dice values|equal to the highest one|Also[;] return the dice,2,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1|2|3|4|5|6])| self.screenposition()| c * 0.05); c++; } } var s = new elements.Skill(~Dice Tower Skill~); var tw = new motion.actuators.SimpleActuator(null|1 + (0.05 * c));  tw._repeat = 0; tw.onComplete(s.execute|[self|target]); tw.move();,,EVEN,,PURPLE,change_power,complicate,,,,YES,,excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Dice Tower_upgraded,Reroll all unused dice|Cost [edenmana]1: set all dice values|equal to the highest one|Also[;] duplicate dice,2,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(rand([1|2|3|4|5|6])| self.screenposition()| c * 0.05); c++; } } var s = new elements.Skill(~Dice Tower Skill 2~); var tw = new motion.actuators.SimpleActuator(null|1 + (0.05 * c));  tw._repeat = 0; tw.onComplete(s.execute|[self|target]); tw.move();,,EVEN,,PURPLE,,,,,,YES,,excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Helleporter,To all: [push]Push[;] [pull]Pull[;]|[move]Teleport and [flame]Flame,2,for(x in [~swap~|~push~|~pull~|~flame~]){inflictself(x);} for(x in [~swap~|~push~|~pull~|~flame~]){inflict(x);},,ODD,,RED,simplify,complicate,,,,YES,,excludefromrandomlists,,,,,,,,,,,,
Francisca,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [frost]Frost|Cost [edenmana]1: inflict [frost]Frost,2,attack(d); if(d == 6){inflict(~frost~);} if(getstatusself(~edenmana~) > 0){inflict(~frost~); removestatusself(~edenmana~);},,NORMAL,,BRIGHTCYAN,change_power,change_power,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Francisca_upgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [frost]Frost|Cost [edenmana]1: inflict [frost]Frost,2,attack(d); if(d == 7){inflict(~frost~);} if(getstatusself(~edenmana~) > 0){inflict(~frost~); removestatusself(~edenmana~);},,NORMAL|FREE1,,BRIGHTCYAN,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Francisca_downgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [frost]Frost|Cost [edenmana]1: inflict [frost]Frost,2,attack(d); if(d == 6){inflict(~frost~);} if(getstatusself(~edenmana~) > 0){inflict(~frost~); removestatusself(~edenmana~);},,MAX5,,BRIGHTCYAN,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Flamberge,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [flame]Flame|Cost [edenmana]1: inflict [flame]Flame,2,attack(d); if(d == 6){inflict(~flame~);} if(getstatusself(~edenmana~) > 0){inflict(~flame~); removestatusself(~edenmana~);},,NORMAL,,ORANGE,change_power,change_power,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Flamberge_upgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [flame]Flame|Cost [edenmana]1: inflict [flame]Flame,2,attack(d); if(d == 7){inflict(~flame~);} if(getstatusself(~edenmana~) > 0){inflict(~flame~); removestatusself(~edenmana~);},,NORMAL|FREE1,,ORANGE,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Flamberge_downgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 5[;] inflict [flame]Flame|Cost [edenmana]1: inflict [flame]Flame,2,attack(d); if(d == 6){inflict(~flame~);} if(getstatusself(~edenmana~) > 0){inflict(~flame~); removestatusself(~edenmana~);},,MAX5,,ORANGE,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Orbital Beam,Do [weaken]2 damage|Cost [edenmana]1: Inflict [break]break,2,var dmg = 0; if(getstatusself(~edenmana~) > 0){dmg = getstatusself(~spellpower~); inflict(~break~); removestatusself(~edenmana~);} attack(2 + dmg | WEAKEN);,,NORMAL,,GREEN,change_power,complicate,,,,,,excludefromrandomlists,,,,,,,,,,,,
Orbital Beam_upgraded,Do [weaken]3 damage|Cost [edenmana]1: Inflict [break]break,2,var dmg = 0; if(getstatusself(~edenmana~) > 0){dmg = getstatusself(~spellpower~); inflict(~break~); removestatusself(~edenmana~);} attack(3 + dmg | WEAKEN);,,NORMAL,,GREEN,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Otsuchi,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [break]Break|Cost [edenmana]1: inflict [break]Break,2,attack(d); if(d == 6){inflict(~break~);} if(getstatusself(~edenmana~) > 0){inflict(~break~); removestatusself(~edenmana~);},,NORMAL,,WHITE,change_power,change_power,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Otsuchi_upgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [break]Break|Cost [edenmana]1: inflict [break]Break,2,attack(d); if(d == 7){inflict(~break~);} if(getstatusself(~edenmana~) > 0){inflict(~break~); removestatusself(~edenmana~);},,NORMAL|FREE1,,WHITE,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Otsuchi_downgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [break]Break|Cost [edenmana]1: inflict [break]Break,2,attack(d); if(d == 6){inflict(~break~);} if(getstatusself(~edenmana~) > 0){inflict(~break~); removestatusself(~edenmana~);},,MAX5,,WHITE,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Bec de Corbin,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [crack]Crack|Cost [edenmana]1: inflict [crack]Crack,2,attack(d); if(d == 6){inflict(~crack~);} if(getstatusself(~edenmana~) > 0){inflict(~crack~); removestatusself(~edenmana~);},,NORMAL,,WHITE,change_power,change_power,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Bec de Corbin_upgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [crack]Crack|Cost [edenmana]1: inflict [crack]Crack,2,attack(d); if(d == 7){inflict(~crack~);} if(getstatusself(~edenmana~) > 0){inflict(~crack~); removestatusself(~edenmana~);},,NORMAL|FREE1,,WHITE,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Bec de Corbin_downgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [crack]Crack|Cost [edenmana]1: inflict [crack]Crack,2,attack(d); if(d == 6){inflict(~crack~);} if(getstatusself(~edenmana~) > 0){inflict(~crack~); removestatusself(~edenmana~);},,MAX5,,WHITE,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Kusari Fundo,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [link]Link|Cost [edenmana]1: inflict [link]Link,2,attack(d); if(d == 6){inflict(~link~);} if(getstatusself(~edenmana~) > 0){inflict(~link~); removestatusself(~edenmana~);},,NORMAL,,RED,change_power,change_power,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Kusari Fundo_upgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [link]Link|Cost [edenmana]1: inflict [link]Link,2,attack(d); if(d == 7){inflict(~link~);} if(getstatusself(~edenmana~) > 0){inflict(~link~); removestatusself(~edenmana~);},,NORMAL|FREE1,,RED,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Kusari Fundo_downgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [link]Link|Cost [edenmana]1: inflict [link]Link,2,attack(d); if(d == 6){inflict(~link~);} if(getstatusself(~edenmana~) > 0){inflict(~link~); removestatusself(~edenmana~);},,MAX5,,RED,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Hilo Curado,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [fragile]Fragile|Cost [edenmana]1: inflict [fragile]Fragile,2,attack(d); if(d == 6){inflict(~link~);} if(getstatusself(~edenmana~) > 0){inflict(~link~); removestatusself(~edenmana~);},,NORMAL,,RED,change_power,change_power,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Hilo Curado_upgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [fragile]Fragile|Cost [edenmana]1: inflict [fragile]Fragile,2,attack(d); if(d == 7){inflict(~link~);} if(getstatusself(~edenmana~) > 0){inflict(~link~); removestatusself(~edenmana~);},,NORMAL|FREE1,,RED,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Hilo Curado_downgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [fragile]Fragile|Cost [edenmana]1: inflict [fragile]Fragile,2,attack(d); if(d == 6){inflict(~link~);} if(getstatusself(~edenmana~) > 0){inflict(~link~); removestatusself(~edenmana~);},,MAX5,,RED,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Partisan,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [jolt]Jolt|Cost [edenmana]1: inflict [jolt]Jolt,2,attack(d); if(d == 6){inflict(~jolt~);} if(getstatusself(~edenmana~) > 0){inflict(~jolt~); removestatusself(~edenmana~);},,NORMAL,,YELLOW,change_power,change_power,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Partisan_upgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [jolt]Jolt|Cost [edenmana]1: inflict [jolt]Jolt,2,attack(d); if(d == 7){inflict(~jolt~);} if(getstatusself(~edenmana~) > 0){inflict(~jolt~); removestatusself(~edenmana~);},,NORMAL|FREE1,,YELLOW,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Partisan_downgraded,[200%][nonspell]||Deal [sword]<d6> damage|On 6[;] inflict [jolt]Jolt|Cost [edenmana]1: inflict [jolt]Jolt,2,attack(d); if(d == 6){inflict(~jolt~);} if(getstatusself(~edenmana~) > 0){inflict(~jolt~); removestatusself(~edenmana~);},,MAX5,,YELLOW,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Rapier,[200%][nonspell]||Deal [sword]<d6> damage|On [flow]Flow[;] [sword]<d6> + 2|On 6 or [edenmana]1: gain 2 [flow]Flow,2,var flow = 0; if(getstatusself(~flow~) == 0){attack(d);} else{attack(d + 2);} if(d == 6){flow = 1;} if(getstatusself(~edenmana~) > 0 && flow != 1){flow = 1; removestatusself(~edenmana~);} if(flow > 0){inflictself(~flow~ | 3);},,NORMAL,,GREEN,change_power,change_power,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Rapier_upgraded,[200%][nonspell]||Deal [sword]<d6> damage|On [flow]Flow[;] [sword]<d6> + 2|On 6 or [edenmana]1: gain 2 [flow]Flow,2,var flow = 0; if(getstatusself(~flow~) == 0){attack(d);} else{attack(d + 2);} if(d == 7){flow = 1;} if(getstatusself(~edenmana~) > 0 && flow != 1){flow = 1; removestatusself(~edenmana~);} if(flow > 0){inflictself(~flow~ | 3);},,NORMAL|FREE1,,GREEN,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Rapier_downgraded,[200%][nonspell]||Deal [sword]<d6> damage|On [flow]Flow[;] [sword]<d6> + 2|On 6 or [edenmana]1: gain 2 [flow]Flow,2,var flow = 0; if(getstatusself(~flow~) == 0){attack(d);} else{attack(d + 2);} if(d == 6){flow = 1;} if(getstatusself(~edenmana~) > 0 && flow != 1){flow = 1; removestatusself(~edenmana~);} if(flow > 0){inflictself(~flow~ | 3);},,MAX5,,GREEN,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Sanjiegun,[200%][nonspell]||Deal [sword]<d6> damage|On [trinitycast]Tri [tricolor]Cast[;] [sword]<double>|On 6 or [edenmana]1: gain [trinity]Trinity,2,var trinity = 0; if(getstatusself(~trinitycast~) == 0){attack(d);} else{attack(d * 2); removestatusself(~trinitycast~);} if(d == 6){trinity = 1;} if(getstatusself(~edenmana~) > 0 && trinity != 1){trinity = 1; removestatusself(~edenmana~);} if(trinity > 0){inflictself(~trinity~ | 1);},,NORMAL,,PINK,change_power,change_power,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Sanjiegun_upgraded,[200%][nonspell]||Deal [sword]<d6> damage|On [trinitycast]Tri [tricolor]Cast[;] [sword]<double>|On 6 or [edenmana]1: gain [trinity]Trinity,2,var trinity = 0; if(getstatusself(~trinitycast~) == 0){attack(d);} else{attack(d * 2); removestatusself(~trinitycast~);} if(d == 7){trinity = 1;} if(getstatusself(~edenmana~) > 0 && trinity != 1){trinity = 1; removestatusself(~edenmana~);} if(trinity > 0){inflictself(~trinity~ | 1);},,NORMAL|FREE1,,PINK,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Sanjiegun_downgraded,[200%][nonspell]||Deal [sword]<d6> damage|On [trinitycast]Tri [tricolor]Cast[;] [sword]<double>|On 6 or [edenmana]1: gain [trinity]Trinity,2,var trinity = 0; if(getstatusself(~trinitycast~) == 0){attack(d);} else{attack(d * 2); removestatusself(~trinitycast~);} if(d == 6){trinity = 1;} if(getstatusself(~edenmana~) > 0 && trinity != 1){trinity = 1; removestatusself(~edenmana~);} if(trinity > 0){inflictself(~trinity~ | 1);},,MAX5,,PINK,,,,,,,,nonspell|excludefromrandomlists,,,,if(turn == 1){e.slotpositions[0].y = 203;},,,,,,,,
Rock Cycle,[edenmana]1: [sword]<double> damage|On [flow]Flow[;] freely reusable,2,var xpos = e.x; var ypos = e.y; if(getstatusself(~edenmana~) > 0){removestatusself(~edenmana~); attack(2 * (d + getstatusself(~spellpower~))); if(getstatusself(~flow~) > 0 && getstatusself(~edenmana~) > 0){e.create(e.name|e.namemodifier == ~+~); e.x = xpos; e.y = ypos;}},,MAX5,,GREEN,change_power,complicate,,,,,,excludefromrandomlists,,,,,,,,,,,,
Rock Cycle_upgraded,[edenmana]1: [sword]<double> damage|On [flow]Flow[;] freely reusable|Gain 1 [flow]Flow,2,inflictself(~flow~ | 2); var xpos = e.x; var ypos = e.y; if(getstatusself(~edenmana~) > 0){removestatusself(~edenmana~); attack(2 * (d + getstatusself(~spellpower~))); if(getstatusself(~flow~) > 0 && getstatusself(~edenmana~) > 0){e.create(e.name|e.namemodifier == ~+~); e.x = xpos; e.y = ypos;}},,MAX5,,GREEN,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Air Slash,[200%][nonspell]|Deal [sword]<d6> damage|and inflict 2 [push]Push,2,attack(d); inflict(~push~ | 2);,,NORMAL|FREE3,,GREEN,change_power,complicate,,,,,,nonspell|excludefromrandomlists,,,,,,,,,,,,
Air Slash_upgraded,[200%][nonspell]|Deal [sword]<d6> damage|and inflict [push]Push,2,attack(d); inflict(~push~);,,NORMAL|FREE3,,GREEN,,,,,,,,nonspell|excludefromrandomlists,,,,,,,,,,,,
Transfer Ownership,Give all non-[edenmana]mana-related|statuses to the enemy.|Yes[;] ALL of them.,2,for(x in self.status){if(!x.invisible && x.type.indexOf(~mana~) == -1){inflict(x.type | getstatusself(x.type)); removestatusself(x.type | ALL);}},,COUNTDOWN,20,PINK,threequartercountdown,noeffect,,,,,,excludefromrandomlists,,,,,,,,,,,,
Power Up Punch,Deal [sword]<d6> damage|On 6[;] gain [sword]1 attack power,2,attack(d); if(d == 6){inflictself(~extradamage~); var x = new elements.StatusEffect(~alternate_weaken~ | 1); x.invisible = true; x.remove_at_startturn = false; x.remove_at_endturn = false; target.status.push(x);},,NORMAL,,ORANGE,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,,,,,,
Power Up Punch_upgraded,Deal [sword]<d6> damage|On 6[;] gain [sword]1 attack power,2,attack(d); if(d == 4){inflictself(~extradamage~); var x = new elements.StatusEffect(~alternate_weaken~ | 1); x.invisible = true; x.remove_at_startturn = false; x.remove_at_endturn = false; target.status.push(x);},,NORMAL|FREE2,,ORANGE,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Power Up Punch,Deal [sword]<d6> damage|On 5[;] gain [sword]1 attack power,2,attack(d); if(d == 5){inflictself(~extradamage~); var x = new elements.StatusEffect(~alternate_weaken~ | 1); x.invisible = true; x.remove_at_startturn = false; x.remove_at_endturn = false; target.status.push(x);},,MAX5,,ORANGE,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Megahorn,Do [sword]<double> damage,2,attack(d * 2); bonus(200);,,MAX4|FREE2,,YELLOW,change_power,change_power,,,,,,excludefromrandomlists,,,,,,,,,,,,
Megahorn_upgraded,Do [sword]<double> damage,2,attack(d * 2);,,MAX5|FREE2,,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Megahorn_downgraded,Do [sword]<double> damage,2,attack(d * 2);,,MAX3|FREE2,,YELLOW,,,,,,,,excludefromrandomlists,,,,,,,,,,,,
Omegahonk,Inflict [silence]Silence and gain 2 [dodge]Dodge,2,inflict(SILENCE); inflict(WEAKEN|2); inflictself(DODGE);,,COUNTDOWN,12,ORANGE,halfcountdown,donothing,,,,,,excludefromrandomlists,,,,,,,,,,,,
Spatula[],Flip a dice upside down,1,givedice(7-d);,Megaflip,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,,1,,,,,,,,,,,
Spatula[]_downgraded,Flip a dice upside down,1,givedice(7-d);,Megaflip,MIN4,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Spatula[]_upgraded,Flip a dice upside down|[gray](Reuseable),1,givedice(7-d);,Megaflip,NORMAL,,GREEN,,,,,3,YES,NO,,,,,,,,,,,,,
Dicer,Dice dice[;] 60% chance|to take [dice]3 damage,2,givedice(split(d[;] rand([2[;] 3[;] 4]))[;] ~splitdice~); if (chance(60)) {attackself(3); sfxdamage(self[;] d);},,MIN3,,GREEN,change_power,change_power,,_metals,,YES,,,,,,,,,,,,,,
Dicer_upgraded,Dice dice[;] 60% chance|to take [dice]3 damage,2,givedice(split(d[;] rand([2[;] 3[;] 4]))[;] ~splitdice~); if (chance(60)) {attackself(3); sfxdamage(self[;] d);},,NORMAL,,GREEN,,,,_metals,,YES,,,,,,,,,,,,,,
Dicer_downgraded,Dice dice[;] 80% chance|to take [dice]3 damage,2,givedice(split(d[;] rand([2[;] 3[;] 4]))[;] ~splitdice~); if (chance(80)) {attackself(3); sfxdamage(self[;] d);},,MIN3,,GREEN,,,,_metals,,YES,,,,,,,,,,,,,,
Cheese Slicer,Drain [heart]1 health|On 1[;] drain double,2,if(d == 1){drain(2);} else{drain(1);},,NORMAL,,GREEN,change_power,complicate,,,,,,,,,,,,,,,,,,
Cheese Slicer_upgraded,Drain [heart]2 health|On 1[;] drain double,2,if(d == 1){drain(4);} else{drain(2);},,NORMAL,,GREEN,,,,,,,,,,,,,,,,,,,,
Starfruit,Heal [heal]2. If above max hp[;]|convert excess to [thorns]Thorns.,2,if(self.maxhp - self.hp == 0) { sfx(~_cure~); inflictself(THORNS|2); } else if(self.maxhp - self.hp == 1) { sfx(~_cure~); attackself(-1); inflictself(THORNS); } else { attackself(-2); sfx(~_heal~); },,NORMAL,,GREEN,change_power,change_power,,_heal,,YES,,,,,,,,,,,,,,
Starfruit_upgraded,Heal [heal]3. If above max hp[;]|convert excess to [thorns]Thorns.,2,if(self.maxhp - self.hp == 0) { sfx(~_cure~); inflictself(THORNS|3); } else if(self.maxhp - self.hp == 1) { sfx(~_cure~); attackself(-1); inflictself(THORNS|2); } else if(self.maxhp - self.hp == 2) { attackself(-2); inflictself(THORNS); sfx(~_cure~); } else { attackself(-3); sfx(~_heal~); },,NORMAL,,GREEN,,,,_heal,,YES,,,,,,,,,,,,,,
Starfruit_downgraded,Heal [heal]1. If above max hp[;]|convert excess to [thorns]Thorns.,2,if(self.maxhp - self.hp == 0) { sfx(~_cure~); inflictself(THORNS); } else { attackself(-1); sfx(~_heal~); },,NORMAL,,GREEN,,,,_heal,,YES,,,,,,,,,,,,,,
Shudder,Inflict [vanish]Vanish[;]|return both dice,2,inflict(~ncrvanish~); givedice(d); givedice(d); sfx(~_cure~);,,DOUBLES|DOUBLES,,PINK,change_power,change_power,,_cure,,YES,,,,,,,,,,,,,,
Shudder_upgraded,Inflict [vanish]Vanish[;]|return the die,2,inflict(~ncrvanish~); givedice(d); sfx(~_cure~);,,ODD,,PINK,,,,_cure,,YES,,,,,,,,,,,,,,
Shudder_downgraded,Inflict [vanish]Vanish[;]|gain a <slotdoubles>,2,inflict(~ncrvanish~); givedice(d); sfx(~_cure~);,,DOUBLES|DOUBLES,,PINK,,,,_cure,,YES,,,,,,,,,,,,,,
Pocket Knife[],Do [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfx(~_damage~);,Plasma Gun,MAX3|FREE1,,RED,change_power,change_power,,,3,NO,NO,,,,,,,,,,,,,
Pocket Knife[]_upgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfx(~_damage~);,Plasma Gun,MAX4|FREE2,,RED,,,,,3,NO,NO,,,,,,,,,,,,,
Pocket Knife[]_downgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d); sfx(~_damage~);,Plasma Gun,MAX3,,RED,,,,,3,NO,NO,,,,,,,,,,,,,
Bump[],Dice value +1,1,if(d >= 6){ givedice([6| 1]); } else { givedice(d + 1); },Megabump,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Bump[]_upgraded,Dice value +1|[gray](Reuseable),1,if(d >= 6){ givedice([6| 1]); } else { givedice(d + 1); },Megabump,NORMAL,,GREEN,,,,,2,YES,NO,,,,,,,,,,,,,
